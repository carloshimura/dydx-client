// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/params.proto

#include "tendermint/types/params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tendermint {
namespace types {
PROTOBUF_CONSTEXPR ConsensusParams::ConsensusParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_)*/nullptr
  , /*decltype(_impl_.evidence_)*/nullptr
  , /*decltype(_impl_.validator_)*/nullptr
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConsensusParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsensusParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsensusParamsDefaultTypeInternal() {}
  union {
    ConsensusParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsensusParamsDefaultTypeInternal _ConsensusParams_default_instance_;
PROTOBUF_CONSTEXPR BlockParams::BlockParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_bytes_)*/int64_t{0}
  , /*decltype(_impl_.max_gas_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockParamsDefaultTypeInternal() {}
  union {
    BlockParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockParamsDefaultTypeInternal _BlockParams_default_instance_;
PROTOBUF_CONSTEXPR EvidenceParams::EvidenceParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_age_duration_)*/nullptr
  , /*decltype(_impl_.max_age_num_blocks_)*/int64_t{0}
  , /*decltype(_impl_.max_bytes_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EvidenceParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvidenceParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvidenceParamsDefaultTypeInternal() {}
  union {
    EvidenceParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvidenceParamsDefaultTypeInternal _EvidenceParams_default_instance_;
PROTOBUF_CONSTEXPR ValidatorParams::ValidatorParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pub_key_types_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorParamsDefaultTypeInternal() {}
  union {
    ValidatorParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorParamsDefaultTypeInternal _ValidatorParams_default_instance_;
PROTOBUF_CONSTEXPR VersionParams::VersionParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionParamsDefaultTypeInternal() {}
  union {
    VersionParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionParamsDefaultTypeInternal _VersionParams_default_instance_;
PROTOBUF_CONSTEXPR HashedParams::HashedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_max_bytes_)*/int64_t{0}
  , /*decltype(_impl_.block_max_gas_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HashedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HashedParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HashedParamsDefaultTypeInternal() {}
  union {
    HashedParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HashedParamsDefaultTypeInternal _HashedParams_default_instance_;
}  // namespace types
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2ftypes_2fparams_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tendermint_2ftypes_2fparams_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tendermint_2ftypes_2fparams_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2ftypes_2fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ConsensusParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ConsensusParams, _impl_.block_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ConsensusParams, _impl_.evidence_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ConsensusParams, _impl_.validator_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ConsensusParams, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockParams, _impl_.max_bytes_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockParams, _impl_.max_gas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::EvidenceParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::EvidenceParams, _impl_.max_age_num_blocks_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::EvidenceParams, _impl_.max_age_duration_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::EvidenceParams, _impl_.max_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorParams, _impl_.pub_key_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::VersionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::VersionParams, _impl_.app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::HashedParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::HashedParams, _impl_.block_max_bytes_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::HashedParams, _impl_.block_max_gas_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::types::ConsensusParams)},
  { 10, -1, -1, sizeof(::tendermint::types::BlockParams)},
  { 18, -1, -1, sizeof(::tendermint::types::EvidenceParams)},
  { 27, -1, -1, sizeof(::tendermint::types::ValidatorParams)},
  { 34, -1, -1, sizeof(::tendermint::types::VersionParams)},
  { 41, -1, -1, sizeof(::tendermint::types::HashedParams)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tendermint::types::_ConsensusParams_default_instance_._instance,
  &::tendermint::types::_BlockParams_default_instance_._instance,
  &::tendermint::types::_EvidenceParams_default_instance_._instance,
  &::tendermint::types::_ValidatorParams_default_instance_._instance,
  &::tendermint::types::_VersionParams_default_instance_._instance,
  &::tendermint::types::_HashedParams_default_instance_._instance,
};

const char descriptor_table_protodef_tendermint_2ftypes_2fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035tendermint/types/params.proto\022\020tenderm"
  "int.types\032\024gogoproto/gogo.proto\032\036google/"
  "protobuf/duration.proto\"\333\001\n\017ConsensusPar"
  "ams\022,\n\005block\030\001 \001(\0132\035.tendermint.types.Bl"
  "ockParams\0222\n\010evidence\030\002 \001(\0132 .tendermint"
  ".types.EvidenceParams\0224\n\tvalidator\030\003 \001(\013"
  "2!.tendermint.types.ValidatorParams\0220\n\007v"
  "ersion\030\004 \001(\0132\037.tendermint.types.VersionP"
  "arams\"7\n\013BlockParams\022\021\n\tmax_bytes\030\001 \001(\003\022"
  "\017\n\007max_gas\030\002 \001(\003J\004\010\003\020\004\"~\n\016EvidenceParams"
  "\022\032\n\022max_age_num_blocks\030\001 \001(\003\022=\n\020max_age_"
  "duration\030\002 \001(\0132\031.google.protobuf.Duratio"
  "nB\010\310\336\037\000\230\337\037\001\022\021\n\tmax_bytes\030\003 \001(\003\"2\n\017Valida"
  "torParams\022\025\n\rpub_key_types\030\001 \003(\t:\010\270\240\037\001\350\240"
  "\037\001\"&\n\rVersionParams\022\013\n\003app\030\001 \001(\004:\010\270\240\037\001\350\240"
  "\037\001\">\n\014HashedParams\022\027\n\017block_max_bytes\030\001 "
  "\001(\003\022\025\n\rblock_max_gas\030\002 \001(\003B9Z3github.com"
  "/cometbft/cometbft/proto/tendermint/type"
  "s\250\342\036\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2ftypes_2fparams_2eproto_deps[2] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::_pbi::once_flag descriptor_table_tendermint_2ftypes_2fparams_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2ftypes_2fparams_2eproto = {
    false, false, 733, descriptor_table_protodef_tendermint_2ftypes_2fparams_2eproto,
    "tendermint/types/params.proto",
    &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once, descriptor_table_tendermint_2ftypes_2fparams_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_tendermint_2ftypes_2fparams_2eproto::offsets,
    file_level_metadata_tendermint_2ftypes_2fparams_2eproto, file_level_enum_descriptors_tendermint_2ftypes_2fparams_2eproto,
    file_level_service_descriptors_tendermint_2ftypes_2fparams_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter() {
  return &descriptor_table_tendermint_2ftypes_2fparams_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2ftypes_2fparams_2eproto(&descriptor_table_tendermint_2ftypes_2fparams_2eproto);
namespace tendermint {
namespace types {

// ===================================================================

class ConsensusParams::_Internal {
 public:
  static const ::tendermint::types::BlockParams& block(const ConsensusParams* msg);
  static const ::tendermint::types::EvidenceParams& evidence(const ConsensusParams* msg);
  static const ::tendermint::types::ValidatorParams& validator(const ConsensusParams* msg);
  static const ::tendermint::types::VersionParams& version(const ConsensusParams* msg);
};

const ::tendermint::types::BlockParams&
ConsensusParams::_Internal::block(const ConsensusParams* msg) {
  return *msg->_impl_.block_;
}
const ::tendermint::types::EvidenceParams&
ConsensusParams::_Internal::evidence(const ConsensusParams* msg) {
  return *msg->_impl_.evidence_;
}
const ::tendermint::types::ValidatorParams&
ConsensusParams::_Internal::validator(const ConsensusParams* msg) {
  return *msg->_impl_.validator_;
}
const ::tendermint::types::VersionParams&
ConsensusParams::_Internal::version(const ConsensusParams* msg) {
  return *msg->_impl_.version_;
}
ConsensusParams::ConsensusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.ConsensusParams)
}
ConsensusParams::ConsensusParams(const ConsensusParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConsensusParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_){nullptr}
    , decltype(_impl_.evidence_){nullptr}
    , decltype(_impl_.validator_){nullptr}
    , decltype(_impl_.version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    _this->_impl_.block_ = new ::tendermint::types::BlockParams(*from._impl_.block_);
  }
  if (from._internal_has_evidence()) {
    _this->_impl_.evidence_ = new ::tendermint::types::EvidenceParams(*from._impl_.evidence_);
  }
  if (from._internal_has_validator()) {
    _this->_impl_.validator_ = new ::tendermint::types::ValidatorParams(*from._impl_.validator_);
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::tendermint::types::VersionParams(*from._impl_.version_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.ConsensusParams)
}

inline void ConsensusParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_){nullptr}
    , decltype(_impl_.evidence_){nullptr}
    , decltype(_impl_.validator_){nullptr}
    , decltype(_impl_.version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConsensusParams::~ConsensusParams() {
  // @@protoc_insertion_point(destructor:tendermint.types.ConsensusParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConsensusParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_;
  if (this != internal_default_instance()) delete _impl_.evidence_;
  if (this != internal_default_instance()) delete _impl_.validator_;
  if (this != internal_default_instance()) delete _impl_.version_;
}

void ConsensusParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConsensusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.ConsensusParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.block_ != nullptr) {
    delete _impl_.block_;
  }
  _impl_.block_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.evidence_ != nullptr) {
    delete _impl_.evidence_;
  }
  _impl_.evidence_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.validator_ != nullptr) {
    delete _impl_.validator_;
  }
  _impl_.validator_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.BlockParams block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.EvidenceParams evidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_evidence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.ValidatorParams validator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.VersionParams version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConsensusParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.ConsensusParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.BlockParams block = 1;
  if (this->_internal_has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block(this),
        _Internal::block(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.EvidenceParams evidence = 2;
  if (this->_internal_has_evidence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::evidence(this),
        _Internal::evidence(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.ValidatorParams validator = 3;
  if (this->_internal_has_validator()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::validator(this),
        _Internal::validator(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.VersionParams version = 4;
  if (this->_internal_has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.ConsensusParams)
  return target;
}

size_t ConsensusParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.ConsensusParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.BlockParams block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_);
  }

  // .tendermint.types.EvidenceParams evidence = 2;
  if (this->_internal_has_evidence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.evidence_);
  }

  // .tendermint.types.ValidatorParams validator = 3;
  if (this->_internal_has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.validator_);
  }

  // .tendermint.types.VersionParams version = 4;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsensusParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConsensusParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsensusParams::GetClassData() const { return &_class_data_; }


void ConsensusParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConsensusParams*>(&to_msg);
  auto& from = static_cast<const ConsensusParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.ConsensusParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _this->_internal_mutable_block()->::tendermint::types::BlockParams::MergeFrom(
        from._internal_block());
  }
  if (from._internal_has_evidence()) {
    _this->_internal_mutable_evidence()->::tendermint::types::EvidenceParams::MergeFrom(
        from._internal_evidence());
  }
  if (from._internal_has_validator()) {
    _this->_internal_mutable_validator()->::tendermint::types::ValidatorParams::MergeFrom(
        from._internal_validator());
  }
  if (from._internal_has_version()) {
    _this->_internal_mutable_version()->::tendermint::types::VersionParams::MergeFrom(
        from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsensusParams::CopyFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusParams::IsInitialized() const {
  return true;
}

void ConsensusParams::InternalSwap(ConsensusParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsensusParams, _impl_.version_)
      + sizeof(ConsensusParams::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(ConsensusParams, _impl_.block_)>(
          reinterpret_cast<char*>(&_impl_.block_),
          reinterpret_cast<char*>(&other->_impl_.block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fparams_2eproto[0]);
}

// ===================================================================

class BlockParams::_Internal {
 public:
};

BlockParams::BlockParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.BlockParams)
}
BlockParams::BlockParams(const BlockParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_bytes_){}
    , decltype(_impl_.max_gas_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_bytes_, &from._impl_.max_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_gas_) -
    reinterpret_cast<char*>(&_impl_.max_bytes_)) + sizeof(_impl_.max_gas_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.BlockParams)
}

inline void BlockParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.max_bytes_){int64_t{0}}
    , decltype(_impl_.max_gas_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockParams::~BlockParams() {
  // @@protoc_insertion_point(destructor:tendermint.types.BlockParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.BlockParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_gas_) -
      reinterpret_cast<char*>(&_impl_.max_bytes_)) + sizeof(_impl_.max_gas_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 max_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.max_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_gas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.max_gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.BlockParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_bytes = 1;
  if (this->_internal_max_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_bytes(), target);
  }

  // int64 max_gas = 2;
  if (this->_internal_max_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_gas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.BlockParams)
  return target;
}

size_t BlockParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.BlockParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_bytes = 1;
  if (this->_internal_max_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_bytes());
  }

  // int64 max_gas = 2;
  if (this->_internal_max_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_gas());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockParams::GetClassData() const { return &_class_data_; }


void BlockParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockParams*>(&to_msg);
  auto& from = static_cast<const BlockParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.BlockParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_bytes() != 0) {
    _this->_internal_set_max_bytes(from._internal_max_bytes());
  }
  if (from._internal_max_gas() != 0) {
    _this->_internal_set_max_gas(from._internal_max_gas());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockParams::CopyFrom(const BlockParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.BlockParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockParams::IsInitialized() const {
  return true;
}

void BlockParams::InternalSwap(BlockParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockParams, _impl_.max_gas_)
      + sizeof(BlockParams::_impl_.max_gas_)
      - PROTOBUF_FIELD_OFFSET(BlockParams, _impl_.max_bytes_)>(
          reinterpret_cast<char*>(&_impl_.max_bytes_),
          reinterpret_cast<char*>(&other->_impl_.max_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fparams_2eproto[1]);
}

// ===================================================================

class EvidenceParams::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& max_age_duration(const EvidenceParams* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
EvidenceParams::_Internal::max_age_duration(const EvidenceParams* msg) {
  return *msg->_impl_.max_age_duration_;
}
void EvidenceParams::clear_max_age_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_age_duration_ != nullptr) {
    delete _impl_.max_age_duration_;
  }
  _impl_.max_age_duration_ = nullptr;
}
EvidenceParams::EvidenceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.EvidenceParams)
}
EvidenceParams::EvidenceParams(const EvidenceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EvidenceParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_age_duration_){nullptr}
    , decltype(_impl_.max_age_num_blocks_){}
    , decltype(_impl_.max_bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_max_age_duration()) {
    _this->_impl_.max_age_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.max_age_duration_);
  }
  ::memcpy(&_impl_.max_age_num_blocks_, &from._impl_.max_age_num_blocks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_bytes_) -
    reinterpret_cast<char*>(&_impl_.max_age_num_blocks_)) + sizeof(_impl_.max_bytes_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.EvidenceParams)
}

inline void EvidenceParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.max_age_duration_){nullptr}
    , decltype(_impl_.max_age_num_blocks_){int64_t{0}}
    , decltype(_impl_.max_bytes_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EvidenceParams::~EvidenceParams() {
  // @@protoc_insertion_point(destructor:tendermint.types.EvidenceParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EvidenceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.max_age_duration_;
}

void EvidenceParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EvidenceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.EvidenceParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.max_age_duration_ != nullptr) {
    delete _impl_.max_age_duration_;
  }
  _impl_.max_age_duration_ = nullptr;
  ::memset(&_impl_.max_age_num_blocks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_bytes_) -
      reinterpret_cast<char*>(&_impl_.max_age_num_blocks_)) + sizeof(_impl_.max_bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvidenceParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 max_age_num_blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.max_age_num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration max_age_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_age_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvidenceParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.EvidenceParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_age_num_blocks = 1;
  if (this->_internal_max_age_num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_age_num_blocks(), target);
  }

  // .google.protobuf.Duration max_age_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->_internal_has_max_age_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::max_age_duration(this),
        _Internal::max_age_duration(this).GetCachedSize(), target, stream);
  }

  // int64 max_bytes = 3;
  if (this->_internal_max_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.EvidenceParams)
  return target;
}

size_t EvidenceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.EvidenceParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration max_age_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (this->_internal_has_max_age_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_age_duration_);
  }

  // int64 max_age_num_blocks = 1;
  if (this->_internal_max_age_num_blocks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_age_num_blocks());
  }

  // int64 max_bytes = 3;
  if (this->_internal_max_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvidenceParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EvidenceParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvidenceParams::GetClassData() const { return &_class_data_; }


void EvidenceParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EvidenceParams*>(&to_msg);
  auto& from = static_cast<const EvidenceParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.EvidenceParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_age_duration()) {
    _this->_internal_mutable_max_age_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_max_age_duration());
  }
  if (from._internal_max_age_num_blocks() != 0) {
    _this->_internal_set_max_age_num_blocks(from._internal_max_age_num_blocks());
  }
  if (from._internal_max_bytes() != 0) {
    _this->_internal_set_max_bytes(from._internal_max_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvidenceParams::CopyFrom(const EvidenceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.EvidenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvidenceParams::IsInitialized() const {
  return true;
}

void EvidenceParams::InternalSwap(EvidenceParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvidenceParams, _impl_.max_bytes_)
      + sizeof(EvidenceParams::_impl_.max_bytes_)
      - PROTOBUF_FIELD_OFFSET(EvidenceParams, _impl_.max_age_duration_)>(
          reinterpret_cast<char*>(&_impl_.max_age_duration_),
          reinterpret_cast<char*>(&other->_impl_.max_age_duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvidenceParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fparams_2eproto[2]);
}

// ===================================================================

class ValidatorParams::_Internal {
 public:
};

ValidatorParams::ValidatorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.ValidatorParams)
}
ValidatorParams::ValidatorParams(const ValidatorParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pub_key_types_){from._impl_.pub_key_types_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.types.ValidatorParams)
}

inline void ValidatorParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pub_key_types_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValidatorParams::~ValidatorParams() {
  // @@protoc_insertion_point(destructor:tendermint.types.ValidatorParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pub_key_types_.~RepeatedPtrField();
}

void ValidatorParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.ValidatorParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pub_key_types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string pub_key_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pub_key_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tendermint.types.ValidatorParams.pub_key_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidatorParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.ValidatorParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pub_key_types = 1;
  for (int i = 0, n = this->_internal_pub_key_types_size(); i < n; i++) {
    const auto& s = this->_internal_pub_key_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.types.ValidatorParams.pub_key_types");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.ValidatorParams)
  return target;
}

size_t ValidatorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.ValidatorParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pub_key_types = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.pub_key_types_.size());
  for (int i = 0, n = _impl_.pub_key_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.pub_key_types_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorParams::GetClassData() const { return &_class_data_; }


void ValidatorParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorParams*>(&to_msg);
  auto& from = static_cast<const ValidatorParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.ValidatorParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pub_key_types_.MergeFrom(from._impl_.pub_key_types_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorParams::CopyFrom(const ValidatorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.ValidatorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorParams::IsInitialized() const {
  return true;
}

void ValidatorParams::InternalSwap(ValidatorParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pub_key_types_.InternalSwap(&other->_impl_.pub_key_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fparams_2eproto[3]);
}

// ===================================================================

class VersionParams::_Internal {
 public:
};

VersionParams::VersionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.VersionParams)
}
VersionParams::VersionParams(const VersionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersionParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.app_ = from._impl_.app_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.VersionParams)
}

inline void VersionParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VersionParams::~VersionParams() {
  // @@protoc_insertion_point(destructor:tendermint.types.VersionParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VersionParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.VersionParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.app_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.VersionParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 app = 1;
  if (this->_internal_app() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_app(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.VersionParams)
  return target;
}

size_t VersionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.VersionParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 app = 1;
  if (this->_internal_app() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_app());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersionParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionParams::GetClassData() const { return &_class_data_; }


void VersionParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersionParams*>(&to_msg);
  auto& from = static_cast<const VersionParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.VersionParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_app() != 0) {
    _this->_internal_set_app(from._internal_app());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionParams::CopyFrom(const VersionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.VersionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionParams::IsInitialized() const {
  return true;
}

void VersionParams::InternalSwap(VersionParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.app_, other->_impl_.app_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fparams_2eproto[4]);
}

// ===================================================================

class HashedParams::_Internal {
 public:
};

HashedParams::HashedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.HashedParams)
}
HashedParams::HashedParams(const HashedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HashedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_max_bytes_){}
    , decltype(_impl_.block_max_gas_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.block_max_bytes_, &from._impl_.block_max_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.block_max_gas_) -
    reinterpret_cast<char*>(&_impl_.block_max_bytes_)) + sizeof(_impl_.block_max_gas_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.HashedParams)
}

inline void HashedParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_max_bytes_){int64_t{0}}
    , decltype(_impl_.block_max_gas_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HashedParams::~HashedParams() {
  // @@protoc_insertion_point(destructor:tendermint.types.HashedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HashedParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HashedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HashedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.HashedParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.block_max_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.block_max_gas_) -
      reinterpret_cast<char*>(&_impl_.block_max_bytes_)) + sizeof(_impl_.block_max_gas_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 block_max_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.block_max_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 block_max_gas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.block_max_gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HashedParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.HashedParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 block_max_bytes = 1;
  if (this->_internal_block_max_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_block_max_bytes(), target);
  }

  // int64 block_max_gas = 2;
  if (this->_internal_block_max_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_block_max_gas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.HashedParams)
  return target;
}

size_t HashedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.HashedParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 block_max_bytes = 1;
  if (this->_internal_block_max_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_block_max_bytes());
  }

  // int64 block_max_gas = 2;
  if (this->_internal_block_max_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_block_max_gas());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HashedParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HashedParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HashedParams::GetClassData() const { return &_class_data_; }


void HashedParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HashedParams*>(&to_msg);
  auto& from = static_cast<const HashedParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.HashedParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_max_bytes() != 0) {
    _this->_internal_set_block_max_bytes(from._internal_block_max_bytes());
  }
  if (from._internal_block_max_gas() != 0) {
    _this->_internal_set_block_max_gas(from._internal_block_max_gas());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HashedParams::CopyFrom(const HashedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.HashedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashedParams::IsInitialized() const {
  return true;
}

void HashedParams::InternalSwap(HashedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HashedParams, _impl_.block_max_gas_)
      + sizeof(HashedParams::_impl_.block_max_gas_)
      - PROTOBUF_FIELD_OFFSET(HashedParams, _impl_.block_max_bytes_)>(
          reinterpret_cast<char*>(&_impl_.block_max_bytes_),
          reinterpret_cast<char*>(&other->_impl_.block_max_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HashedParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fparams_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fparams_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fparams_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::types::ConsensusParams*
Arena::CreateMaybeMessage< ::tendermint::types::ConsensusParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::ConsensusParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::BlockParams*
Arena::CreateMaybeMessage< ::tendermint::types::BlockParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::BlockParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::EvidenceParams*
Arena::CreateMaybeMessage< ::tendermint::types::EvidenceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::EvidenceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::ValidatorParams*
Arena::CreateMaybeMessage< ::tendermint::types::ValidatorParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::ValidatorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::VersionParams*
Arena::CreateMaybeMessage< ::tendermint::types::VersionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::VersionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::HashedParams*
Arena::CreateMaybeMessage< ::tendermint::types::HashedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::HashedParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
