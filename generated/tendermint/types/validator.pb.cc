// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/validator.proto

#include "tendermint/types/validator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tendermint {
namespace types {
PROTOBUF_CONSTEXPR ValidatorSet::ValidatorSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.validators_)*/{}
  , /*decltype(_impl_.proposer_)*/nullptr
  , /*decltype(_impl_.total_voting_power_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorSetDefaultTypeInternal() {}
  union {
    ValidatorSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorSetDefaultTypeInternal _ValidatorSet_default_instance_;
PROTOBUF_CONSTEXPR Validator::Validator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pub_key_)*/nullptr
  , /*decltype(_impl_.voting_power_)*/int64_t{0}
  , /*decltype(_impl_.proposer_priority_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorDefaultTypeInternal() {}
  union {
    Validator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorDefaultTypeInternal _Validator_default_instance_;
PROTOBUF_CONSTEXPR SimpleValidator::SimpleValidator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pub_key_)*/nullptr
  , /*decltype(_impl_.voting_power_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimpleValidatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleValidatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleValidatorDefaultTypeInternal() {}
  union {
    SimpleValidator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleValidatorDefaultTypeInternal _SimpleValidator_default_instance_;
}  // namespace types
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2ftypes_2fvalidator_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tendermint_2ftypes_2fvalidator_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tendermint_2ftypes_2fvalidator_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2ftypes_2fvalidator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorSet, _impl_.validators_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorSet, _impl_.proposer_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::ValidatorSet, _impl_.total_voting_power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, _impl_.pub_key_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, _impl_.voting_power_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::Validator, _impl_.proposer_priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::SimpleValidator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::types::SimpleValidator, _impl_.pub_key_),
  PROTOBUF_FIELD_OFFSET(::tendermint::types::SimpleValidator, _impl_.voting_power_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::types::ValidatorSet)},
  { 9, -1, -1, sizeof(::tendermint::types::Validator)},
  { 19, -1, -1, sizeof(::tendermint::types::SimpleValidator)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tendermint::types::_ValidatorSet_default_instance_._instance,
  &::tendermint::types::_Validator_default_instance_._instance,
  &::tendermint::types::_SimpleValidator_default_instance_._instance,
};

const char descriptor_table_protodef_tendermint_2ftypes_2fvalidator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n tendermint/types/validator.proto\022\020tend"
  "ermint.types\032\024gogoproto/gogo.proto\032\034tend"
  "ermint/crypto/keys.proto\"\212\001\n\014ValidatorSe"
  "t\022/\n\nvalidators\030\001 \003(\0132\033.tendermint.types"
  ".Validator\022-\n\010proposer\030\002 \001(\0132\033.tendermin"
  "t.types.Validator\022\032\n\022total_voting_power\030"
  "\003 \001(\003\"\202\001\n\tValidator\022\017\n\007address\030\001 \001(\014\0223\n\007"
  "pub_key\030\002 \001(\0132\034.tendermint.crypto.Public"
  "KeyB\004\310\336\037\000\022\024\n\014voting_power\030\003 \001(\003\022\031\n\021propo"
  "ser_priority\030\004 \001(\003\"V\n\017SimpleValidator\022-\n"
  "\007pub_key\030\001 \001(\0132\034.tendermint.crypto.Publi"
  "cKey\022\024\n\014voting_power\030\002 \001(\003B5Z3github.com"
  "/cometbft/cometbft/proto/tendermint/type"
  "sb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_deps[2] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_tendermint_2fcrypto_2fkeys_2eproto,
};
static ::_pbi::once_flag descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2ftypes_2fvalidator_2eproto = {
    false, false, 529, descriptor_table_protodef_tendermint_2ftypes_2fvalidator_2eproto,
    "tendermint/types/validator.proto",
    &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_once, descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_tendermint_2ftypes_2fvalidator_2eproto::offsets,
    file_level_metadata_tendermint_2ftypes_2fvalidator_2eproto, file_level_enum_descriptors_tendermint_2ftypes_2fvalidator_2eproto,
    file_level_service_descriptors_tendermint_2ftypes_2fvalidator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_getter() {
  return &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2ftypes_2fvalidator_2eproto(&descriptor_table_tendermint_2ftypes_2fvalidator_2eproto);
namespace tendermint {
namespace types {

// ===================================================================

class ValidatorSet::_Internal {
 public:
  static const ::tendermint::types::Validator& proposer(const ValidatorSet* msg);
};

const ::tendermint::types::Validator&
ValidatorSet::_Internal::proposer(const ValidatorSet* msg) {
  return *msg->_impl_.proposer_;
}
ValidatorSet::ValidatorSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.ValidatorSet)
}
ValidatorSet::ValidatorSet(const ValidatorSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.validators_){from._impl_.validators_}
    , decltype(_impl_.proposer_){nullptr}
    , decltype(_impl_.total_voting_power_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_proposer()) {
    _this->_impl_.proposer_ = new ::tendermint::types::Validator(*from._impl_.proposer_);
  }
  _this->_impl_.total_voting_power_ = from._impl_.total_voting_power_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.ValidatorSet)
}

inline void ValidatorSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.validators_){arena}
    , decltype(_impl_.proposer_){nullptr}
    , decltype(_impl_.total_voting_power_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValidatorSet::~ValidatorSet() {
  // @@protoc_insertion_point(destructor:tendermint.types.ValidatorSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validators_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.proposer_;
}

void ValidatorSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorSet::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.ValidatorSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validators_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.proposer_ != nullptr) {
    delete _impl_.proposer_;
  }
  _impl_.proposer_ = nullptr;
  _impl_.total_voting_power_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tendermint.types.Validator validators = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.Validator proposer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_voting_power = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_voting_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidatorSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.ValidatorSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tendermint.types.Validator validators = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_validators_size()); i < n; i++) {
    const auto& repfield = this->_internal_validators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tendermint.types.Validator proposer = 2;
  if (this->_internal_has_proposer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::proposer(this),
        _Internal::proposer(this).GetCachedSize(), target, stream);
  }

  // int64 total_voting_power = 3;
  if (this->_internal_total_voting_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_voting_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.ValidatorSet)
  return target;
}

size_t ValidatorSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.ValidatorSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.types.Validator validators = 1;
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->_impl_.validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tendermint.types.Validator proposer = 2;
  if (this->_internal_has_proposer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proposer_);
  }

  // int64 total_voting_power = 3;
  if (this->_internal_total_voting_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_voting_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorSet::GetClassData() const { return &_class_data_; }


void ValidatorSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorSet*>(&to_msg);
  auto& from = static_cast<const ValidatorSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.ValidatorSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.validators_.MergeFrom(from._impl_.validators_);
  if (from._internal_has_proposer()) {
    _this->_internal_mutable_proposer()->::tendermint::types::Validator::MergeFrom(
        from._internal_proposer());
  }
  if (from._internal_total_voting_power() != 0) {
    _this->_internal_set_total_voting_power(from._internal_total_voting_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorSet::CopyFrom(const ValidatorSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.ValidatorSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorSet::IsInitialized() const {
  return true;
}

void ValidatorSet::InternalSwap(ValidatorSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.validators_.InternalSwap(&other->_impl_.validators_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_.total_voting_power_)
      + sizeof(ValidatorSet::_impl_.total_voting_power_)
      - PROTOBUF_FIELD_OFFSET(ValidatorSet, _impl_.proposer_)>(
          reinterpret_cast<char*>(&_impl_.proposer_),
          reinterpret_cast<char*>(&other->_impl_.proposer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fvalidator_2eproto[0]);
}

// ===================================================================

class Validator::_Internal {
 public:
  static const ::tendermint::crypto::PublicKey& pub_key(const Validator* msg);
};

const ::tendermint::crypto::PublicKey&
Validator::_Internal::pub_key(const Validator* msg) {
  return *msg->_impl_.pub_key_;
}
void Validator::clear_pub_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.pub_key_ != nullptr) {
    delete _impl_.pub_key_;
  }
  _impl_.pub_key_ = nullptr;
}
Validator::Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Validator)
}
Validator::Validator(const Validator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Validator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.voting_power_){}
    , decltype(_impl_.proposer_priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pub_key()) {
    _this->_impl_.pub_key_ = new ::tendermint::crypto::PublicKey(*from._impl_.pub_key_);
  }
  ::memcpy(&_impl_.voting_power_, &from._impl_.voting_power_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.proposer_priority_) -
    reinterpret_cast<char*>(&_impl_.voting_power_)) + sizeof(_impl_.proposer_priority_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Validator)
}

inline void Validator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.voting_power_){int64_t{0}}
    , decltype(_impl_.proposer_priority_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Validator::~Validator() {
  // @@protoc_insertion_point(destructor:tendermint.types.Validator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Validator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pub_key_;
}

void Validator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Validator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pub_key_ != nullptr) {
    delete _impl_.pub_key_;
  }
  _impl_.pub_key_ = nullptr;
  ::memset(&_impl_.voting_power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.proposer_priority_) -
      reinterpret_cast<char*>(&_impl_.voting_power_)) + sizeof(_impl_.proposer_priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Validator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.crypto.PublicKey pub_key = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 voting_power = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.voting_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 proposer_priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.proposer_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Validator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Validator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // .tendermint.crypto.PublicKey pub_key = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_pub_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pub_key(this),
        _Internal::pub_key(this).GetCachedSize(), target, stream);
  }

  // int64 voting_power = 3;
  if (this->_internal_voting_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_voting_power(), target);
  }

  // int64 proposer_priority = 4;
  if (this->_internal_proposer_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_proposer_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Validator)
  return target;
}

size_t Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Validator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // .tendermint.crypto.PublicKey pub_key = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_pub_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pub_key_);
  }

  // int64 voting_power = 3;
  if (this->_internal_voting_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_voting_power());
  }

  // int64 proposer_priority = 4;
  if (this->_internal_proposer_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_proposer_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Validator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Validator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Validator::GetClassData() const { return &_class_data_; }


void Validator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Validator*>(&to_msg);
  auto& from = static_cast<const Validator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Validator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_has_pub_key()) {
    _this->_internal_mutable_pub_key()->::tendermint::crypto::PublicKey::MergeFrom(
        from._internal_pub_key());
  }
  if (from._internal_voting_power() != 0) {
    _this->_internal_set_voting_power(from._internal_voting_power());
  }
  if (from._internal_proposer_priority() != 0) {
    _this->_internal_set_proposer_priority(from._internal_proposer_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validator::IsInitialized() const {
  return true;
}

void Validator::InternalSwap(Validator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Validator, _impl_.proposer_priority_)
      + sizeof(Validator::_impl_.proposer_priority_)
      - PROTOBUF_FIELD_OFFSET(Validator, _impl_.pub_key_)>(
          reinterpret_cast<char*>(&_impl_.pub_key_),
          reinterpret_cast<char*>(&other->_impl_.pub_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Validator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fvalidator_2eproto[1]);
}

// ===================================================================

class SimpleValidator::_Internal {
 public:
  static const ::tendermint::crypto::PublicKey& pub_key(const SimpleValidator* msg);
};

const ::tendermint::crypto::PublicKey&
SimpleValidator::_Internal::pub_key(const SimpleValidator* msg) {
  return *msg->_impl_.pub_key_;
}
void SimpleValidator::clear_pub_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.pub_key_ != nullptr) {
    delete _impl_.pub_key_;
  }
  _impl_.pub_key_ = nullptr;
}
SimpleValidator::SimpleValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.SimpleValidator)
}
SimpleValidator::SimpleValidator(const SimpleValidator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleValidator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.voting_power_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pub_key()) {
    _this->_impl_.pub_key_ = new ::tendermint::crypto::PublicKey(*from._impl_.pub_key_);
  }
  _this->_impl_.voting_power_ = from._impl_.voting_power_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.SimpleValidator)
}

inline void SimpleValidator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.voting_power_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SimpleValidator::~SimpleValidator() {
  // @@protoc_insertion_point(destructor:tendermint.types.SimpleValidator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleValidator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pub_key_;
}

void SimpleValidator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleValidator::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.SimpleValidator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pub_key_ != nullptr) {
    delete _impl_.pub_key_;
  }
  _impl_.pub_key_ = nullptr;
  _impl_.voting_power_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleValidator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.crypto.PublicKey pub_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 voting_power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.voting_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleValidator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.SimpleValidator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.crypto.PublicKey pub_key = 1;
  if (this->_internal_has_pub_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pub_key(this),
        _Internal::pub_key(this).GetCachedSize(), target, stream);
  }

  // int64 voting_power = 2;
  if (this->_internal_voting_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_voting_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.SimpleValidator)
  return target;
}

size_t SimpleValidator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.SimpleValidator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.crypto.PublicKey pub_key = 1;
  if (this->_internal_has_pub_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pub_key_);
  }

  // int64 voting_power = 2;
  if (this->_internal_voting_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_voting_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleValidator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleValidator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleValidator::GetClassData() const { return &_class_data_; }


void SimpleValidator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleValidator*>(&to_msg);
  auto& from = static_cast<const SimpleValidator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.SimpleValidator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pub_key()) {
    _this->_internal_mutable_pub_key()->::tendermint::crypto::PublicKey::MergeFrom(
        from._internal_pub_key());
  }
  if (from._internal_voting_power() != 0) {
    _this->_internal_set_voting_power(from._internal_voting_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleValidator::CopyFrom(const SimpleValidator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.SimpleValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleValidator::IsInitialized() const {
  return true;
}

void SimpleValidator::InternalSwap(SimpleValidator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleValidator, _impl_.voting_power_)
      + sizeof(SimpleValidator::_impl_.voting_power_)
      - PROTOBUF_FIELD_OFFSET(SimpleValidator, _impl_.pub_key_)>(
          reinterpret_cast<char*>(&_impl_.pub_key_),
          reinterpret_cast<char*>(&other->_impl_.pub_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleValidator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fvalidator_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fvalidator_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::types::ValidatorSet*
Arena::CreateMaybeMessage< ::tendermint::types::ValidatorSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::ValidatorSet >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Validator*
Arena::CreateMaybeMessage< ::tendermint::types::Validator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Validator >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::SimpleValidator*
Arena::CreateMaybeMessage< ::tendermint::types::SimpleValidator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::SimpleValidator >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
