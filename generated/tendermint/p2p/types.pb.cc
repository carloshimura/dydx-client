// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/p2p/types.proto

#include "tendermint/p2p/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tendermint {
namespace p2p {
PROTOBUF_CONSTEXPR NetAddress::NetAddress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetAddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetAddressDefaultTypeInternal() {}
  union {
    NetAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetAddressDefaultTypeInternal _NetAddress_default_instance_;
PROTOBUF_CONSTEXPR ProtocolVersion::ProtocolVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.p2p_)*/uint64_t{0u}
  , /*decltype(_impl_.block_)*/uint64_t{0u}
  , /*decltype(_impl_.app_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtocolVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtocolVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtocolVersionDefaultTypeInternal() {}
  union {
    ProtocolVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtocolVersionDefaultTypeInternal _ProtocolVersion_default_instance_;
PROTOBUF_CONSTEXPR DefaultNodeInfo::DefaultNodeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.default_node_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.listen_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.network_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channels_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.moniker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.protocol_version_)*/nullptr
  , /*decltype(_impl_.other_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DefaultNodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefaultNodeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefaultNodeInfoDefaultTypeInternal() {}
  union {
    DefaultNodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefaultNodeInfoDefaultTypeInternal _DefaultNodeInfo_default_instance_;
PROTOBUF_CONSTEXPR DefaultNodeInfoOther::DefaultNodeInfoOther(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_index_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rpc_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DefaultNodeInfoOtherDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefaultNodeInfoOtherDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefaultNodeInfoOtherDefaultTypeInternal() {}
  union {
    DefaultNodeInfoOther _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefaultNodeInfoOtherDefaultTypeInternal _DefaultNodeInfoOther_default_instance_;
}  // namespace p2p
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2fp2p_2ftypes_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tendermint_2fp2p_2ftypes_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tendermint_2fp2p_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2fp2p_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::NetAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::NetAddress, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::NetAddress, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::NetAddress, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::ProtocolVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::ProtocolVersion, _impl_.p2p_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::ProtocolVersion, _impl_.block_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::ProtocolVersion, _impl_.app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.protocol_version_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.default_node_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.listen_addr_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.network_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.moniker_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfo, _impl_.other_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfoOther, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfoOther, _impl_.tx_index_),
  PROTOBUF_FIELD_OFFSET(::tendermint::p2p::DefaultNodeInfoOther, _impl_.rpc_address_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::p2p::NetAddress)},
  { 9, -1, -1, sizeof(::tendermint::p2p::ProtocolVersion)},
  { 18, -1, -1, sizeof(::tendermint::p2p::DefaultNodeInfo)},
  { 32, -1, -1, sizeof(::tendermint::p2p::DefaultNodeInfoOther)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tendermint::p2p::_NetAddress_default_instance_._instance,
  &::tendermint::p2p::_ProtocolVersion_default_instance_._instance,
  &::tendermint::p2p::_DefaultNodeInfo_default_instance_._instance,
  &::tendermint::p2p::_DefaultNodeInfoOther_default_instance_._instance,
};

const char descriptor_table_protodef_tendermint_2fp2p_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032tendermint/p2p/types.proto\022\016tendermint"
  ".p2p\032\024gogoproto/gogo.proto\"B\n\nNetAddress"
  "\022\022\n\002id\030\001 \001(\tB\006\342\336\037\002ID\022\022\n\002ip\030\002 \001(\tB\006\342\336\037\002IP"
  "\022\014\n\004port\030\003 \001(\r\"C\n\017ProtocolVersion\022\024\n\003p2p"
  "\030\001 \001(\004B\007\342\336\037\003P2P\022\r\n\005block\030\002 \001(\004\022\013\n\003app\030\003 "
  "\001(\004\"\223\002\n\017DefaultNodeInfo\022\?\n\020protocol_vers"
  "ion\030\001 \001(\0132\037.tendermint.p2p.ProtocolVersi"
  "onB\004\310\336\037\000\022*\n\017default_node_id\030\002 \001(\tB\021\342\336\037\rD"
  "efaultNodeID\022\023\n\013listen_addr\030\003 \001(\t\022\017\n\007net"
  "work\030\004 \001(\t\022\017\n\007version\030\005 \001(\t\022\020\n\010channels\030"
  "\006 \001(\014\022\017\n\007moniker\030\007 \001(\t\0229\n\005other\030\010 \001(\0132$."
  "tendermint.p2p.DefaultNodeInfoOtherB\004\310\336\037"
  "\000\"M\n\024DefaultNodeInfoOther\022\020\n\010tx_index\030\001 "
  "\001(\t\022#\n\013rpc_address\030\002 \001(\tB\016\342\336\037\nRPCAddress"
  "B3Z1github.com/cometbft/cometbft/proto/t"
  "endermint/p2pb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2fp2p_2ftypes_2eproto_deps[1] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::_pbi::once_flag descriptor_table_tendermint_2fp2p_2ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2fp2p_2ftypes_2eproto = {
    false, false, 621, descriptor_table_protodef_tendermint_2fp2p_2ftypes_2eproto,
    "tendermint/p2p/types.proto",
    &descriptor_table_tendermint_2fp2p_2ftypes_2eproto_once, descriptor_table_tendermint_2fp2p_2ftypes_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_tendermint_2fp2p_2ftypes_2eproto::offsets,
    file_level_metadata_tendermint_2fp2p_2ftypes_2eproto, file_level_enum_descriptors_tendermint_2fp2p_2ftypes_2eproto,
    file_level_service_descriptors_tendermint_2fp2p_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2fp2p_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2fp2p_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fp2p_2ftypes_2eproto(&descriptor_table_tendermint_2fp2p_2ftypes_2eproto);
namespace tendermint {
namespace p2p {

// ===================================================================

class NetAddress::_Internal {
 public:
};

NetAddress::NetAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.NetAddress)
}
NetAddress::NetAddress(const NetAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetAddress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.NetAddress)
}

inline void NetAddress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetAddress::~NetAddress() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.NetAddress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.ip_.Destroy();
}

void NetAddress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.NetAddress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetAddress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.gogoproto.customname) = "ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.p2p.NetAddress.id"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 2 [(.gogoproto.customname) = "IP"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.p2p.NetAddress.ip"));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetAddress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.NetAddress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.p2p.NetAddress.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string ip = 2 [(.gogoproto.customname) = "IP"];
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.p2p.NetAddress.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.NetAddress)
  return target;
}

size_t NetAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.NetAddress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string ip = 2 [(.gogoproto.customname) = "IP"];
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetAddress::GetClassData() const { return &_class_data_; }


void NetAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetAddress*>(&to_msg);
  auto& from = static_cast<const NetAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.NetAddress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetAddress::CopyFrom(const NetAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.NetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetAddress::IsInitialized() const {
  return true;
}

void NetAddress::InternalSwap(NetAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetAddress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fp2p_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2ftypes_2eproto[0]);
}

// ===================================================================

class ProtocolVersion::_Internal {
 public:
};

ProtocolVersion::ProtocolVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.ProtocolVersion)
}
ProtocolVersion::ProtocolVersion(const ProtocolVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtocolVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.p2p_){}
    , decltype(_impl_.block_){}
    , decltype(_impl_.app_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.p2p_, &from._impl_.p2p_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.app_) -
    reinterpret_cast<char*>(&_impl_.p2p_)) + sizeof(_impl_.app_));
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.ProtocolVersion)
}

inline void ProtocolVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.p2p_){uint64_t{0u}}
    , decltype(_impl_.block_){uint64_t{0u}}
    , decltype(_impl_.app_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtocolVersion::~ProtocolVersion() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.ProtocolVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtocolVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtocolVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtocolVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.ProtocolVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.p2p_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.app_) -
      reinterpret_cast<char*>(&_impl_.p2p_)) + sizeof(_impl_.app_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 p2p = 1 [(.gogoproto.customname) = "P2P"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.p2p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 app = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.app_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtocolVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.ProtocolVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 p2p = 1 [(.gogoproto.customname) = "P2P"];
  if (this->_internal_p2p() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_p2p(), target);
  }

  // uint64 block = 2;
  if (this->_internal_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block(), target);
  }

  // uint64 app = 3;
  if (this->_internal_app() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_app(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.ProtocolVersion)
  return target;
}

size_t ProtocolVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.ProtocolVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 p2p = 1 [(.gogoproto.customname) = "P2P"];
  if (this->_internal_p2p() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_p2p());
  }

  // uint64 block = 2;
  if (this->_internal_block() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block());
  }

  // uint64 app = 3;
  if (this->_internal_app() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_app());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtocolVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolVersion::GetClassData() const { return &_class_data_; }


void ProtocolVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtocolVersion*>(&to_msg);
  auto& from = static_cast<const ProtocolVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.ProtocolVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_p2p() != 0) {
    _this->_internal_set_p2p(from._internal_p2p());
  }
  if (from._internal_block() != 0) {
    _this->_internal_set_block(from._internal_block());
  }
  if (from._internal_app() != 0) {
    _this->_internal_set_app(from._internal_app());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolVersion::CopyFrom(const ProtocolVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.ProtocolVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolVersion::IsInitialized() const {
  return true;
}

void ProtocolVersion::InternalSwap(ProtocolVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtocolVersion, _impl_.app_)
      + sizeof(ProtocolVersion::_impl_.app_)
      - PROTOBUF_FIELD_OFFSET(ProtocolVersion, _impl_.p2p_)>(
          reinterpret_cast<char*>(&_impl_.p2p_),
          reinterpret_cast<char*>(&other->_impl_.p2p_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fp2p_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2ftypes_2eproto[1]);
}

// ===================================================================

class DefaultNodeInfo::_Internal {
 public:
  static const ::tendermint::p2p::ProtocolVersion& protocol_version(const DefaultNodeInfo* msg);
  static const ::tendermint::p2p::DefaultNodeInfoOther& other(const DefaultNodeInfo* msg);
};

const ::tendermint::p2p::ProtocolVersion&
DefaultNodeInfo::_Internal::protocol_version(const DefaultNodeInfo* msg) {
  return *msg->_impl_.protocol_version_;
}
const ::tendermint::p2p::DefaultNodeInfoOther&
DefaultNodeInfo::_Internal::other(const DefaultNodeInfo* msg) {
  return *msg->_impl_.other_;
}
DefaultNodeInfo::DefaultNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.DefaultNodeInfo)
}
DefaultNodeInfo::DefaultNodeInfo(const DefaultNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DefaultNodeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.default_node_id_){}
    , decltype(_impl_.listen_addr_){}
    , decltype(_impl_.network_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.channels_){}
    , decltype(_impl_.moniker_){}
    , decltype(_impl_.protocol_version_){nullptr}
    , decltype(_impl_.other_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.default_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_default_node_id().empty()) {
    _this->_impl_.default_node_id_.Set(from._internal_default_node_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.listen_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listen_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_listen_addr().empty()) {
    _this->_impl_.listen_addr_.Set(from._internal_listen_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_network().empty()) {
    _this->_impl_.network_.Set(from._internal_network(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channels_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channels_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channels().empty()) {
    _this->_impl_.channels_.Set(from._internal_channels(), 
      _this->GetArenaForAllocation());
  }
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_moniker().empty()) {
    _this->_impl_.moniker_.Set(from._internal_moniker(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_protocol_version()) {
    _this->_impl_.protocol_version_ = new ::tendermint::p2p::ProtocolVersion(*from._impl_.protocol_version_);
  }
  if (from._internal_has_other()) {
    _this->_impl_.other_ = new ::tendermint::p2p::DefaultNodeInfoOther(*from._impl_.other_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.DefaultNodeInfo)
}

inline void DefaultNodeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.default_node_id_){}
    , decltype(_impl_.listen_addr_){}
    , decltype(_impl_.network_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.channels_){}
    , decltype(_impl_.moniker_){}
    , decltype(_impl_.protocol_version_){nullptr}
    , decltype(_impl_.other_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.default_node_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_node_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.listen_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.listen_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channels_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channels_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DefaultNodeInfo::~DefaultNodeInfo() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.DefaultNodeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DefaultNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.default_node_id_.Destroy();
  _impl_.listen_addr_.Destroy();
  _impl_.network_.Destroy();
  _impl_.version_.Destroy();
  _impl_.channels_.Destroy();
  _impl_.moniker_.Destroy();
  if (this != internal_default_instance()) delete _impl_.protocol_version_;
  if (this != internal_default_instance()) delete _impl_.other_;
}

void DefaultNodeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DefaultNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.DefaultNodeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.default_node_id_.ClearToEmpty();
  _impl_.listen_addr_.ClearToEmpty();
  _impl_.network_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.channels_.ClearToEmpty();
  _impl_.moniker_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.protocol_version_ != nullptr) {
    delete _impl_.protocol_version_;
  }
  _impl_.protocol_version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.other_ != nullptr) {
    delete _impl_.other_;
  }
  _impl_.other_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultNodeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.p2p.ProtocolVersion protocol_version = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocol_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string default_node_id = 2 [(.gogoproto.customname) = "DefaultNodeID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_default_node_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.p2p.DefaultNodeInfo.default_node_id"));
        } else
          goto handle_unusual;
        continue;
      // string listen_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_listen_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.p2p.DefaultNodeInfo.listen_addr"));
        } else
          goto handle_unusual;
        continue;
      // string network = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_network();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.p2p.DefaultNodeInfo.network"));
        } else
          goto handle_unusual;
        continue;
      // string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.p2p.DefaultNodeInfo.version"));
        } else
          goto handle_unusual;
        continue;
      // bytes channels = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_channels();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string moniker = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_moniker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.p2p.DefaultNodeInfo.moniker"));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.p2p.DefaultNodeInfoOther other = 8 [(.gogoproto.nullable) = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_other(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DefaultNodeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.DefaultNodeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.p2p.ProtocolVersion protocol_version = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_protocol_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::protocol_version(this),
        _Internal::protocol_version(this).GetCachedSize(), target, stream);
  }

  // string default_node_id = 2 [(.gogoproto.customname) = "DefaultNodeID"];
  if (!this->_internal_default_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_node_id().data(), static_cast<int>(this->_internal_default_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.p2p.DefaultNodeInfo.default_node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_default_node_id(), target);
  }

  // string listen_addr = 3;
  if (!this->_internal_listen_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_listen_addr().data(), static_cast<int>(this->_internal_listen_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.p2p.DefaultNodeInfo.listen_addr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_listen_addr(), target);
  }

  // string network = 4;
  if (!this->_internal_network().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.p2p.DefaultNodeInfo.network");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_network(), target);
  }

  // string version = 5;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.p2p.DefaultNodeInfo.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  // bytes channels = 6;
  if (!this->_internal_channels().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_channels(), target);
  }

  // string moniker = 7;
  if (!this->_internal_moniker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_moniker().data(), static_cast<int>(this->_internal_moniker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.p2p.DefaultNodeInfo.moniker");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_moniker(), target);
  }

  // .tendermint.p2p.DefaultNodeInfoOther other = 8 [(.gogoproto.nullable) = false];
  if (this->_internal_has_other()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::other(this),
        _Internal::other(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.DefaultNodeInfo)
  return target;
}

size_t DefaultNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.DefaultNodeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string default_node_id = 2 [(.gogoproto.customname) = "DefaultNodeID"];
  if (!this->_internal_default_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_node_id());
  }

  // string listen_addr = 3;
  if (!this->_internal_listen_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_listen_addr());
  }

  // string network = 4;
  if (!this->_internal_network().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  // string version = 5;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // bytes channels = 6;
  if (!this->_internal_channels().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_channels());
  }

  // string moniker = 7;
  if (!this->_internal_moniker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_moniker());
  }

  // .tendermint.p2p.ProtocolVersion protocol_version = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_protocol_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.protocol_version_);
  }

  // .tendermint.p2p.DefaultNodeInfoOther other = 8 [(.gogoproto.nullable) = false];
  if (this->_internal_has_other()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.other_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefaultNodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DefaultNodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefaultNodeInfo::GetClassData() const { return &_class_data_; }


void DefaultNodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DefaultNodeInfo*>(&to_msg);
  auto& from = static_cast<const DefaultNodeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.DefaultNodeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_default_node_id().empty()) {
    _this->_internal_set_default_node_id(from._internal_default_node_id());
  }
  if (!from._internal_listen_addr().empty()) {
    _this->_internal_set_listen_addr(from._internal_listen_addr());
  }
  if (!from._internal_network().empty()) {
    _this->_internal_set_network(from._internal_network());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_channels().empty()) {
    _this->_internal_set_channels(from._internal_channels());
  }
  if (!from._internal_moniker().empty()) {
    _this->_internal_set_moniker(from._internal_moniker());
  }
  if (from._internal_has_protocol_version()) {
    _this->_internal_mutable_protocol_version()->::tendermint::p2p::ProtocolVersion::MergeFrom(
        from._internal_protocol_version());
  }
  if (from._internal_has_other()) {
    _this->_internal_mutable_other()->::tendermint::p2p::DefaultNodeInfoOther::MergeFrom(
        from._internal_other());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DefaultNodeInfo::CopyFrom(const DefaultNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.DefaultNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultNodeInfo::IsInitialized() const {
  return true;
}

void DefaultNodeInfo::InternalSwap(DefaultNodeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.default_node_id_, lhs_arena,
      &other->_impl_.default_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.listen_addr_, lhs_arena,
      &other->_impl_.listen_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.network_, lhs_arena,
      &other->_impl_.network_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channels_, lhs_arena,
      &other->_impl_.channels_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.moniker_, lhs_arena,
      &other->_impl_.moniker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.other_)
      + sizeof(DefaultNodeInfo::_impl_.other_)
      - PROTOBUF_FIELD_OFFSET(DefaultNodeInfo, _impl_.protocol_version_)>(
          reinterpret_cast<char*>(&_impl_.protocol_version_),
          reinterpret_cast<char*>(&other->_impl_.protocol_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultNodeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fp2p_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2ftypes_2eproto[2]);
}

// ===================================================================

class DefaultNodeInfoOther::_Internal {
 public:
};

DefaultNodeInfoOther::DefaultNodeInfoOther(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.DefaultNodeInfoOther)
}
DefaultNodeInfoOther::DefaultNodeInfoOther(const DefaultNodeInfoOther& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DefaultNodeInfoOther* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_index_){}
    , decltype(_impl_.rpc_address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_index().empty()) {
    _this->_impl_.tx_index_.Set(from._internal_tx_index(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rpc_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rpc_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rpc_address().empty()) {
    _this->_impl_.rpc_address_.Set(from._internal_rpc_address(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.DefaultNodeInfoOther)
}

inline void DefaultNodeInfoOther::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_index_){}
    , decltype(_impl_.rpc_address_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rpc_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rpc_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DefaultNodeInfoOther::~DefaultNodeInfoOther() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.DefaultNodeInfoOther)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DefaultNodeInfoOther::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_index_.Destroy();
  _impl_.rpc_address_.Destroy();
}

void DefaultNodeInfoOther::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DefaultNodeInfoOther::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.DefaultNodeInfoOther)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_index_.ClearToEmpty();
  _impl_.rpc_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultNodeInfoOther::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tx_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.p2p.DefaultNodeInfoOther.tx_index"));
        } else
          goto handle_unusual;
        continue;
      // string rpc_address = 2 [(.gogoproto.customname) = "RPCAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rpc_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.p2p.DefaultNodeInfoOther.rpc_address"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DefaultNodeInfoOther::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.DefaultNodeInfoOther)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tx_index = 1;
  if (!this->_internal_tx_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_index().data(), static_cast<int>(this->_internal_tx_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.p2p.DefaultNodeInfoOther.tx_index");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tx_index(), target);
  }

  // string rpc_address = 2 [(.gogoproto.customname) = "RPCAddress"];
  if (!this->_internal_rpc_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rpc_address().data(), static_cast<int>(this->_internal_rpc_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.p2p.DefaultNodeInfoOther.rpc_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rpc_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.DefaultNodeInfoOther)
  return target;
}

size_t DefaultNodeInfoOther::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.DefaultNodeInfoOther)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx_index = 1;
  if (!this->_internal_tx_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_index());
  }

  // string rpc_address = 2 [(.gogoproto.customname) = "RPCAddress"];
  if (!this->_internal_rpc_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rpc_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefaultNodeInfoOther::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DefaultNodeInfoOther::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefaultNodeInfoOther::GetClassData() const { return &_class_data_; }


void DefaultNodeInfoOther::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DefaultNodeInfoOther*>(&to_msg);
  auto& from = static_cast<const DefaultNodeInfoOther&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.DefaultNodeInfoOther)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_index().empty()) {
    _this->_internal_set_tx_index(from._internal_tx_index());
  }
  if (!from._internal_rpc_address().empty()) {
    _this->_internal_set_rpc_address(from._internal_rpc_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DefaultNodeInfoOther::CopyFrom(const DefaultNodeInfoOther& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.DefaultNodeInfoOther)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultNodeInfoOther::IsInitialized() const {
  return true;
}

void DefaultNodeInfoOther::InternalSwap(DefaultNodeInfoOther* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_index_, lhs_arena,
      &other->_impl_.tx_index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rpc_address_, lhs_arena,
      &other->_impl_.rpc_address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultNodeInfoOther::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fp2p_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2ftypes_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace p2p
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::p2p::NetAddress*
Arena::CreateMaybeMessage< ::tendermint::p2p::NetAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::NetAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::p2p::ProtocolVersion*
Arena::CreateMaybeMessage< ::tendermint::p2p::ProtocolVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::ProtocolVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::p2p::DefaultNodeInfo*
Arena::CreateMaybeMessage< ::tendermint::p2p::DefaultNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::DefaultNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::p2p::DefaultNodeInfoOther*
Arena::CreateMaybeMessage< ::tendermint::p2p::DefaultNodeInfoOther >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::DefaultNodeInfoOther >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
