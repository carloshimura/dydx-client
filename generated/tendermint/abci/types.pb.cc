// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/abci/types.proto

#include "tendermint/abci/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tendermint {
namespace abci {
PROTOBUF_CONSTEXPR Request::Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
PROTOBUF_CONSTEXPR RequestEcho::RequestEcho(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestEchoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestEchoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestEchoDefaultTypeInternal() {}
  union {
    RequestEcho _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestEchoDefaultTypeInternal _RequestEcho_default_instance_;
PROTOBUF_CONSTEXPR RequestFlush::RequestFlush(
    ::_pbi::ConstantInitialized) {}
struct RequestFlushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestFlushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestFlushDefaultTypeInternal() {}
  union {
    RequestFlush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestFlushDefaultTypeInternal _RequestFlush_default_instance_;
PROTOBUF_CONSTEXPR RequestInfo::RequestInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.abci_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_version_)*/uint64_t{0u}
  , /*decltype(_impl_.p2p_version_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestInfoDefaultTypeInternal() {}
  union {
    RequestInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestInfoDefaultTypeInternal _RequestInfo_default_instance_;
PROTOBUF_CONSTEXPR RequestInitChain::RequestInitChain(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.validators_)*/{}
  , /*decltype(_impl_.chain_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_state_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.consensus_params_)*/nullptr
  , /*decltype(_impl_.initial_height_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestInitChainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestInitChainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestInitChainDefaultTypeInternal() {}
  union {
    RequestInitChain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestInitChainDefaultTypeInternal _RequestInitChain_default_instance_;
PROTOBUF_CONSTEXPR RequestQuery::RequestQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.height_)*/int64_t{0}
  , /*decltype(_impl_.prove_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestQueryDefaultTypeInternal() {}
  union {
    RequestQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestQueryDefaultTypeInternal _RequestQuery_default_instance_;
PROTOBUF_CONSTEXPR RequestBeginBlock::RequestBeginBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.byzantine_validators_)*/{}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.last_commit_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestBeginBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestBeginBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestBeginBlockDefaultTypeInternal() {}
  union {
    RequestBeginBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestBeginBlockDefaultTypeInternal _RequestBeginBlock_default_instance_;
PROTOBUF_CONSTEXPR RequestCheckTx::RequestCheckTx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestCheckTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestCheckTxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestCheckTxDefaultTypeInternal() {}
  union {
    RequestCheckTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestCheckTxDefaultTypeInternal _RequestCheckTx_default_instance_;
PROTOBUF_CONSTEXPR RequestDeliverTx::RequestDeliverTx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestDeliverTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDeliverTxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDeliverTxDefaultTypeInternal() {}
  union {
    RequestDeliverTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDeliverTxDefaultTypeInternal _RequestDeliverTx_default_instance_;
PROTOBUF_CONSTEXPR RequestEndBlock::RequestEndBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.height_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestEndBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestEndBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestEndBlockDefaultTypeInternal() {}
  union {
    RequestEndBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestEndBlockDefaultTypeInternal _RequestEndBlock_default_instance_;
PROTOBUF_CONSTEXPR RequestCommit::RequestCommit(
    ::_pbi::ConstantInitialized) {}
struct RequestCommitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestCommitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestCommitDefaultTypeInternal() {}
  union {
    RequestCommit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestCommitDefaultTypeInternal _RequestCommit_default_instance_;
PROTOBUF_CONSTEXPR RequestListSnapshots::RequestListSnapshots(
    ::_pbi::ConstantInitialized) {}
struct RequestListSnapshotsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestListSnapshotsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestListSnapshotsDefaultTypeInternal() {}
  union {
    RequestListSnapshots _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestListSnapshotsDefaultTypeInternal _RequestListSnapshots_default_instance_;
PROTOBUF_CONSTEXPR RequestOfferSnapshot::RequestOfferSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.snapshot_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestOfferSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestOfferSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestOfferSnapshotDefaultTypeInternal() {}
  union {
    RequestOfferSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestOfferSnapshotDefaultTypeInternal _RequestOfferSnapshot_default_instance_;
PROTOBUF_CONSTEXPR RequestLoadSnapshotChunk::RequestLoadSnapshotChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.height_)*/uint64_t{0u}
  , /*decltype(_impl_.format_)*/0u
  , /*decltype(_impl_.chunk_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestLoadSnapshotChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestLoadSnapshotChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestLoadSnapshotChunkDefaultTypeInternal() {}
  union {
    RequestLoadSnapshotChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestLoadSnapshotChunkDefaultTypeInternal _RequestLoadSnapshotChunk_default_instance_;
PROTOBUF_CONSTEXPR RequestApplySnapshotChunk::RequestApplySnapshotChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestApplySnapshotChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestApplySnapshotChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestApplySnapshotChunkDefaultTypeInternal() {}
  union {
    RequestApplySnapshotChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestApplySnapshotChunkDefaultTypeInternal _RequestApplySnapshotChunk_default_instance_;
PROTOBUF_CONSTEXPR RequestPrepareProposal::RequestPrepareProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_.misbehavior_)*/{}
  , /*decltype(_impl_.next_validators_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proposer_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.local_last_commit_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.max_tx_bytes_)*/int64_t{0}
  , /*decltype(_impl_.height_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestPrepareProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestPrepareProposalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestPrepareProposalDefaultTypeInternal() {}
  union {
    RequestPrepareProposal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestPrepareProposalDefaultTypeInternal _RequestPrepareProposal_default_instance_;
PROTOBUF_CONSTEXPR RequestProcessProposal::RequestProcessProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_.misbehavior_)*/{}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.next_validators_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proposer_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proposed_last_commit_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.height_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestProcessProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestProcessProposalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestProcessProposalDefaultTypeInternal() {}
  union {
    RequestProcessProposal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestProcessProposalDefaultTypeInternal _RequestProcessProposal_default_instance_;
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_CONSTEXPR ResponseException::ResponseException(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseExceptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseExceptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseExceptionDefaultTypeInternal() {}
  union {
    ResponseException _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseExceptionDefaultTypeInternal _ResponseException_default_instance_;
PROTOBUF_CONSTEXPR ResponseEcho::ResponseEcho(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseEchoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseEchoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseEchoDefaultTypeInternal() {}
  union {
    ResponseEcho _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseEchoDefaultTypeInternal _ResponseEcho_default_instance_;
PROTOBUF_CONSTEXPR ResponseFlush::ResponseFlush(
    ::_pbi::ConstantInitialized) {}
struct ResponseFlushDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseFlushDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseFlushDefaultTypeInternal() {}
  union {
    ResponseFlush _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseFlushDefaultTypeInternal _ResponseFlush_default_instance_;
PROTOBUF_CONSTEXPR ResponseInfo::ResponseInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_block_app_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_version_)*/uint64_t{0u}
  , /*decltype(_impl_.last_block_height_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseInfoDefaultTypeInternal() {}
  union {
    ResponseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseInfoDefaultTypeInternal _ResponseInfo_default_instance_;
PROTOBUF_CONSTEXPR ResponseInitChain::ResponseInitChain(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.validators_)*/{}
  , /*decltype(_impl_.app_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consensus_params_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseInitChainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseInitChainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseInitChainDefaultTypeInternal() {}
  union {
    ResponseInitChain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseInitChainDefaultTypeInternal _ResponseInitChain_default_instance_;
PROTOBUF_CONSTEXPR ResponseQuery::ResponseQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.log_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.codespace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proof_ops_)*/nullptr
  , /*decltype(_impl_.index_)*/int64_t{0}
  , /*decltype(_impl_.height_)*/int64_t{0}
  , /*decltype(_impl_.code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseQueryDefaultTypeInternal() {}
  union {
    ResponseQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseQueryDefaultTypeInternal _ResponseQuery_default_instance_;
PROTOBUF_CONSTEXPR ResponseBeginBlock::ResponseBeginBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseBeginBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseBeginBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseBeginBlockDefaultTypeInternal() {}
  union {
    ResponseBeginBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseBeginBlockDefaultTypeInternal _ResponseBeginBlock_default_instance_;
PROTOBUF_CONSTEXPR ResponseCheckTx::ResponseCheckTx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.codespace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mempool_error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gas_wanted_)*/int64_t{0}
  , /*decltype(_impl_.gas_used_)*/int64_t{0}
  , /*decltype(_impl_.priority_)*/int64_t{0}
  , /*decltype(_impl_.code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseCheckTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseCheckTxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseCheckTxDefaultTypeInternal() {}
  union {
    ResponseCheckTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseCheckTxDefaultTypeInternal _ResponseCheckTx_default_instance_;
PROTOBUF_CONSTEXPR ResponseDeliverTx::ResponseDeliverTx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.codespace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gas_wanted_)*/int64_t{0}
  , /*decltype(_impl_.gas_used_)*/int64_t{0}
  , /*decltype(_impl_.code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseDeliverTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDeliverTxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDeliverTxDefaultTypeInternal() {}
  union {
    ResponseDeliverTx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDeliverTxDefaultTypeInternal _ResponseDeliverTx_default_instance_;
PROTOBUF_CONSTEXPR ResponseEndBlock::ResponseEndBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.validator_updates_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.consensus_param_updates_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseEndBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseEndBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseEndBlockDefaultTypeInternal() {}
  union {
    ResponseEndBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseEndBlockDefaultTypeInternal _ResponseEndBlock_default_instance_;
PROTOBUF_CONSTEXPR ResponseCommit::ResponseCommit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.retain_height_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseCommitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseCommitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseCommitDefaultTypeInternal() {}
  union {
    ResponseCommit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseCommitDefaultTypeInternal _ResponseCommit_default_instance_;
PROTOBUF_CONSTEXPR ResponseListSnapshots::ResponseListSnapshots(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.snapshots_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseListSnapshotsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseListSnapshotsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseListSnapshotsDefaultTypeInternal() {}
  union {
    ResponseListSnapshots _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseListSnapshotsDefaultTypeInternal _ResponseListSnapshots_default_instance_;
PROTOBUF_CONSTEXPR ResponseOfferSnapshot::ResponseOfferSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseOfferSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseOfferSnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseOfferSnapshotDefaultTypeInternal() {}
  union {
    ResponseOfferSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseOfferSnapshotDefaultTypeInternal _ResponseOfferSnapshot_default_instance_;
PROTOBUF_CONSTEXPR ResponseLoadSnapshotChunk::ResponseLoadSnapshotChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseLoadSnapshotChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseLoadSnapshotChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseLoadSnapshotChunkDefaultTypeInternal() {}
  union {
    ResponseLoadSnapshotChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseLoadSnapshotChunkDefaultTypeInternal _ResponseLoadSnapshotChunk_default_instance_;
PROTOBUF_CONSTEXPR ResponseApplySnapshotChunk::ResponseApplySnapshotChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.refetch_chunks_)*/{}
  , /*decltype(_impl_._refetch_chunks_cached_byte_size_)*/{0}
  , /*decltype(_impl_.reject_senders_)*/{}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseApplySnapshotChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseApplySnapshotChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseApplySnapshotChunkDefaultTypeInternal() {}
  union {
    ResponseApplySnapshotChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseApplySnapshotChunkDefaultTypeInternal _ResponseApplySnapshotChunk_default_instance_;
PROTOBUF_CONSTEXPR ResponsePrepareProposal::ResponsePrepareProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponsePrepareProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponsePrepareProposalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponsePrepareProposalDefaultTypeInternal() {}
  union {
    ResponsePrepareProposal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponsePrepareProposalDefaultTypeInternal _ResponsePrepareProposal_default_instance_;
PROTOBUF_CONSTEXPR ResponseProcessProposal::ResponseProcessProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseProcessProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseProcessProposalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseProcessProposalDefaultTypeInternal() {}
  union {
    ResponseProcessProposal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseProcessProposalDefaultTypeInternal _ResponseProcessProposal_default_instance_;
PROTOBUF_CONSTEXPR CommitInfo::CommitInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.votes_)*/{}
  , /*decltype(_impl_.round_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommitInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitInfoDefaultTypeInternal() {}
  union {
    CommitInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitInfoDefaultTypeInternal _CommitInfo_default_instance_;
PROTOBUF_CONSTEXPR ExtendedCommitInfo::ExtendedCommitInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.votes_)*/{}
  , /*decltype(_impl_.round_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtendedCommitInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtendedCommitInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtendedCommitInfoDefaultTypeInternal() {}
  union {
    ExtendedCommitInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtendedCommitInfoDefaultTypeInternal _ExtendedCommitInfo_default_instance_;
PROTOBUF_CONSTEXPR Event::Event(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
PROTOBUF_CONSTEXPR EventAttribute::EventAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventAttributeDefaultTypeInternal() {}
  union {
    EventAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventAttributeDefaultTypeInternal _EventAttribute_default_instance_;
PROTOBUF_CONSTEXPR TxResult::TxResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.height_)*/int64_t{0}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxResultDefaultTypeInternal() {}
  union {
    TxResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxResultDefaultTypeInternal _TxResult_default_instance_;
PROTOBUF_CONSTEXPR Validator::Validator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.power_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorDefaultTypeInternal() {}
  union {
    Validator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorDefaultTypeInternal _Validator_default_instance_;
PROTOBUF_CONSTEXPR ValidatorUpdate::ValidatorUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pub_key_)*/nullptr
  , /*decltype(_impl_.power_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorUpdateDefaultTypeInternal() {}
  union {
    ValidatorUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorUpdateDefaultTypeInternal _ValidatorUpdate_default_instance_;
PROTOBUF_CONSTEXPR VoteInfo::VoteInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.validator_)*/nullptr
  , /*decltype(_impl_.signed_last_block_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VoteInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteInfoDefaultTypeInternal() {}
  union {
    VoteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteInfoDefaultTypeInternal _VoteInfo_default_instance_;
PROTOBUF_CONSTEXPR ExtendedVoteInfo::ExtendedVoteInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vote_extension_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.validator_)*/nullptr
  , /*decltype(_impl_.signed_last_block_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtendedVoteInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtendedVoteInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtendedVoteInfoDefaultTypeInternal() {}
  union {
    ExtendedVoteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtendedVoteInfoDefaultTypeInternal _ExtendedVoteInfo_default_instance_;
PROTOBUF_CONSTEXPR Misbehavior::Misbehavior(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.validator_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.height_)*/int64_t{0}
  , /*decltype(_impl_.total_voting_power_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MisbehaviorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MisbehaviorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MisbehaviorDefaultTypeInternal() {}
  union {
    Misbehavior _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MisbehaviorDefaultTypeInternal _Misbehavior_default_instance_;
PROTOBUF_CONSTEXPR Snapshot::Snapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.height_)*/uint64_t{0u}
  , /*decltype(_impl_.format_)*/0u
  , /*decltype(_impl_.chunks_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotDefaultTypeInternal() {}
  union {
    Snapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotDefaultTypeInternal _Snapshot_default_instance_;
}  // namespace abci
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2fabci_2ftypes_2eproto[46];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tendermint_2fabci_2ftypes_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tendermint_2fabci_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_tendermint_2fabci_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Request, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Request, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestEcho, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestEcho, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestFlush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInfo, _impl_.block_version_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInfo, _impl_.p2p_version_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInfo, _impl_.abci_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, _impl_.consensus_params_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, _impl_.validators_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, _impl_.app_state_bytes_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestInitChain, _impl_.initial_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestQuery, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestQuery, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestQuery, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestQuery, _impl_.prove_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestBeginBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestBeginBlock, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestBeginBlock, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestBeginBlock, _impl_.last_commit_info_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestBeginBlock, _impl_.byzantine_validators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestCheckTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestCheckTx, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestCheckTx, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestDeliverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestDeliverTx, _impl_.tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestEndBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestEndBlock, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestListSnapshots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestOfferSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestOfferSnapshot, _impl_.snapshot_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestOfferSnapshot, _impl_.app_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestLoadSnapshotChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestLoadSnapshotChunk, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestLoadSnapshotChunk, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestLoadSnapshotChunk, _impl_.chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestApplySnapshotChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestApplySnapshotChunk, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestApplySnapshotChunk, _impl_.chunk_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestApplySnapshotChunk, _impl_.sender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestPrepareProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestPrepareProposal, _impl_.max_tx_bytes_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestPrepareProposal, _impl_.txs_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestPrepareProposal, _impl_.local_last_commit_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestPrepareProposal, _impl_.misbehavior_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestPrepareProposal, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestPrepareProposal, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestPrepareProposal, _impl_.next_validators_hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestPrepareProposal, _impl_.proposer_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestProcessProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestProcessProposal, _impl_.txs_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestProcessProposal, _impl_.proposed_last_commit_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestProcessProposal, _impl_.misbehavior_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestProcessProposal, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestProcessProposal, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestProcessProposal, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestProcessProposal, _impl_.next_validators_hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::RequestProcessProposal, _impl_.proposer_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Response, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Response, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseException, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseException, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseEcho, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseEcho, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseFlush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInfo, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInfo, _impl_.app_version_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInfo, _impl_.last_block_height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInfo, _impl_.last_block_app_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInitChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInitChain, _impl_.consensus_params_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInitChain, _impl_.validators_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseInitChain, _impl_.app_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, _impl_.log_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, _impl_.proof_ops_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseQuery, _impl_.codespace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseBeginBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseBeginBlock, _impl_.events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, _impl_.log_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, _impl_.gas_wanted_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, _impl_.gas_used_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, _impl_.codespace_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCheckTx, _impl_.mempool_error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, _impl_.log_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, _impl_.gas_wanted_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, _impl_.gas_used_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseDeliverTx, _impl_.codespace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseEndBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseEndBlock, _impl_.validator_updates_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseEndBlock, _impl_.consensus_param_updates_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseEndBlock, _impl_.events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCommit, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseCommit, _impl_.retain_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseListSnapshots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseListSnapshots, _impl_.snapshots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseOfferSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseOfferSnapshot, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseLoadSnapshotChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseLoadSnapshotChunk, _impl_.chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseApplySnapshotChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseApplySnapshotChunk, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseApplySnapshotChunk, _impl_.refetch_chunks_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseApplySnapshotChunk, _impl_.reject_senders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponsePrepareProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponsePrepareProposal, _impl_.txs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseProcessProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ResponseProcessProposal, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::CommitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::CommitInfo, _impl_.round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::CommitInfo, _impl_.votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ExtendedCommitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ExtendedCommitInfo, _impl_.round_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ExtendedCommitInfo, _impl_.votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Event, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Event, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::EventAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::EventAttribute, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::EventAttribute, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::EventAttribute, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::TxResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::TxResult, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::TxResult, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::TxResult, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::TxResult, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Validator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Validator, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Validator, _impl_.power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ValidatorUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ValidatorUpdate, _impl_.pub_key_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ValidatorUpdate, _impl_.power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::VoteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::VoteInfo, _impl_.validator_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::VoteInfo, _impl_.signed_last_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ExtendedVoteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ExtendedVoteInfo, _impl_.validator_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ExtendedVoteInfo, _impl_.signed_last_block_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::ExtendedVoteInfo, _impl_.vote_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Misbehavior, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Misbehavior, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Misbehavior, _impl_.validator_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Misbehavior, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Misbehavior, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Misbehavior, _impl_.total_voting_power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Snapshot, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Snapshot, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Snapshot, _impl_.chunks_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Snapshot, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::tendermint::abci::Snapshot, _impl_.metadata_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tendermint::abci::Request)},
  { 23, -1, -1, sizeof(::tendermint::abci::RequestEcho)},
  { 30, -1, -1, sizeof(::tendermint::abci::RequestFlush)},
  { 36, -1, -1, sizeof(::tendermint::abci::RequestInfo)},
  { 46, -1, -1, sizeof(::tendermint::abci::RequestInitChain)},
  { 58, -1, -1, sizeof(::tendermint::abci::RequestQuery)},
  { 68, -1, -1, sizeof(::tendermint::abci::RequestBeginBlock)},
  { 78, -1, -1, sizeof(::tendermint::abci::RequestCheckTx)},
  { 86, -1, -1, sizeof(::tendermint::abci::RequestDeliverTx)},
  { 93, -1, -1, sizeof(::tendermint::abci::RequestEndBlock)},
  { 100, -1, -1, sizeof(::tendermint::abci::RequestCommit)},
  { 106, -1, -1, sizeof(::tendermint::abci::RequestListSnapshots)},
  { 112, -1, -1, sizeof(::tendermint::abci::RequestOfferSnapshot)},
  { 120, -1, -1, sizeof(::tendermint::abci::RequestLoadSnapshotChunk)},
  { 129, -1, -1, sizeof(::tendermint::abci::RequestApplySnapshotChunk)},
  { 138, -1, -1, sizeof(::tendermint::abci::RequestPrepareProposal)},
  { 152, -1, -1, sizeof(::tendermint::abci::RequestProcessProposal)},
  { 166, -1, -1, sizeof(::tendermint::abci::Response)},
  { 190, -1, -1, sizeof(::tendermint::abci::ResponseException)},
  { 197, -1, -1, sizeof(::tendermint::abci::ResponseEcho)},
  { 204, -1, -1, sizeof(::tendermint::abci::ResponseFlush)},
  { 210, -1, -1, sizeof(::tendermint::abci::ResponseInfo)},
  { 221, -1, -1, sizeof(::tendermint::abci::ResponseInitChain)},
  { 230, -1, -1, sizeof(::tendermint::abci::ResponseQuery)},
  { 245, -1, -1, sizeof(::tendermint::abci::ResponseBeginBlock)},
  { 252, -1, -1, sizeof(::tendermint::abci::ResponseCheckTx)},
  { 269, -1, -1, sizeof(::tendermint::abci::ResponseDeliverTx)},
  { 283, -1, -1, sizeof(::tendermint::abci::ResponseEndBlock)},
  { 292, -1, -1, sizeof(::tendermint::abci::ResponseCommit)},
  { 300, -1, -1, sizeof(::tendermint::abci::ResponseListSnapshots)},
  { 307, -1, -1, sizeof(::tendermint::abci::ResponseOfferSnapshot)},
  { 314, -1, -1, sizeof(::tendermint::abci::ResponseLoadSnapshotChunk)},
  { 321, -1, -1, sizeof(::tendermint::abci::ResponseApplySnapshotChunk)},
  { 330, -1, -1, sizeof(::tendermint::abci::ResponsePrepareProposal)},
  { 337, -1, -1, sizeof(::tendermint::abci::ResponseProcessProposal)},
  { 344, -1, -1, sizeof(::tendermint::abci::CommitInfo)},
  { 352, -1, -1, sizeof(::tendermint::abci::ExtendedCommitInfo)},
  { 360, -1, -1, sizeof(::tendermint::abci::Event)},
  { 368, -1, -1, sizeof(::tendermint::abci::EventAttribute)},
  { 377, -1, -1, sizeof(::tendermint::abci::TxResult)},
  { 387, -1, -1, sizeof(::tendermint::abci::Validator)},
  { 395, -1, -1, sizeof(::tendermint::abci::ValidatorUpdate)},
  { 403, -1, -1, sizeof(::tendermint::abci::VoteInfo)},
  { 411, -1, -1, sizeof(::tendermint::abci::ExtendedVoteInfo)},
  { 420, -1, -1, sizeof(::tendermint::abci::Misbehavior)},
  { 431, -1, -1, sizeof(::tendermint::abci::Snapshot)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tendermint::abci::_Request_default_instance_._instance,
  &::tendermint::abci::_RequestEcho_default_instance_._instance,
  &::tendermint::abci::_RequestFlush_default_instance_._instance,
  &::tendermint::abci::_RequestInfo_default_instance_._instance,
  &::tendermint::abci::_RequestInitChain_default_instance_._instance,
  &::tendermint::abci::_RequestQuery_default_instance_._instance,
  &::tendermint::abci::_RequestBeginBlock_default_instance_._instance,
  &::tendermint::abci::_RequestCheckTx_default_instance_._instance,
  &::tendermint::abci::_RequestDeliverTx_default_instance_._instance,
  &::tendermint::abci::_RequestEndBlock_default_instance_._instance,
  &::tendermint::abci::_RequestCommit_default_instance_._instance,
  &::tendermint::abci::_RequestListSnapshots_default_instance_._instance,
  &::tendermint::abci::_RequestOfferSnapshot_default_instance_._instance,
  &::tendermint::abci::_RequestLoadSnapshotChunk_default_instance_._instance,
  &::tendermint::abci::_RequestApplySnapshotChunk_default_instance_._instance,
  &::tendermint::abci::_RequestPrepareProposal_default_instance_._instance,
  &::tendermint::abci::_RequestProcessProposal_default_instance_._instance,
  &::tendermint::abci::_Response_default_instance_._instance,
  &::tendermint::abci::_ResponseException_default_instance_._instance,
  &::tendermint::abci::_ResponseEcho_default_instance_._instance,
  &::tendermint::abci::_ResponseFlush_default_instance_._instance,
  &::tendermint::abci::_ResponseInfo_default_instance_._instance,
  &::tendermint::abci::_ResponseInitChain_default_instance_._instance,
  &::tendermint::abci::_ResponseQuery_default_instance_._instance,
  &::tendermint::abci::_ResponseBeginBlock_default_instance_._instance,
  &::tendermint::abci::_ResponseCheckTx_default_instance_._instance,
  &::tendermint::abci::_ResponseDeliverTx_default_instance_._instance,
  &::tendermint::abci::_ResponseEndBlock_default_instance_._instance,
  &::tendermint::abci::_ResponseCommit_default_instance_._instance,
  &::tendermint::abci::_ResponseListSnapshots_default_instance_._instance,
  &::tendermint::abci::_ResponseOfferSnapshot_default_instance_._instance,
  &::tendermint::abci::_ResponseLoadSnapshotChunk_default_instance_._instance,
  &::tendermint::abci::_ResponseApplySnapshotChunk_default_instance_._instance,
  &::tendermint::abci::_ResponsePrepareProposal_default_instance_._instance,
  &::tendermint::abci::_ResponseProcessProposal_default_instance_._instance,
  &::tendermint::abci::_CommitInfo_default_instance_._instance,
  &::tendermint::abci::_ExtendedCommitInfo_default_instance_._instance,
  &::tendermint::abci::_Event_default_instance_._instance,
  &::tendermint::abci::_EventAttribute_default_instance_._instance,
  &::tendermint::abci::_TxResult_default_instance_._instance,
  &::tendermint::abci::_Validator_default_instance_._instance,
  &::tendermint::abci::_ValidatorUpdate_default_instance_._instance,
  &::tendermint::abci::_VoteInfo_default_instance_._instance,
  &::tendermint::abci::_ExtendedVoteInfo_default_instance_._instance,
  &::tendermint::abci::_Misbehavior_default_instance_._instance,
  &::tendermint::abci::_Snapshot_default_instance_._instance,
};

const char descriptor_table_protodef_tendermint_2fabci_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033tendermint/abci/types.proto\022\017tendermin"
  "t.abci\032\035tendermint/crypto/proof.proto\032\034t"
  "endermint/types/types.proto\032\034tendermint/"
  "crypto/keys.proto\032\035tendermint/types/para"
  "ms.proto\032\037google/protobuf/timestamp.prot"
  "o\032\024gogoproto/gogo.proto\"\301\007\n\007Request\022,\n\004e"
  "cho\030\001 \001(\0132\034.tendermint.abci.RequestEchoH"
  "\000\022.\n\005flush\030\002 \001(\0132\035.tendermint.abci.Reque"
  "stFlushH\000\022,\n\004info\030\003 \001(\0132\034.tendermint.abc"
  "i.RequestInfoH\000\0227\n\ninit_chain\030\005 \001(\0132!.te"
  "ndermint.abci.RequestInitChainH\000\022.\n\005quer"
  "y\030\006 \001(\0132\035.tendermint.abci.RequestQueryH\000"
  "\0229\n\013begin_block\030\007 \001(\0132\".tendermint.abci."
  "RequestBeginBlockH\000\0223\n\010check_tx\030\010 \001(\0132\037."
  "tendermint.abci.RequestCheckTxH\000\0227\n\ndeli"
  "ver_tx\030\t \001(\0132!.tendermint.abci.RequestDe"
  "liverTxH\000\0225\n\tend_block\030\n \001(\0132 .tendermin"
  "t.abci.RequestEndBlockH\000\0220\n\006commit\030\013 \001(\013"
  "2\036.tendermint.abci.RequestCommitH\000\022\?\n\016li"
  "st_snapshots\030\014 \001(\0132%.tendermint.abci.Req"
  "uestListSnapshotsH\000\022\?\n\016offer_snapshot\030\r "
  "\001(\0132%.tendermint.abci.RequestOfferSnapsh"
  "otH\000\022H\n\023load_snapshot_chunk\030\016 \001(\0132).tend"
  "ermint.abci.RequestLoadSnapshotChunkH\000\022J"
  "\n\024apply_snapshot_chunk\030\017 \001(\0132*.tendermin"
  "t.abci.RequestApplySnapshotChunkH\000\022C\n\020pr"
  "epare_proposal\030\020 \001(\0132\'.tendermint.abci.R"
  "equestPrepareProposalH\000\022C\n\020process_propo"
  "sal\030\021 \001(\0132\'.tendermint.abci.RequestProce"
  "ssProposalH\000B\007\n\005valueJ\004\010\004\020\005\"\036\n\013RequestEc"
  "ho\022\017\n\007message\030\001 \001(\t\"\016\n\014RequestFlush\"`\n\013R"
  "equestInfo\022\017\n\007version\030\001 \001(\t\022\025\n\rblock_ver"
  "sion\030\002 \001(\004\022\023\n\013p2p_version\030\003 \001(\004\022\024\n\014abci_"
  "version\030\004 \001(\t\"\202\002\n\020RequestInitChain\0222\n\004ti"
  "me\030\001 \001(\0132\032.google.protobuf.TimestampB\010\310\336"
  "\037\000\220\337\037\001\022\020\n\010chain_id\030\002 \001(\t\022;\n\020consensus_pa"
  "rams\030\003 \001(\0132!.tendermint.types.ConsensusP"
  "arams\022:\n\nvalidators\030\004 \003(\0132 .tendermint.a"
  "bci.ValidatorUpdateB\004\310\336\037\000\022\027\n\017app_state_b"
  "ytes\030\005 \001(\014\022\026\n\016initial_height\030\006 \001(\003\"I\n\014Re"
  "questQuery\022\014\n\004data\030\001 \001(\014\022\014\n\004path\030\002 \001(\t\022\016"
  "\n\006height\030\003 \001(\003\022\r\n\005prove\030\004 \001(\010\"\320\001\n\021Reques"
  "tBeginBlock\022\014\n\004hash\030\001 \001(\014\022.\n\006header\030\002 \001("
  "\0132\030.tendermint.types.HeaderB\004\310\336\037\000\022;\n\020las"
  "t_commit_info\030\003 \001(\0132\033.tendermint.abci.Co"
  "mmitInfoB\004\310\336\037\000\022@\n\024byzantine_validators\030\004"
  " \003(\0132\034.tendermint.abci.MisbehaviorB\004\310\336\037\000"
  "\"H\n\016RequestCheckTx\022\n\n\002tx\030\001 \001(\014\022*\n\004type\030\002"
  " \001(\0162\034.tendermint.abci.CheckTxType\"\036\n\020Re"
  "questDeliverTx\022\n\n\002tx\030\001 \001(\014\"!\n\017RequestEnd"
  "Block\022\016\n\006height\030\001 \001(\003\"\017\n\rRequestCommit\"\026"
  "\n\024RequestListSnapshots\"U\n\024RequestOfferSn"
  "apshot\022+\n\010snapshot\030\001 \001(\0132\031.tendermint.ab"
  "ci.Snapshot\022\020\n\010app_hash\030\002 \001(\014\"I\n\030Request"
  "LoadSnapshotChunk\022\016\n\006height\030\001 \001(\004\022\016\n\006for"
  "mat\030\002 \001(\r\022\r\n\005chunk\030\003 \001(\r\"I\n\031RequestApply"
  "SnapshotChunk\022\r\n\005index\030\001 \001(\r\022\r\n\005chunk\030\002 "
  "\001(\014\022\016\n\006sender\030\003 \001(\t\"\266\002\n\026RequestPreparePr"
  "oposal\022\024\n\014max_tx_bytes\030\001 \001(\003\022\013\n\003txs\030\002 \003("
  "\014\022D\n\021local_last_commit\030\003 \001(\0132#.tendermin"
  "t.abci.ExtendedCommitInfoB\004\310\336\037\000\0227\n\013misbe"
  "havior\030\004 \003(\0132\034.tendermint.abci.Misbehavi"
  "orB\004\310\336\037\000\022\016\n\006height\030\005 \001(\003\0222\n\004time\030\006 \001(\0132\032"
  ".google.protobuf.TimestampB\010\310\336\037\000\220\337\037\001\022\034\n\024"
  "next_validators_hash\030\007 \001(\014\022\030\n\020proposer_a"
  "ddress\030\010 \001(\014\"\251\002\n\026RequestProcessProposal\022"
  "\013\n\003txs\030\001 \003(\014\022\?\n\024proposed_last_commit\030\002 \001"
  "(\0132\033.tendermint.abci.CommitInfoB\004\310\336\037\000\0227\n"
  "\013misbehavior\030\003 \003(\0132\034.tendermint.abci.Mis"
  "behaviorB\004\310\336\037\000\022\014\n\004hash\030\004 \001(\014\022\016\n\006height\030\005"
  " \001(\003\0222\n\004time\030\006 \001(\0132\032.google.protobuf.Tim"
  "estampB\010\310\336\037\000\220\337\037\001\022\034\n\024next_validators_hash"
  "\030\007 \001(\014\022\030\n\020proposer_address\030\010 \001(\014\"\213\010\n\010Res"
  "ponse\0227\n\texception\030\001 \001(\0132\".tendermint.ab"
  "ci.ResponseExceptionH\000\022-\n\004echo\030\002 \001(\0132\035.t"
  "endermint.abci.ResponseEchoH\000\022/\n\005flush\030\003"
  " \001(\0132\036.tendermint.abci.ResponseFlushH\000\022-"
  "\n\004info\030\004 \001(\0132\035.tendermint.abci.ResponseI"
  "nfoH\000\0228\n\ninit_chain\030\006 \001(\0132\".tendermint.a"
  "bci.ResponseInitChainH\000\022/\n\005query\030\007 \001(\0132\036"
  ".tendermint.abci.ResponseQueryH\000\022:\n\013begi"
  "n_block\030\010 \001(\0132#.tendermint.abci.Response"
  "BeginBlockH\000\0224\n\010check_tx\030\t \001(\0132 .tenderm"
  "int.abci.ResponseCheckTxH\000\0228\n\ndeliver_tx"
  "\030\n \001(\0132\".tendermint.abci.ResponseDeliver"
  "TxH\000\0226\n\tend_block\030\013 \001(\0132!.tendermint.abc"
  "i.ResponseEndBlockH\000\0221\n\006commit\030\014 \001(\0132\037.t"
  "endermint.abci.ResponseCommitH\000\022@\n\016list_"
  "snapshots\030\r \001(\0132&.tendermint.abci.Respon"
  "seListSnapshotsH\000\022@\n\016offer_snapshot\030\016 \001("
  "\0132&.tendermint.abci.ResponseOfferSnapsho"
  "tH\000\022I\n\023load_snapshot_chunk\030\017 \001(\0132*.tende"
  "rmint.abci.ResponseLoadSnapshotChunkH\000\022K"
  "\n\024apply_snapshot_chunk\030\020 \001(\0132+.tendermin"
  "t.abci.ResponseApplySnapshotChunkH\000\022D\n\020p"
  "repare_proposal\030\021 \001(\0132(.tendermint.abci."
  "ResponsePrepareProposalH\000\022D\n\020process_pro"
  "posal\030\022 \001(\0132(.tendermint.abci.ResponsePr"
  "ocessProposalH\000B\007\n\005valueJ\004\010\005\020\006\"\"\n\021Respon"
  "seException\022\r\n\005error\030\001 \001(\t\"\037\n\014ResponseEc"
  "ho\022\017\n\007message\030\001 \001(\t\"\017\n\rResponseFlush\"z\n\014"
  "ResponseInfo\022\014\n\004data\030\001 \001(\t\022\017\n\007version\030\002 "
  "\001(\t\022\023\n\013app_version\030\003 \001(\004\022\031\n\021last_block_h"
  "eight\030\004 \001(\003\022\033\n\023last_block_app_hash\030\005 \001(\014"
  "\"\236\001\n\021ResponseInitChain\022;\n\020consensus_para"
  "ms\030\001 \001(\0132!.tendermint.types.ConsensusPar"
  "ams\022:\n\nvalidators\030\002 \003(\0132 .tendermint.abc"
  "i.ValidatorUpdateB\004\310\336\037\000\022\020\n\010app_hash\030\003 \001("
  "\014\"\266\001\n\rResponseQuery\022\014\n\004code\030\001 \001(\r\022\013\n\003log"
  "\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\022\r\n\005index\030\005 \001(\003\022\013\n\003k"
  "ey\030\006 \001(\014\022\r\n\005value\030\007 \001(\014\022.\n\tproof_ops\030\010 \001"
  "(\0132\033.tendermint.crypto.ProofOps\022\016\n\006heigh"
  "t\030\t \001(\003\022\021\n\tcodespace\030\n \001(\t\"V\n\022ResponseBe"
  "ginBlock\022@\n\006events\030\001 \003(\0132\026.tendermint.ab"
  "ci.EventB\030\310\336\037\000\352\336\037\020events,omitempty\"\222\002\n\017R"
  "esponseCheckTx\022\014\n\004code\030\001 \001(\r\022\014\n\004data\030\002 \001"
  "(\014\022\013\n\003log\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\022\036\n\ngas_wan"
  "ted\030\005 \001(\003R\ngas_wanted\022\032\n\010gas_used\030\006 \001(\003R"
  "\010gas_used\022@\n\006events\030\007 \003(\0132\026.tendermint.a"
  "bci.EventB\030\310\336\037\000\352\336\037\020events,omitempty\022\021\n\tc"
  "odespace\030\010 \001(\t\022\016\n\006sender\030\t \001(\t\022\020\n\010priori"
  "ty\030\n \001(\003\022\025\n\rmempool_error\030\013 \001(\t\"\333\001\n\021Resp"
  "onseDeliverTx\022\014\n\004code\030\001 \001(\r\022\014\n\004data\030\002 \001("
  "\014\022\013\n\003log\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\022\036\n\ngas_want"
  "ed\030\005 \001(\003R\ngas_wanted\022\032\n\010gas_used\030\006 \001(\003R\010"
  "gas_used\022@\n\006events\030\007 \003(\0132\026.tendermint.ab"
  "ci.EventB\030\310\336\037\000\352\336\037\020events,omitempty\022\021\n\tco"
  "despace\030\010 \001(\t\"\333\001\n\020ResponseEndBlock\022A\n\021va"
  "lidator_updates\030\001 \003(\0132 .tendermint.abci."
  "ValidatorUpdateB\004\310\336\037\000\022B\n\027consensus_param"
  "_updates\030\002 \001(\0132!.tendermint.types.Consen"
  "susParams\022@\n\006events\030\003 \003(\0132\026.tendermint.a"
  "bci.EventB\030\310\336\037\000\352\336\037\020events,omitempty\"5\n\016R"
  "esponseCommit\022\014\n\004data\030\002 \001(\014\022\025\n\rretain_he"
  "ight\030\003 \001(\003\"E\n\025ResponseListSnapshots\022,\n\ts"
  "napshots\030\001 \003(\0132\031.tendermint.abci.Snapsho"
  "t\"\266\001\n\025ResponseOfferSnapshot\022=\n\006result\030\001 "
  "\001(\0162-.tendermint.abci.ResponseOfferSnaps"
  "hot.Result\"^\n\006Result\022\013\n\007UNKNOWN\020\000\022\n\n\006ACC"
  "EPT\020\001\022\t\n\005ABORT\020\002\022\n\n\006REJECT\020\003\022\021\n\rREJECT_F"
  "ORMAT\020\004\022\021\n\rREJECT_SENDER\020\005\"*\n\031ResponseLo"
  "adSnapshotChunk\022\r\n\005chunk\030\001 \001(\014\"\362\001\n\032Respo"
  "nseApplySnapshotChunk\022B\n\006result\030\001 \001(\01622."
  "tendermint.abci.ResponseApplySnapshotChu"
  "nk.Result\022\026\n\016refetch_chunks\030\002 \003(\r\022\026\n\016rej"
  "ect_senders\030\003 \003(\t\"`\n\006Result\022\013\n\007UNKNOWN\020\000"
  "\022\n\n\006ACCEPT\020\001\022\t\n\005ABORT\020\002\022\t\n\005RETRY\020\003\022\022\n\016RE"
  "TRY_SNAPSHOT\020\004\022\023\n\017REJECT_SNAPSHOT\020\005\"&\n\027R"
  "esponsePrepareProposal\022\013\n\003txs\030\001 \003(\014\"\231\001\n\027"
  "ResponseProcessProposal\022G\n\006status\030\001 \001(\0162"
  "7.tendermint.abci.ResponseProcessProposa"
  "l.ProposalStatus\"5\n\016ProposalStatus\022\013\n\007UN"
  "KNOWN\020\000\022\n\n\006ACCEPT\020\001\022\n\n\006REJECT\020\002\"K\n\nCommi"
  "tInfo\022\r\n\005round\030\001 \001(\005\022.\n\005votes\030\002 \003(\0132\031.te"
  "ndermint.abci.VoteInfoB\004\310\336\037\000\"[\n\022Extended"
  "CommitInfo\022\r\n\005round\030\001 \001(\005\0226\n\005votes\030\002 \003(\013"
  "2!.tendermint.abci.ExtendedVoteInfoB\004\310\336\037"
  "\000\"h\n\005Event\022\014\n\004type\030\001 \001(\t\022Q\n\nattributes\030\002"
  " \003(\0132\037.tendermint.abci.EventAttributeB\034\310"
  "\336\037\000\352\336\037\024attributes,omitempty\";\n\016EventAttr"
  "ibute\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\r\n\005ind"
  "ex\030\003 \001(\010\"o\n\010TxResult\022\016\n\006height\030\001 \001(\003\022\r\n\005"
  "index\030\002 \001(\r\022\n\n\002tx\030\003 \001(\014\0228\n\006result\030\004 \001(\0132"
  "\".tendermint.abci.ResponseDeliverTxB\004\310\336\037"
  "\000\"+\n\tValidator\022\017\n\007address\030\001 \001(\014\022\r\n\005power"
  "\030\003 \001(\003\"U\n\017ValidatorUpdate\0223\n\007pub_key\030\001 \001"
  "(\0132\034.tendermint.crypto.PublicKeyB\004\310\336\037\000\022\r"
  "\n\005power\030\002 \001(\003\"Z\n\010VoteInfo\0223\n\tvalidator\030\001"
  " \001(\0132\032.tendermint.abci.ValidatorB\004\310\336\037\000\022\031"
  "\n\021signed_last_block\030\002 \001(\010\"z\n\020ExtendedVot"
  "eInfo\0223\n\tvalidator\030\001 \001(\0132\032.tendermint.ab"
  "ci.ValidatorB\004\310\336\037\000\022\031\n\021signed_last_block\030"
  "\002 \001(\010\022\026\n\016vote_extension\030\003 \001(\014\"\322\001\n\013Misbeh"
  "avior\022.\n\004type\030\001 \001(\0162 .tendermint.abci.Mi"
  "sbehaviorType\0223\n\tvalidator\030\002 \001(\0132\032.tende"
  "rmint.abci.ValidatorB\004\310\336\037\000\022\016\n\006height\030\003 \001"
  "(\003\0222\n\004time\030\004 \001(\0132\032.google.protobuf.Times"
  "tampB\010\310\336\037\000\220\337\037\001\022\032\n\022total_voting_power\030\005 \001"
  "(\003\"Z\n\010Snapshot\022\016\n\006height\030\001 \001(\004\022\016\n\006format"
  "\030\002 \001(\r\022\016\n\006chunks\030\003 \001(\r\022\014\n\004hash\030\004 \001(\014\022\020\n\010"
  "metadata\030\005 \001(\014*9\n\013CheckTxType\022\020\n\003NEW\020\000\032\007"
  "\212\235 \003New\022\030\n\007RECHECK\020\001\032\013\212\235 \007Recheck*K\n\017Mis"
  "behaviorType\022\013\n\007UNKNOWN\020\000\022\022\n\016DUPLICATE_V"
  "OTE\020\001\022\027\n\023LIGHT_CLIENT_ATTACK\020\0022\373\n\n\017ABCIA"
  "pplication\022C\n\004Echo\022\034.tendermint.abci.Req"
  "uestEcho\032\035.tendermint.abci.ResponseEcho\022"
  "F\n\005Flush\022\035.tendermint.abci.RequestFlush\032"
  "\036.tendermint.abci.ResponseFlush\022C\n\004Info\022"
  "\034.tendermint.abci.RequestInfo\032\035.tendermi"
  "nt.abci.ResponseInfo\022R\n\tDeliverTx\022!.tend"
  "ermint.abci.RequestDeliverTx\032\".tendermin"
  "t.abci.ResponseDeliverTx\022L\n\007CheckTx\022\037.te"
  "ndermint.abci.RequestCheckTx\032 .tendermin"
  "t.abci.ResponseCheckTx\022F\n\005Query\022\035.tender"
  "mint.abci.RequestQuery\032\036.tendermint.abci"
  ".ResponseQuery\022I\n\006Commit\022\036.tendermint.ab"
  "ci.RequestCommit\032\037.tendermint.abci.Respo"
  "nseCommit\022R\n\tInitChain\022!.tendermint.abci"
  ".RequestInitChain\032\".tendermint.abci.Resp"
  "onseInitChain\022U\n\nBeginBlock\022\".tendermint"
  ".abci.RequestBeginBlock\032#.tendermint.abc"
  "i.ResponseBeginBlock\022O\n\010EndBlock\022 .tende"
  "rmint.abci.RequestEndBlock\032!.tendermint."
  "abci.ResponseEndBlock\022^\n\rListSnapshots\022%"
  ".tendermint.abci.RequestListSnapshots\032&."
  "tendermint.abci.ResponseListSnapshots\022^\n"
  "\rOfferSnapshot\022%.tendermint.abci.Request"
  "OfferSnapshot\032&.tendermint.abci.Response"
  "OfferSnapshot\022j\n\021LoadSnapshotChunk\022).ten"
  "dermint.abci.RequestLoadSnapshotChunk\032*."
  "tendermint.abci.ResponseLoadSnapshotChun"
  "k\022m\n\022ApplySnapshotChunk\022*.tendermint.abc"
  "i.RequestApplySnapshotChunk\032+.tendermint"
  ".abci.ResponseApplySnapshotChunk\022d\n\017Prep"
  "areProposal\022\'.tendermint.abci.RequestPre"
  "pareProposal\032(.tendermint.abci.ResponseP"
  "repareProposal\022d\n\017ProcessProposal\022\'.tend"
  "ermint.abci.RequestProcessProposal\032(.ten"
  "dermint.abci.ResponseProcessProposalB)Z\'"
  "github.com/cometbft/cometbft/abci/typesb"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2fabci_2ftypes_2eproto_deps[6] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_tendermint_2fcrypto_2fkeys_2eproto,
  &::descriptor_table_tendermint_2fcrypto_2fproof_2eproto,
  &::descriptor_table_tendermint_2ftypes_2fparams_2eproto,
  &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_tendermint_2fabci_2ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2fabci_2ftypes_2eproto = {
    false, false, 8807, descriptor_table_protodef_tendermint_2fabci_2ftypes_2eproto,
    "tendermint/abci/types.proto",
    &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once, descriptor_table_tendermint_2fabci_2ftypes_2eproto_deps, 6, 46,
    schemas, file_default_instances, TableStruct_tendermint_2fabci_2ftypes_2eproto::offsets,
    file_level_metadata_tendermint_2fabci_2ftypes_2eproto, file_level_enum_descriptors_tendermint_2fabci_2ftypes_2eproto,
    file_level_service_descriptors_tendermint_2fabci_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2fabci_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fabci_2ftypes_2eproto(&descriptor_table_tendermint_2fabci_2ftypes_2eproto);
namespace tendermint {
namespace abci {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseOfferSnapshot_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2fabci_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2fabci_2ftypes_2eproto[0];
}
bool ResponseOfferSnapshot_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::UNKNOWN;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::ACCEPT;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::ABORT;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::REJECT;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::REJECT_FORMAT;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::REJECT_SENDER;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::Result_MIN;
constexpr ResponseOfferSnapshot_Result ResponseOfferSnapshot::Result_MAX;
constexpr int ResponseOfferSnapshot::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseApplySnapshotChunk_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2fabci_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2fabci_2ftypes_2eproto[1];
}
bool ResponseApplySnapshotChunk_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::UNKNOWN;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::ACCEPT;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::ABORT;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::RETRY;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::RETRY_SNAPSHOT;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::REJECT_SNAPSHOT;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::Result_MIN;
constexpr ResponseApplySnapshotChunk_Result ResponseApplySnapshotChunk::Result_MAX;
constexpr int ResponseApplySnapshotChunk::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseProcessProposal_ProposalStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2fabci_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2fabci_2ftypes_2eproto[2];
}
bool ResponseProcessProposal_ProposalStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResponseProcessProposal_ProposalStatus ResponseProcessProposal::UNKNOWN;
constexpr ResponseProcessProposal_ProposalStatus ResponseProcessProposal::ACCEPT;
constexpr ResponseProcessProposal_ProposalStatus ResponseProcessProposal::REJECT;
constexpr ResponseProcessProposal_ProposalStatus ResponseProcessProposal::ProposalStatus_MIN;
constexpr ResponseProcessProposal_ProposalStatus ResponseProcessProposal::ProposalStatus_MAX;
constexpr int ResponseProcessProposal::ProposalStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CheckTxType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2fabci_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2fabci_2ftypes_2eproto[3];
}
bool CheckTxType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MisbehaviorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2fabci_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2fabci_2ftypes_2eproto[4];
}
bool MisbehaviorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Request::_Internal {
 public:
  static const ::tendermint::abci::RequestEcho& echo(const Request* msg);
  static const ::tendermint::abci::RequestFlush& flush(const Request* msg);
  static const ::tendermint::abci::RequestInfo& info(const Request* msg);
  static const ::tendermint::abci::RequestInitChain& init_chain(const Request* msg);
  static const ::tendermint::abci::RequestQuery& query(const Request* msg);
  static const ::tendermint::abci::RequestBeginBlock& begin_block(const Request* msg);
  static const ::tendermint::abci::RequestCheckTx& check_tx(const Request* msg);
  static const ::tendermint::abci::RequestDeliverTx& deliver_tx(const Request* msg);
  static const ::tendermint::abci::RequestEndBlock& end_block(const Request* msg);
  static const ::tendermint::abci::RequestCommit& commit(const Request* msg);
  static const ::tendermint::abci::RequestListSnapshots& list_snapshots(const Request* msg);
  static const ::tendermint::abci::RequestOfferSnapshot& offer_snapshot(const Request* msg);
  static const ::tendermint::abci::RequestLoadSnapshotChunk& load_snapshot_chunk(const Request* msg);
  static const ::tendermint::abci::RequestApplySnapshotChunk& apply_snapshot_chunk(const Request* msg);
  static const ::tendermint::abci::RequestPrepareProposal& prepare_proposal(const Request* msg);
  static const ::tendermint::abci::RequestProcessProposal& process_proposal(const Request* msg);
};

const ::tendermint::abci::RequestEcho&
Request::_Internal::echo(const Request* msg) {
  return *msg->_impl_.value_.echo_;
}
const ::tendermint::abci::RequestFlush&
Request::_Internal::flush(const Request* msg) {
  return *msg->_impl_.value_.flush_;
}
const ::tendermint::abci::RequestInfo&
Request::_Internal::info(const Request* msg) {
  return *msg->_impl_.value_.info_;
}
const ::tendermint::abci::RequestInitChain&
Request::_Internal::init_chain(const Request* msg) {
  return *msg->_impl_.value_.init_chain_;
}
const ::tendermint::abci::RequestQuery&
Request::_Internal::query(const Request* msg) {
  return *msg->_impl_.value_.query_;
}
const ::tendermint::abci::RequestBeginBlock&
Request::_Internal::begin_block(const Request* msg) {
  return *msg->_impl_.value_.begin_block_;
}
const ::tendermint::abci::RequestCheckTx&
Request::_Internal::check_tx(const Request* msg) {
  return *msg->_impl_.value_.check_tx_;
}
const ::tendermint::abci::RequestDeliverTx&
Request::_Internal::deliver_tx(const Request* msg) {
  return *msg->_impl_.value_.deliver_tx_;
}
const ::tendermint::abci::RequestEndBlock&
Request::_Internal::end_block(const Request* msg) {
  return *msg->_impl_.value_.end_block_;
}
const ::tendermint::abci::RequestCommit&
Request::_Internal::commit(const Request* msg) {
  return *msg->_impl_.value_.commit_;
}
const ::tendermint::abci::RequestListSnapshots&
Request::_Internal::list_snapshots(const Request* msg) {
  return *msg->_impl_.value_.list_snapshots_;
}
const ::tendermint::abci::RequestOfferSnapshot&
Request::_Internal::offer_snapshot(const Request* msg) {
  return *msg->_impl_.value_.offer_snapshot_;
}
const ::tendermint::abci::RequestLoadSnapshotChunk&
Request::_Internal::load_snapshot_chunk(const Request* msg) {
  return *msg->_impl_.value_.load_snapshot_chunk_;
}
const ::tendermint::abci::RequestApplySnapshotChunk&
Request::_Internal::apply_snapshot_chunk(const Request* msg) {
  return *msg->_impl_.value_.apply_snapshot_chunk_;
}
const ::tendermint::abci::RequestPrepareProposal&
Request::_Internal::prepare_proposal(const Request* msg) {
  return *msg->_impl_.value_.prepare_proposal_;
}
const ::tendermint::abci::RequestProcessProposal&
Request::_Internal::process_proposal(const Request* msg) {
  return *msg->_impl_.value_.process_proposal_;
}
void Request::set_allocated_echo(::tendermint::abci::RequestEcho* echo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (echo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(echo);
    if (message_arena != submessage_arena) {
      echo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, echo, submessage_arena);
    }
    set_has_echo();
    _impl_.value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.echo)
}
void Request::set_allocated_flush(::tendermint::abci::RequestFlush* flush) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (flush) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(flush);
    if (message_arena != submessage_arena) {
      flush = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flush, submessage_arena);
    }
    set_has_flush();
    _impl_.value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.flush)
}
void Request::set_allocated_info(::tendermint::abci::RequestInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    _impl_.value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.info)
}
void Request::set_allocated_init_chain(::tendermint::abci::RequestInitChain* init_chain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (init_chain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(init_chain);
    if (message_arena != submessage_arena) {
      init_chain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_chain, submessage_arena);
    }
    set_has_init_chain();
    _impl_.value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.init_chain)
}
void Request::set_allocated_query(::tendermint::abci::RequestQuery* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    _impl_.value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.query)
}
void Request::set_allocated_begin_block(::tendermint::abci::RequestBeginBlock* begin_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (begin_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(begin_block);
    if (message_arena != submessage_arena) {
      begin_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, begin_block, submessage_arena);
    }
    set_has_begin_block();
    _impl_.value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.begin_block)
}
void Request::set_allocated_check_tx(::tendermint::abci::RequestCheckTx* check_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (check_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(check_tx);
    if (message_arena != submessage_arena) {
      check_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_tx, submessage_arena);
    }
    set_has_check_tx();
    _impl_.value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.check_tx)
}
void Request::set_allocated_deliver_tx(::tendermint::abci::RequestDeliverTx* deliver_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (deliver_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(deliver_tx);
    if (message_arena != submessage_arena) {
      deliver_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deliver_tx, submessage_arena);
    }
    set_has_deliver_tx();
    _impl_.value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.deliver_tx)
}
void Request::set_allocated_end_block(::tendermint::abci::RequestEndBlock* end_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (end_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_block);
    if (message_arena != submessage_arena) {
      end_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_block, submessage_arena);
    }
    set_has_end_block();
    _impl_.value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.end_block)
}
void Request::set_allocated_commit(::tendermint::abci::RequestCommit* commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(commit);
    if (message_arena != submessage_arena) {
      commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    set_has_commit();
    _impl_.value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.commit)
}
void Request::set_allocated_list_snapshots(::tendermint::abci::RequestListSnapshots* list_snapshots) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (list_snapshots) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list_snapshots);
    if (message_arena != submessage_arena) {
      list_snapshots = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_snapshots, submessage_arena);
    }
    set_has_list_snapshots();
    _impl_.value_.list_snapshots_ = list_snapshots;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.list_snapshots)
}
void Request::set_allocated_offer_snapshot(::tendermint::abci::RequestOfferSnapshot* offer_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (offer_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offer_snapshot);
    if (message_arena != submessage_arena) {
      offer_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer_snapshot, submessage_arena);
    }
    set_has_offer_snapshot();
    _impl_.value_.offer_snapshot_ = offer_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.offer_snapshot)
}
void Request::set_allocated_load_snapshot_chunk(::tendermint::abci::RequestLoadSnapshotChunk* load_snapshot_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (load_snapshot_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(load_snapshot_chunk);
    if (message_arena != submessage_arena) {
      load_snapshot_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_snapshot_chunk, submessage_arena);
    }
    set_has_load_snapshot_chunk();
    _impl_.value_.load_snapshot_chunk_ = load_snapshot_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.load_snapshot_chunk)
}
void Request::set_allocated_apply_snapshot_chunk(::tendermint::abci::RequestApplySnapshotChunk* apply_snapshot_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (apply_snapshot_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(apply_snapshot_chunk);
    if (message_arena != submessage_arena) {
      apply_snapshot_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_snapshot_chunk, submessage_arena);
    }
    set_has_apply_snapshot_chunk();
    _impl_.value_.apply_snapshot_chunk_ = apply_snapshot_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.apply_snapshot_chunk)
}
void Request::set_allocated_prepare_proposal(::tendermint::abci::RequestPrepareProposal* prepare_proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (prepare_proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prepare_proposal);
    if (message_arena != submessage_arena) {
      prepare_proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prepare_proposal, submessage_arena);
    }
    set_has_prepare_proposal();
    _impl_.value_.prepare_proposal_ = prepare_proposal;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.prepare_proposal)
}
void Request::set_allocated_process_proposal(::tendermint::abci::RequestProcessProposal* process_proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (process_proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(process_proposal);
    if (message_arena != submessage_arena) {
      process_proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_proposal, submessage_arena);
    }
    set_has_process_proposal();
    _impl_.value_.process_proposal_ = process_proposal;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Request.process_proposal)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kEcho: {
      _this->_internal_mutable_echo()->::tendermint::abci::RequestEcho::MergeFrom(
          from._internal_echo());
      break;
    }
    case kFlush: {
      _this->_internal_mutable_flush()->::tendermint::abci::RequestFlush::MergeFrom(
          from._internal_flush());
      break;
    }
    case kInfo: {
      _this->_internal_mutable_info()->::tendermint::abci::RequestInfo::MergeFrom(
          from._internal_info());
      break;
    }
    case kInitChain: {
      _this->_internal_mutable_init_chain()->::tendermint::abci::RequestInitChain::MergeFrom(
          from._internal_init_chain());
      break;
    }
    case kQuery: {
      _this->_internal_mutable_query()->::tendermint::abci::RequestQuery::MergeFrom(
          from._internal_query());
      break;
    }
    case kBeginBlock: {
      _this->_internal_mutable_begin_block()->::tendermint::abci::RequestBeginBlock::MergeFrom(
          from._internal_begin_block());
      break;
    }
    case kCheckTx: {
      _this->_internal_mutable_check_tx()->::tendermint::abci::RequestCheckTx::MergeFrom(
          from._internal_check_tx());
      break;
    }
    case kDeliverTx: {
      _this->_internal_mutable_deliver_tx()->::tendermint::abci::RequestDeliverTx::MergeFrom(
          from._internal_deliver_tx());
      break;
    }
    case kEndBlock: {
      _this->_internal_mutable_end_block()->::tendermint::abci::RequestEndBlock::MergeFrom(
          from._internal_end_block());
      break;
    }
    case kCommit: {
      _this->_internal_mutable_commit()->::tendermint::abci::RequestCommit::MergeFrom(
          from._internal_commit());
      break;
    }
    case kListSnapshots: {
      _this->_internal_mutable_list_snapshots()->::tendermint::abci::RequestListSnapshots::MergeFrom(
          from._internal_list_snapshots());
      break;
    }
    case kOfferSnapshot: {
      _this->_internal_mutable_offer_snapshot()->::tendermint::abci::RequestOfferSnapshot::MergeFrom(
          from._internal_offer_snapshot());
      break;
    }
    case kLoadSnapshotChunk: {
      _this->_internal_mutable_load_snapshot_chunk()->::tendermint::abci::RequestLoadSnapshotChunk::MergeFrom(
          from._internal_load_snapshot_chunk());
      break;
    }
    case kApplySnapshotChunk: {
      _this->_internal_mutable_apply_snapshot_chunk()->::tendermint::abci::RequestApplySnapshotChunk::MergeFrom(
          from._internal_apply_snapshot_chunk());
      break;
    }
    case kPrepareProposal: {
      _this->_internal_mutable_prepare_proposal()->::tendermint::abci::RequestPrepareProposal::MergeFrom(
          from._internal_prepare_proposal());
      break;
    }
    case kProcessProposal: {
      _this->_internal_mutable_process_proposal()->::tendermint::abci::RequestProcessProposal::MergeFrom(
          from._internal_process_proposal());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.Request)
}

inline void Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:tendermint.abci.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Request::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.abci.Request)
  switch (value_case()) {
    case kEcho: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.echo_;
      }
      break;
    }
    case kFlush: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.flush_;
      }
      break;
    }
    case kInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.info_;
      }
      break;
    }
    case kInitChain: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.init_chain_;
      }
      break;
    }
    case kQuery: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.query_;
      }
      break;
    }
    case kBeginBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.begin_block_;
      }
      break;
    }
    case kCheckTx: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.check_tx_;
      }
      break;
    }
    case kDeliverTx: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.deliver_tx_;
      }
      break;
    }
    case kEndBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.end_block_;
      }
      break;
    }
    case kCommit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.commit_;
      }
      break;
    }
    case kListSnapshots: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.list_snapshots_;
      }
      break;
    }
    case kOfferSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.offer_snapshot_;
      }
      break;
    }
    case kLoadSnapshotChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.load_snapshot_chunk_;
      }
      break;
    }
    case kApplySnapshotChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.apply_snapshot_chunk_;
      }
      break;
    }
    case kPrepareProposal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.prepare_proposal_;
      }
      break;
    }
    case kProcessProposal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.process_proposal_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.RequestEcho echo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_echo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestFlush flush = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flush(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestInfo info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestInitChain init_chain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_chain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestQuery query = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestBeginBlock begin_block = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestCheckTx check_tx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestDeliverTx deliver_tx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_deliver_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestEndBlock end_block = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestCommit commit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestListSnapshots list_snapshots = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_snapshots(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestOfferSnapshot offer_snapshot = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_offer_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestLoadSnapshotChunk load_snapshot_chunk = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_snapshot_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestApplySnapshotChunk apply_snapshot_chunk = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_snapshot_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestPrepareProposal prepare_proposal = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_prepare_proposal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.RequestProcessProposal process_proposal = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_proposal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.RequestEcho echo = 1;
  if (_internal_has_echo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::echo(this),
        _Internal::echo(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestFlush flush = 2;
  if (_internal_has_flush()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::flush(this),
        _Internal::flush(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestInfo info = 3;
  if (_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestInitChain init_chain = 5;
  if (_internal_has_init_chain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::init_chain(this),
        _Internal::init_chain(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestQuery query = 6;
  if (_internal_has_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestBeginBlock begin_block = 7;
  if (_internal_has_begin_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::begin_block(this),
        _Internal::begin_block(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestCheckTx check_tx = 8;
  if (_internal_has_check_tx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::check_tx(this),
        _Internal::check_tx(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestDeliverTx deliver_tx = 9;
  if (_internal_has_deliver_tx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::deliver_tx(this),
        _Internal::deliver_tx(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestEndBlock end_block = 10;
  if (_internal_has_end_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::end_block(this),
        _Internal::end_block(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestCommit commit = 11;
  if (_internal_has_commit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::commit(this),
        _Internal::commit(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestListSnapshots list_snapshots = 12;
  if (_internal_has_list_snapshots()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::list_snapshots(this),
        _Internal::list_snapshots(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestOfferSnapshot offer_snapshot = 13;
  if (_internal_has_offer_snapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::offer_snapshot(this),
        _Internal::offer_snapshot(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestLoadSnapshotChunk load_snapshot_chunk = 14;
  if (_internal_has_load_snapshot_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::load_snapshot_chunk(this),
        _Internal::load_snapshot_chunk(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestApplySnapshotChunk apply_snapshot_chunk = 15;
  if (_internal_has_apply_snapshot_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::apply_snapshot_chunk(this),
        _Internal::apply_snapshot_chunk(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestPrepareProposal prepare_proposal = 16;
  if (_internal_has_prepare_proposal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::prepare_proposal(this),
        _Internal::prepare_proposal(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestProcessProposal process_proposal = 17;
  if (_internal_has_process_proposal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::process_proposal(this),
        _Internal::process_proposal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .tendermint.abci.RequestEcho echo = 1;
    case kEcho: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.echo_);
      break;
    }
    // .tendermint.abci.RequestFlush flush = 2;
    case kFlush: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.flush_);
      break;
    }
    // .tendermint.abci.RequestInfo info = 3;
    case kInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.info_);
      break;
    }
    // .tendermint.abci.RequestInitChain init_chain = 5;
    case kInitChain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.init_chain_);
      break;
    }
    // .tendermint.abci.RequestQuery query = 6;
    case kQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.query_);
      break;
    }
    // .tendermint.abci.RequestBeginBlock begin_block = 7;
    case kBeginBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.begin_block_);
      break;
    }
    // .tendermint.abci.RequestCheckTx check_tx = 8;
    case kCheckTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.check_tx_);
      break;
    }
    // .tendermint.abci.RequestDeliverTx deliver_tx = 9;
    case kDeliverTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.deliver_tx_);
      break;
    }
    // .tendermint.abci.RequestEndBlock end_block = 10;
    case kEndBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.end_block_);
      break;
    }
    // .tendermint.abci.RequestCommit commit = 11;
    case kCommit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.commit_);
      break;
    }
    // .tendermint.abci.RequestListSnapshots list_snapshots = 12;
    case kListSnapshots: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.list_snapshots_);
      break;
    }
    // .tendermint.abci.RequestOfferSnapshot offer_snapshot = 13;
    case kOfferSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.offer_snapshot_);
      break;
    }
    // .tendermint.abci.RequestLoadSnapshotChunk load_snapshot_chunk = 14;
    case kLoadSnapshotChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.load_snapshot_chunk_);
      break;
    }
    // .tendermint.abci.RequestApplySnapshotChunk apply_snapshot_chunk = 15;
    case kApplySnapshotChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.apply_snapshot_chunk_);
      break;
    }
    // .tendermint.abci.RequestPrepareProposal prepare_proposal = 16;
    case kPrepareProposal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.prepare_proposal_);
      break;
    }
    // .tendermint.abci.RequestProcessProposal process_proposal = 17;
    case kProcessProposal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.process_proposal_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }


void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Request*>(&to_msg);
  auto& from = static_cast<const Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kEcho: {
      _this->_internal_mutable_echo()->::tendermint::abci::RequestEcho::MergeFrom(
          from._internal_echo());
      break;
    }
    case kFlush: {
      _this->_internal_mutable_flush()->::tendermint::abci::RequestFlush::MergeFrom(
          from._internal_flush());
      break;
    }
    case kInfo: {
      _this->_internal_mutable_info()->::tendermint::abci::RequestInfo::MergeFrom(
          from._internal_info());
      break;
    }
    case kInitChain: {
      _this->_internal_mutable_init_chain()->::tendermint::abci::RequestInitChain::MergeFrom(
          from._internal_init_chain());
      break;
    }
    case kQuery: {
      _this->_internal_mutable_query()->::tendermint::abci::RequestQuery::MergeFrom(
          from._internal_query());
      break;
    }
    case kBeginBlock: {
      _this->_internal_mutable_begin_block()->::tendermint::abci::RequestBeginBlock::MergeFrom(
          from._internal_begin_block());
      break;
    }
    case kCheckTx: {
      _this->_internal_mutable_check_tx()->::tendermint::abci::RequestCheckTx::MergeFrom(
          from._internal_check_tx());
      break;
    }
    case kDeliverTx: {
      _this->_internal_mutable_deliver_tx()->::tendermint::abci::RequestDeliverTx::MergeFrom(
          from._internal_deliver_tx());
      break;
    }
    case kEndBlock: {
      _this->_internal_mutable_end_block()->::tendermint::abci::RequestEndBlock::MergeFrom(
          from._internal_end_block());
      break;
    }
    case kCommit: {
      _this->_internal_mutable_commit()->::tendermint::abci::RequestCommit::MergeFrom(
          from._internal_commit());
      break;
    }
    case kListSnapshots: {
      _this->_internal_mutable_list_snapshots()->::tendermint::abci::RequestListSnapshots::MergeFrom(
          from._internal_list_snapshots());
      break;
    }
    case kOfferSnapshot: {
      _this->_internal_mutable_offer_snapshot()->::tendermint::abci::RequestOfferSnapshot::MergeFrom(
          from._internal_offer_snapshot());
      break;
    }
    case kLoadSnapshotChunk: {
      _this->_internal_mutable_load_snapshot_chunk()->::tendermint::abci::RequestLoadSnapshotChunk::MergeFrom(
          from._internal_load_snapshot_chunk());
      break;
    }
    case kApplySnapshotChunk: {
      _this->_internal_mutable_apply_snapshot_chunk()->::tendermint::abci::RequestApplySnapshotChunk::MergeFrom(
          from._internal_apply_snapshot_chunk());
      break;
    }
    case kPrepareProposal: {
      _this->_internal_mutable_prepare_proposal()->::tendermint::abci::RequestPrepareProposal::MergeFrom(
          from._internal_prepare_proposal());
      break;
    }
    case kProcessProposal: {
      _this->_internal_mutable_process_proposal()->::tendermint::abci::RequestProcessProposal::MergeFrom(
          from._internal_process_proposal());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[0]);
}

// ===================================================================

class RequestEcho::_Internal {
 public:
};

RequestEcho::RequestEcho(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestEcho)
}
RequestEcho::RequestEcho(const RequestEcho& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestEcho* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestEcho)
}

inline void RequestEcho::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestEcho::~RequestEcho() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestEcho)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestEcho::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void RequestEcho::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestEcho::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestEcho)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestEcho::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.RequestEcho.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestEcho::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestEcho)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.RequestEcho.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestEcho)
  return target;
}

size_t RequestEcho::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestEcho)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestEcho::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestEcho::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestEcho::GetClassData() const { return &_class_data_; }


void RequestEcho::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestEcho*>(&to_msg);
  auto& from = static_cast<const RequestEcho&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestEcho)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestEcho::CopyFrom(const RequestEcho& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEcho::IsInitialized() const {
  return true;
}

void RequestEcho::InternalSwap(RequestEcho* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestEcho::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[1]);
}

// ===================================================================

class RequestFlush::_Internal {
 public:
};

RequestFlush::RequestFlush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestFlush)
}
RequestFlush::RequestFlush(const RequestFlush& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestFlush* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestFlush)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestFlush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestFlush::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestFlush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[2]);
}

// ===================================================================

class RequestInfo::_Internal {
 public:
};

RequestInfo::RequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestInfo)
}
RequestInfo::RequestInfo(const RequestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.abci_version_){}
    , decltype(_impl_.block_version_){}
    , decltype(_impl_.p2p_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.abci_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abci_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_abci_version().empty()) {
    _this->_impl_.abci_version_.Set(from._internal_abci_version(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.block_version_, &from._impl_.block_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.p2p_version_) -
    reinterpret_cast<char*>(&_impl_.block_version_)) + sizeof(_impl_.p2p_version_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestInfo)
}

inline void RequestInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.abci_version_){}
    , decltype(_impl_.block_version_){uint64_t{0u}}
    , decltype(_impl_.p2p_version_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.abci_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abci_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestInfo::~RequestInfo() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.abci_version_.Destroy();
}

void RequestInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.abci_version_.ClearToEmpty();
  ::memset(&_impl_.block_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.p2p_version_) -
      reinterpret_cast<char*>(&_impl_.block_version_)) + sizeof(_impl_.p2p_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.RequestInfo.version"));
        } else
          goto handle_unusual;
        continue;
      // uint64 block_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.block_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 p2p_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.p2p_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string abci_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_abci_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.RequestInfo.abci_version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.RequestInfo.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // uint64 block_version = 2;
  if (this->_internal_block_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_version(), target);
  }

  // uint64 p2p_version = 3;
  if (this->_internal_p2p_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_p2p_version(), target);
  }

  // string abci_version = 4;
  if (!this->_internal_abci_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_abci_version().data(), static_cast<int>(this->_internal_abci_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.RequestInfo.abci_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_abci_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestInfo)
  return target;
}

size_t RequestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string abci_version = 4;
  if (!this->_internal_abci_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_abci_version());
  }

  // uint64 block_version = 2;
  if (this->_internal_block_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_version());
  }

  // uint64 p2p_version = 3;
  if (this->_internal_p2p_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_p2p_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestInfo::GetClassData() const { return &_class_data_; }


void RequestInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestInfo*>(&to_msg);
  auto& from = static_cast<const RequestInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_abci_version().empty()) {
    _this->_internal_set_abci_version(from._internal_abci_version());
  }
  if (from._internal_block_version() != 0) {
    _this->_internal_set_block_version(from._internal_block_version());
  }
  if (from._internal_p2p_version() != 0) {
    _this->_internal_set_p2p_version(from._internal_p2p_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestInfo::CopyFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInfo::IsInitialized() const {
  return true;
}

void RequestInfo::InternalSwap(RequestInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.abci_version_, lhs_arena,
      &other->_impl_.abci_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestInfo, _impl_.p2p_version_)
      + sizeof(RequestInfo::_impl_.p2p_version_)
      - PROTOBUF_FIELD_OFFSET(RequestInfo, _impl_.block_version_)>(
          reinterpret_cast<char*>(&_impl_.block_version_),
          reinterpret_cast<char*>(&other->_impl_.block_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[3]);
}

// ===================================================================

class RequestInitChain::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const RequestInitChain* msg);
  static const ::tendermint::types::ConsensusParams& consensus_params(const RequestInitChain* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RequestInitChain::_Internal::time(const RequestInitChain* msg) {
  return *msg->_impl_.time_;
}
const ::tendermint::types::ConsensusParams&
RequestInitChain::_Internal::consensus_params(const RequestInitChain* msg) {
  return *msg->_impl_.consensus_params_;
}
void RequestInitChain::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void RequestInitChain::clear_consensus_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.consensus_params_ != nullptr) {
    delete _impl_.consensus_params_;
  }
  _impl_.consensus_params_ = nullptr;
}
RequestInitChain::RequestInitChain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestInitChain)
}
RequestInitChain::RequestInitChain(const RequestInitChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestInitChain* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.validators_){from._impl_.validators_}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.app_state_bytes_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.consensus_params_){nullptr}
    , decltype(_impl_.initial_height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    _this->_impl_.chain_id_.Set(from._internal_chain_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_state_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_state_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_state_bytes().empty()) {
    _this->_impl_.app_state_bytes_.Set(from._internal_app_state_bytes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_consensus_params()) {
    _this->_impl_.consensus_params_ = new ::tendermint::types::ConsensusParams(*from._impl_.consensus_params_);
  }
  _this->_impl_.initial_height_ = from._impl_.initial_height_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestInitChain)
}

inline void RequestInitChain::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.validators_){arena}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.app_state_bytes_){}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.consensus_params_){nullptr}
    , decltype(_impl_.initial_height_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_state_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_state_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestInitChain::~RequestInitChain() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestInitChain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestInitChain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validators_.~RepeatedPtrField();
  _impl_.chain_id_.Destroy();
  _impl_.app_state_bytes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.consensus_params_;
}

void RequestInitChain::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestInitChain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validators_.Clear();
  _impl_.chain_id_.ClearToEmpty();
  _impl_.app_state_bytes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.consensus_params_ != nullptr) {
    delete _impl_.consensus_params_;
  }
  _impl_.consensus_params_ = nullptr;
  _impl_.initial_height_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestInitChain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chain_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.RequestInitChain.chain_id"));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.ConsensusParams consensus_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.ValidatorUpdate validators = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes app_state_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_app_state_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 initial_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.initial_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestInitChain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestInitChain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // string chain_id = 2;
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.RequestInitChain.chain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chain_id(), target);
  }

  // .tendermint.types.ConsensusParams consensus_params = 3;
  if (this->_internal_has_consensus_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::consensus_params(this),
        _Internal::consensus_params(this).GetCachedSize(), target, stream);
  }

  // repeated .tendermint.abci.ValidatorUpdate validators = 4 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_validators_size()); i < n; i++) {
    const auto& repfield = this->_internal_validators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes app_state_bytes = 5;
  if (!this->_internal_app_state_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_app_state_bytes(), target);
  }

  // int64 initial_height = 6;
  if (this->_internal_initial_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_initial_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestInitChain)
  return target;
}

size_t RequestInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestInitChain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.ValidatorUpdate validators = 4 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->_impl_.validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string chain_id = 2;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // bytes app_state_bytes = 5;
  if (!this->_internal_app_state_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_state_bytes());
  }

  // .google.protobuf.Timestamp time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .tendermint.types.ConsensusParams consensus_params = 3;
  if (this->_internal_has_consensus_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consensus_params_);
  }

  // int64 initial_height = 6;
  if (this->_internal_initial_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_initial_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestInitChain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestInitChain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestInitChain::GetClassData() const { return &_class_data_; }


void RequestInitChain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestInitChain*>(&to_msg);
  auto& from = static_cast<const RequestInitChain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestInitChain)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.validators_.MergeFrom(from._impl_.validators_);
  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (!from._internal_app_state_bytes().empty()) {
    _this->_internal_set_app_state_bytes(from._internal_app_state_bytes());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_consensus_params()) {
    _this->_internal_mutable_consensus_params()->::tendermint::types::ConsensusParams::MergeFrom(
        from._internal_consensus_params());
  }
  if (from._internal_initial_height() != 0) {
    _this->_internal_set_initial_height(from._internal_initial_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestInitChain::CopyFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInitChain::IsInitialized() const {
  return true;
}

void RequestInitChain::InternalSwap(RequestInitChain* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.validators_.InternalSwap(&other->_impl_.validators_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chain_id_, lhs_arena,
      &other->_impl_.chain_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_state_bytes_, lhs_arena,
      &other->_impl_.app_state_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestInitChain, _impl_.initial_height_)
      + sizeof(RequestInitChain::_impl_.initial_height_)
      - PROTOBUF_FIELD_OFFSET(RequestInitChain, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestInitChain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[4]);
}

// ===================================================================

class RequestQuery::_Internal {
 public:
};

RequestQuery::RequestQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestQuery)
}
RequestQuery::RequestQuery(const RequestQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.prove_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prove_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.prove_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestQuery)
}

inline void RequestQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.height_){int64_t{0}}
    , decltype(_impl_.prove_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestQuery::~RequestQuery() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.path_.Destroy();
}

void RequestQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.prove_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.prove_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.RequestQuery.path"));
        } else
          goto handle_unusual;
        continue;
      // int64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool prove = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.prove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.RequestQuery.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // int64 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_height(), target);
  }

  // bool prove = 4;
  if (this->_internal_prove() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_prove(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestQuery)
  return target;
}

size_t RequestQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int64 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // bool prove = 4;
  if (this->_internal_prove() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestQuery::GetClassData() const { return &_class_data_; }


void RequestQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestQuery*>(&to_msg);
  auto& from = static_cast<const RequestQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_prove() != 0) {
    _this->_internal_set_prove(from._internal_prove());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestQuery::CopyFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuery::IsInitialized() const {
  return true;
}

void RequestQuery::InternalSwap(RequestQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestQuery, _impl_.prove_)
      + sizeof(RequestQuery::_impl_.prove_)
      - PROTOBUF_FIELD_OFFSET(RequestQuery, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[5]);
}

// ===================================================================

class RequestBeginBlock::_Internal {
 public:
  static const ::tendermint::types::Header& header(const RequestBeginBlock* msg);
  static const ::tendermint::abci::CommitInfo& last_commit_info(const RequestBeginBlock* msg);
};

const ::tendermint::types::Header&
RequestBeginBlock::_Internal::header(const RequestBeginBlock* msg) {
  return *msg->_impl_.header_;
}
const ::tendermint::abci::CommitInfo&
RequestBeginBlock::_Internal::last_commit_info(const RequestBeginBlock* msg) {
  return *msg->_impl_.last_commit_info_;
}
void RequestBeginBlock::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
RequestBeginBlock::RequestBeginBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestBeginBlock)
}
RequestBeginBlock::RequestBeginBlock(const RequestBeginBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestBeginBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.byzantine_validators_){from._impl_.byzantine_validators_}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.last_commit_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::tendermint::types::Header(*from._impl_.header_);
  }
  if (from._internal_has_last_commit_info()) {
    _this->_impl_.last_commit_info_ = new ::tendermint::abci::CommitInfo(*from._impl_.last_commit_info_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestBeginBlock)
}

inline void RequestBeginBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.byzantine_validators_){arena}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.last_commit_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestBeginBlock::~RequestBeginBlock() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestBeginBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestBeginBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.byzantine_validators_.~RepeatedPtrField();
  _impl_.hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.last_commit_info_;
}

void RequestBeginBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestBeginBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.byzantine_validators_.Clear();
  _impl_.hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_commit_info_ != nullptr) {
    delete _impl_.last_commit_info_;
  }
  _impl_.last_commit_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBeginBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.Header header = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.CommitInfo last_commit_info = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_commit_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.Misbehavior byzantine_validators = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_byzantine_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestBeginBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestBeginBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // .tendermint.types.Header header = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.CommitInfo last_commit_info = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_last_commit_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::last_commit_info(this),
        _Internal::last_commit_info(this).GetCachedSize(), target, stream);
  }

  // repeated .tendermint.abci.Misbehavior byzantine_validators = 4 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_byzantine_validators_size()); i < n; i++) {
    const auto& repfield = this->_internal_byzantine_validators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestBeginBlock)
  return target;
}

size_t RequestBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestBeginBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.Misbehavior byzantine_validators = 4 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_byzantine_validators_size();
  for (const auto& msg : this->_impl_.byzantine_validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // .tendermint.types.Header header = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .tendermint.abci.CommitInfo last_commit_info = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_last_commit_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_commit_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestBeginBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestBeginBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestBeginBlock::GetClassData() const { return &_class_data_; }


void RequestBeginBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestBeginBlock*>(&to_msg);
  auto& from = static_cast<const RequestBeginBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestBeginBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.byzantine_validators_.MergeFrom(from._impl_.byzantine_validators_);
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::tendermint::types::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_last_commit_info()) {
    _this->_internal_mutable_last_commit_info()->::tendermint::abci::CommitInfo::MergeFrom(
        from._internal_last_commit_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestBeginBlock::CopyFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBeginBlock::IsInitialized() const {
  return true;
}

void RequestBeginBlock::InternalSwap(RequestBeginBlock* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.byzantine_validators_.InternalSwap(&other->_impl_.byzantine_validators_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestBeginBlock, _impl_.last_commit_info_)
      + sizeof(RequestBeginBlock::_impl_.last_commit_info_)
      - PROTOBUF_FIELD_OFFSET(RequestBeginBlock, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBeginBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[6]);
}

// ===================================================================

class RequestCheckTx::_Internal {
 public:
};

RequestCheckTx::RequestCheckTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestCheckTx)
}
RequestCheckTx::RequestCheckTx(const RequestCheckTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestCheckTx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestCheckTx)
}

inline void RequestCheckTx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestCheckTx::~RequestCheckTx() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestCheckTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestCheckTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_.Destroy();
}

void RequestCheckTx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestCheckTx::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestCheckTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestCheckTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.CheckTxType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::abci::CheckTxType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestCheckTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestCheckTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx(), target);
  }

  // .tendermint.abci.CheckTxType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestCheckTx)
  return target;
}

size_t RequestCheckTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestCheckTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 1;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  // .tendermint.abci.CheckTxType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestCheckTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestCheckTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestCheckTx::GetClassData() const { return &_class_data_; }


void RequestCheckTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestCheckTx*>(&to_msg);
  auto& from = static_cast<const RequestCheckTx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestCheckTx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestCheckTx::CopyFrom(const RequestCheckTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCheckTx::IsInitialized() const {
  return true;
}

void RequestCheckTx::InternalSwap(RequestCheckTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestCheckTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[7]);
}

// ===================================================================

class RequestDeliverTx::_Internal {
 public:
};

RequestDeliverTx::RequestDeliverTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestDeliverTx)
}
RequestDeliverTx::RequestDeliverTx(const RequestDeliverTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestDeliverTx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestDeliverTx)
}

inline void RequestDeliverTx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestDeliverTx::~RequestDeliverTx() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestDeliverTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestDeliverTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_.Destroy();
}

void RequestDeliverTx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestDeliverTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestDeliverTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestDeliverTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestDeliverTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestDeliverTx)
  return target;
}

size_t RequestDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestDeliverTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 1;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestDeliverTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestDeliverTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestDeliverTx::GetClassData() const { return &_class_data_; }


void RequestDeliverTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestDeliverTx*>(&to_msg);
  auto& from = static_cast<const RequestDeliverTx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestDeliverTx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestDeliverTx::CopyFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDeliverTx::IsInitialized() const {
  return true;
}

void RequestDeliverTx::InternalSwap(RequestDeliverTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestDeliverTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[8]);
}

// ===================================================================

class RequestEndBlock::_Internal {
 public:
};

RequestEndBlock::RequestEndBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestEndBlock)
}
RequestEndBlock::RequestEndBlock(const RequestEndBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestEndBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.height_ = from._impl_.height_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestEndBlock)
}

inline void RequestEndBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.height_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestEndBlock::~RequestEndBlock() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestEndBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestEndBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestEndBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestEndBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestEndBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.height_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestEndBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestEndBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestEndBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestEndBlock)
  return target;
}

size_t RequestEndBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestEndBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestEndBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestEndBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestEndBlock::GetClassData() const { return &_class_data_; }


void RequestEndBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestEndBlock*>(&to_msg);
  auto& from = static_cast<const RequestEndBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestEndBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestEndBlock::CopyFrom(const RequestEndBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEndBlock::IsInitialized() const {
  return true;
}

void RequestEndBlock::InternalSwap(RequestEndBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.height_, other->_impl_.height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestEndBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[9]);
}

// ===================================================================

class RequestCommit::_Internal {
 public:
};

RequestCommit::RequestCommit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestCommit)
}
RequestCommit::RequestCommit(const RequestCommit& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestCommit* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestCommit)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestCommit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestCommit::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestCommit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[10]);
}

// ===================================================================

class RequestListSnapshots::_Internal {
 public:
};

RequestListSnapshots::RequestListSnapshots(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestListSnapshots)
}
RequestListSnapshots::RequestListSnapshots(const RequestListSnapshots& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RequestListSnapshots* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestListSnapshots)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestListSnapshots::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestListSnapshots::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RequestListSnapshots::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[11]);
}

// ===================================================================

class RequestOfferSnapshot::_Internal {
 public:
  static const ::tendermint::abci::Snapshot& snapshot(const RequestOfferSnapshot* msg);
};

const ::tendermint::abci::Snapshot&
RequestOfferSnapshot::_Internal::snapshot(const RequestOfferSnapshot* msg) {
  return *msg->_impl_.snapshot_;
}
RequestOfferSnapshot::RequestOfferSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestOfferSnapshot)
}
RequestOfferSnapshot::RequestOfferSnapshot(const RequestOfferSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestOfferSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_hash_){}
    , decltype(_impl_.snapshot_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_hash().empty()) {
    _this->_impl_.app_hash_.Set(from._internal_app_hash(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_snapshot()) {
    _this->_impl_.snapshot_ = new ::tendermint::abci::Snapshot(*from._impl_.snapshot_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestOfferSnapshot)
}

inline void RequestOfferSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_hash_){}
    , decltype(_impl_.snapshot_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestOfferSnapshot::~RequestOfferSnapshot() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestOfferSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestOfferSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.snapshot_;
}

void RequestOfferSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestOfferSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestOfferSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.snapshot_ != nullptr) {
    delete _impl_.snapshot_;
  }
  _impl_.snapshot_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestOfferSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.Snapshot snapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes app_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestOfferSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestOfferSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.Snapshot snapshot = 1;
  if (this->_internal_has_snapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::snapshot(this),
        _Internal::snapshot(this).GetCachedSize(), target, stream);
  }

  // bytes app_hash = 2;
  if (!this->_internal_app_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_app_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestOfferSnapshot)
  return target;
}

size_t RequestOfferSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestOfferSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes app_hash = 2;
  if (!this->_internal_app_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_hash());
  }

  // .tendermint.abci.Snapshot snapshot = 1;
  if (this->_internal_has_snapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.snapshot_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestOfferSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestOfferSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestOfferSnapshot::GetClassData() const { return &_class_data_; }


void RequestOfferSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestOfferSnapshot*>(&to_msg);
  auto& from = static_cast<const RequestOfferSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestOfferSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_hash().empty()) {
    _this->_internal_set_app_hash(from._internal_app_hash());
  }
  if (from._internal_has_snapshot()) {
    _this->_internal_mutable_snapshot()->::tendermint::abci::Snapshot::MergeFrom(
        from._internal_snapshot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestOfferSnapshot::CopyFrom(const RequestOfferSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestOfferSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOfferSnapshot::IsInitialized() const {
  return true;
}

void RequestOfferSnapshot::InternalSwap(RequestOfferSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_hash_, lhs_arena,
      &other->_impl_.app_hash_, rhs_arena
  );
  swap(_impl_.snapshot_, other->_impl_.snapshot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestOfferSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[12]);
}

// ===================================================================

class RequestLoadSnapshotChunk::_Internal {
 public:
};

RequestLoadSnapshotChunk::RequestLoadSnapshotChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestLoadSnapshotChunk)
}
RequestLoadSnapshotChunk::RequestLoadSnapshotChunk(const RequestLoadSnapshotChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestLoadSnapshotChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.height_){}
    , decltype(_impl_.format_){}
    , decltype(_impl_.chunk_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chunk_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.chunk_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestLoadSnapshotChunk)
}

inline void RequestLoadSnapshotChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.height_){uint64_t{0u}}
    , decltype(_impl_.format_){0u}
    , decltype(_impl_.chunk_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestLoadSnapshotChunk::~RequestLoadSnapshotChunk() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestLoadSnapshotChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestLoadSnapshotChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestLoadSnapshotChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestLoadSnapshotChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestLoadSnapshotChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.chunk_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.chunk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestLoadSnapshotChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestLoadSnapshotChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestLoadSnapshotChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // uint32 format = 2;
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_format(), target);
  }

  // uint32 chunk = 3;
  if (this->_internal_chunk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestLoadSnapshotChunk)
  return target;
}

size_t RequestLoadSnapshotChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestLoadSnapshotChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
  }

  // uint32 format = 2;
  if (this->_internal_format() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_format());
  }

  // uint32 chunk = 3;
  if (this->_internal_chunk() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chunk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestLoadSnapshotChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestLoadSnapshotChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestLoadSnapshotChunk::GetClassData() const { return &_class_data_; }


void RequestLoadSnapshotChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestLoadSnapshotChunk*>(&to_msg);
  auto& from = static_cast<const RequestLoadSnapshotChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestLoadSnapshotChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_format() != 0) {
    _this->_internal_set_format(from._internal_format());
  }
  if (from._internal_chunk() != 0) {
    _this->_internal_set_chunk(from._internal_chunk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestLoadSnapshotChunk::CopyFrom(const RequestLoadSnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestLoadSnapshotChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLoadSnapshotChunk::IsInitialized() const {
  return true;
}

void RequestLoadSnapshotChunk::InternalSwap(RequestLoadSnapshotChunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestLoadSnapshotChunk, _impl_.chunk_)
      + sizeof(RequestLoadSnapshotChunk::_impl_.chunk_)
      - PROTOBUF_FIELD_OFFSET(RequestLoadSnapshotChunk, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestLoadSnapshotChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[13]);
}

// ===================================================================

class RequestApplySnapshotChunk::_Internal {
 public:
};

RequestApplySnapshotChunk::RequestApplySnapshotChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestApplySnapshotChunk)
}
RequestApplySnapshotChunk::RequestApplySnapshotChunk(const RequestApplySnapshotChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestApplySnapshotChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_){}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chunk().empty()) {
    _this->_impl_.chunk_.Set(from._internal_chunk(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestApplySnapshotChunk)
}

inline void RequestApplySnapshotChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_){}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestApplySnapshotChunk::~RequestApplySnapshotChunk() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestApplySnapshotChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestApplySnapshotChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunk_.Destroy();
  _impl_.sender_.Destroy();
}

void RequestApplySnapshotChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestApplySnapshotChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestApplySnapshotChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunk_.ClearToEmpty();
  _impl_.sender_.ClearToEmpty();
  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestApplySnapshotChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.RequestApplySnapshotChunk.sender"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestApplySnapshotChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestApplySnapshotChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // bytes chunk = 2;
  if (!this->_internal_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chunk(), target);
  }

  // string sender = 3;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.RequestApplySnapshotChunk.sender");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestApplySnapshotChunk)
  return target;
}

size_t RequestApplySnapshotChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestApplySnapshotChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 2;
  if (!this->_internal_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk());
  }

  // string sender = 3;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestApplySnapshotChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestApplySnapshotChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestApplySnapshotChunk::GetClassData() const { return &_class_data_; }


void RequestApplySnapshotChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestApplySnapshotChunk*>(&to_msg);
  auto& from = static_cast<const RequestApplySnapshotChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestApplySnapshotChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chunk().empty()) {
    _this->_internal_set_chunk(from._internal_chunk());
  }
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestApplySnapshotChunk::CopyFrom(const RequestApplySnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestApplySnapshotChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestApplySnapshotChunk::IsInitialized() const {
  return true;
}

void RequestApplySnapshotChunk::InternalSwap(RequestApplySnapshotChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chunk_, lhs_arena,
      &other->_impl_.chunk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestApplySnapshotChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[14]);
}

// ===================================================================

class RequestPrepareProposal::_Internal {
 public:
  static const ::tendermint::abci::ExtendedCommitInfo& local_last_commit(const RequestPrepareProposal* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const RequestPrepareProposal* msg);
};

const ::tendermint::abci::ExtendedCommitInfo&
RequestPrepareProposal::_Internal::local_last_commit(const RequestPrepareProposal* msg) {
  return *msg->_impl_.local_last_commit_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RequestPrepareProposal::_Internal::time(const RequestPrepareProposal* msg) {
  return *msg->_impl_.time_;
}
void RequestPrepareProposal::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
RequestPrepareProposal::RequestPrepareProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestPrepareProposal)
}
RequestPrepareProposal::RequestPrepareProposal(const RequestPrepareProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestPrepareProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , decltype(_impl_.misbehavior_){from._impl_.misbehavior_}
    , decltype(_impl_.next_validators_hash_){}
    , decltype(_impl_.proposer_address_){}
    , decltype(_impl_.local_last_commit_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.max_tx_bytes_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_validators_hash().empty()) {
    _this->_impl_.next_validators_hash_.Set(from._internal_next_validators_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.proposer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proposer_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proposer_address().empty()) {
    _this->_impl_.proposer_address_.Set(from._internal_proposer_address(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_local_last_commit()) {
    _this->_impl_.local_last_commit_ = new ::tendermint::abci::ExtendedCommitInfo(*from._impl_.local_last_commit_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.max_tx_bytes_, &from._impl_.max_tx_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.max_tx_bytes_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestPrepareProposal)
}

inline void RequestPrepareProposal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , decltype(_impl_.misbehavior_){arena}
    , decltype(_impl_.next_validators_hash_){}
    , decltype(_impl_.proposer_address_){}
    , decltype(_impl_.local_last_commit_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.max_tx_bytes_){int64_t{0}}
    , decltype(_impl_.height_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proposer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proposer_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestPrepareProposal::~RequestPrepareProposal() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestPrepareProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestPrepareProposal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txs_.~RepeatedPtrField();
  _impl_.misbehavior_.~RepeatedPtrField();
  _impl_.next_validators_hash_.Destroy();
  _impl_.proposer_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.local_last_commit_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void RequestPrepareProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestPrepareProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestPrepareProposal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txs_.Clear();
  _impl_.misbehavior_.Clear();
  _impl_.next_validators_hash_.ClearToEmpty();
  _impl_.proposer_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.local_last_commit_ != nullptr) {
    delete _impl_.local_last_commit_;
  }
  _impl_.local_last_commit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.max_tx_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.max_tx_bytes_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestPrepareProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 max_tx_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.max_tx_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes txs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ExtendedCommitInfo local_last_commit = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_last_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.Misbehavior misbehavior = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_misbehavior(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes next_validators_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_next_validators_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes proposer_address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_proposer_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestPrepareProposal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestPrepareProposal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_tx_bytes = 1;
  if (this->_internal_max_tx_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_tx_bytes(), target);
  }

  // repeated bytes txs = 2;
  for (int i = 0, n = this->_internal_txs_size(); i < n; i++) {
    const auto& s = this->_internal_txs(i);
    target = stream->WriteBytes(2, s, target);
  }

  // .tendermint.abci.ExtendedCommitInfo local_last_commit = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_local_last_commit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::local_last_commit(this),
        _Internal::local_last_commit(this).GetCachedSize(), target, stream);
  }

  // repeated .tendermint.abci.Misbehavior misbehavior = 4 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_misbehavior_size()); i < n; i++) {
    const auto& repfield = this->_internal_misbehavior(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 height = 5;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_height(), target);
  }

  // .google.protobuf.Timestamp time = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // bytes next_validators_hash = 7;
  if (!this->_internal_next_validators_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_next_validators_hash(), target);
  }

  // bytes proposer_address = 8;
  if (!this->_internal_proposer_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_proposer_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestPrepareProposal)
  return target;
}

size_t RequestPrepareProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestPrepareProposal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes txs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.txs_.size());
  for (int i = 0, n = _impl_.txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.txs_.Get(i));
  }

  // repeated .tendermint.abci.Misbehavior misbehavior = 4 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_misbehavior_size();
  for (const auto& msg : this->_impl_.misbehavior_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes next_validators_hash = 7;
  if (!this->_internal_next_validators_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_next_validators_hash());
  }

  // bytes proposer_address = 8;
  if (!this->_internal_proposer_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proposer_address());
  }

  // .tendermint.abci.ExtendedCommitInfo local_last_commit = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_local_last_commit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_last_commit_);
  }

  // .google.protobuf.Timestamp time = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // int64 max_tx_bytes = 1;
  if (this->_internal_max_tx_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_tx_bytes());
  }

  // int64 height = 5;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestPrepareProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestPrepareProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestPrepareProposal::GetClassData() const { return &_class_data_; }


void RequestPrepareProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestPrepareProposal*>(&to_msg);
  auto& from = static_cast<const RequestPrepareProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestPrepareProposal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.txs_.MergeFrom(from._impl_.txs_);
  _this->_impl_.misbehavior_.MergeFrom(from._impl_.misbehavior_);
  if (!from._internal_next_validators_hash().empty()) {
    _this->_internal_set_next_validators_hash(from._internal_next_validators_hash());
  }
  if (!from._internal_proposer_address().empty()) {
    _this->_internal_set_proposer_address(from._internal_proposer_address());
  }
  if (from._internal_has_local_last_commit()) {
    _this->_internal_mutable_local_last_commit()->::tendermint::abci::ExtendedCommitInfo::MergeFrom(
        from._internal_local_last_commit());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_max_tx_bytes() != 0) {
    _this->_internal_set_max_tx_bytes(from._internal_max_tx_bytes());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestPrepareProposal::CopyFrom(const RequestPrepareProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestPrepareProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPrepareProposal::IsInitialized() const {
  return true;
}

void RequestPrepareProposal::InternalSwap(RequestPrepareProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.txs_.InternalSwap(&other->_impl_.txs_);
  _impl_.misbehavior_.InternalSwap(&other->_impl_.misbehavior_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_validators_hash_, lhs_arena,
      &other->_impl_.next_validators_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proposer_address_, lhs_arena,
      &other->_impl_.proposer_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestPrepareProposal, _impl_.height_)
      + sizeof(RequestPrepareProposal::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(RequestPrepareProposal, _impl_.local_last_commit_)>(
          reinterpret_cast<char*>(&_impl_.local_last_commit_),
          reinterpret_cast<char*>(&other->_impl_.local_last_commit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestPrepareProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[15]);
}

// ===================================================================

class RequestProcessProposal::_Internal {
 public:
  static const ::tendermint::abci::CommitInfo& proposed_last_commit(const RequestProcessProposal* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const RequestProcessProposal* msg);
};

const ::tendermint::abci::CommitInfo&
RequestProcessProposal::_Internal::proposed_last_commit(const RequestProcessProposal* msg) {
  return *msg->_impl_.proposed_last_commit_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RequestProcessProposal::_Internal::time(const RequestProcessProposal* msg) {
  return *msg->_impl_.time_;
}
void RequestProcessProposal::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
RequestProcessProposal::RequestProcessProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.RequestProcessProposal)
}
RequestProcessProposal::RequestProcessProposal(const RequestProcessProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestProcessProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , decltype(_impl_.misbehavior_){from._impl_.misbehavior_}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.next_validators_hash_){}
    , decltype(_impl_.proposer_address_){}
    , decltype(_impl_.proposed_last_commit_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.next_validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_validators_hash().empty()) {
    _this->_impl_.next_validators_hash_.Set(from._internal_next_validators_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.proposer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proposer_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proposer_address().empty()) {
    _this->_impl_.proposer_address_.Set(from._internal_proposer_address(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_proposed_last_commit()) {
    _this->_impl_.proposed_last_commit_ = new ::tendermint::abci::CommitInfo(*from._impl_.proposed_last_commit_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  _this->_impl_.height_ = from._impl_.height_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.RequestProcessProposal)
}

inline void RequestProcessProposal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , decltype(_impl_.misbehavior_){arena}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.next_validators_hash_){}
    , decltype(_impl_.proposer_address_){}
    , decltype(_impl_.proposed_last_commit_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.height_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.next_validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proposer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proposer_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestProcessProposal::~RequestProcessProposal() {
  // @@protoc_insertion_point(destructor:tendermint.abci.RequestProcessProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestProcessProposal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txs_.~RepeatedPtrField();
  _impl_.misbehavior_.~RepeatedPtrField();
  _impl_.hash_.Destroy();
  _impl_.next_validators_hash_.Destroy();
  _impl_.proposer_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proposed_last_commit_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void RequestProcessProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestProcessProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.RequestProcessProposal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txs_.Clear();
  _impl_.misbehavior_.Clear();
  _impl_.hash_.ClearToEmpty();
  _impl_.next_validators_hash_.ClearToEmpty();
  _impl_.proposer_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.proposed_last_commit_ != nullptr) {
    delete _impl_.proposed_last_commit_;
  }
  _impl_.proposed_last_commit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  _impl_.height_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestProcessProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.CommitInfo proposed_last_commit = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposed_last_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.Misbehavior misbehavior = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_misbehavior(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes next_validators_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_next_validators_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes proposer_address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_proposer_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestProcessProposal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.RequestProcessProposal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes txs = 1;
  for (int i = 0, n = this->_internal_txs_size(); i < n; i++) {
    const auto& s = this->_internal_txs(i);
    target = stream->WriteBytes(1, s, target);
  }

  // .tendermint.abci.CommitInfo proposed_last_commit = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_proposed_last_commit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::proposed_last_commit(this),
        _Internal::proposed_last_commit(this).GetCachedSize(), target, stream);
  }

  // repeated .tendermint.abci.Misbehavior misbehavior = 3 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_misbehavior_size()); i < n; i++) {
    const auto& repfield = this->_internal_misbehavior(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes hash = 4;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hash(), target);
  }

  // int64 height = 5;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_height(), target);
  }

  // .google.protobuf.Timestamp time = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // bytes next_validators_hash = 7;
  if (!this->_internal_next_validators_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_next_validators_hash(), target);
  }

  // bytes proposer_address = 8;
  if (!this->_internal_proposer_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_proposer_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.RequestProcessProposal)
  return target;
}

size_t RequestProcessProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.RequestProcessProposal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes txs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.txs_.size());
  for (int i = 0, n = _impl_.txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.txs_.Get(i));
  }

  // repeated .tendermint.abci.Misbehavior misbehavior = 3 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_misbehavior_size();
  for (const auto& msg : this->_impl_.misbehavior_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes hash = 4;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes next_validators_hash = 7;
  if (!this->_internal_next_validators_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_next_validators_hash());
  }

  // bytes proposer_address = 8;
  if (!this->_internal_proposer_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proposer_address());
  }

  // .tendermint.abci.CommitInfo proposed_last_commit = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_proposed_last_commit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proposed_last_commit_);
  }

  // .google.protobuf.Timestamp time = 6 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // int64 height = 5;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestProcessProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestProcessProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestProcessProposal::GetClassData() const { return &_class_data_; }


void RequestProcessProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestProcessProposal*>(&to_msg);
  auto& from = static_cast<const RequestProcessProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.RequestProcessProposal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.txs_.MergeFrom(from._impl_.txs_);
  _this->_impl_.misbehavior_.MergeFrom(from._impl_.misbehavior_);
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_next_validators_hash().empty()) {
    _this->_internal_set_next_validators_hash(from._internal_next_validators_hash());
  }
  if (!from._internal_proposer_address().empty()) {
    _this->_internal_set_proposer_address(from._internal_proposer_address());
  }
  if (from._internal_has_proposed_last_commit()) {
    _this->_internal_mutable_proposed_last_commit()->::tendermint::abci::CommitInfo::MergeFrom(
        from._internal_proposed_last_commit());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestProcessProposal::CopyFrom(const RequestProcessProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.RequestProcessProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestProcessProposal::IsInitialized() const {
  return true;
}

void RequestProcessProposal::InternalSwap(RequestProcessProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.txs_.InternalSwap(&other->_impl_.txs_);
  _impl_.misbehavior_.InternalSwap(&other->_impl_.misbehavior_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_validators_hash_, lhs_arena,
      &other->_impl_.next_validators_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proposer_address_, lhs_arena,
      &other->_impl_.proposer_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestProcessProposal, _impl_.height_)
      + sizeof(RequestProcessProposal::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(RequestProcessProposal, _impl_.proposed_last_commit_)>(
          reinterpret_cast<char*>(&_impl_.proposed_last_commit_),
          reinterpret_cast<char*>(&other->_impl_.proposed_last_commit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestProcessProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[16]);
}

// ===================================================================

class Response::_Internal {
 public:
  static const ::tendermint::abci::ResponseException& exception(const Response* msg);
  static const ::tendermint::abci::ResponseEcho& echo(const Response* msg);
  static const ::tendermint::abci::ResponseFlush& flush(const Response* msg);
  static const ::tendermint::abci::ResponseInfo& info(const Response* msg);
  static const ::tendermint::abci::ResponseInitChain& init_chain(const Response* msg);
  static const ::tendermint::abci::ResponseQuery& query(const Response* msg);
  static const ::tendermint::abci::ResponseBeginBlock& begin_block(const Response* msg);
  static const ::tendermint::abci::ResponseCheckTx& check_tx(const Response* msg);
  static const ::tendermint::abci::ResponseDeliverTx& deliver_tx(const Response* msg);
  static const ::tendermint::abci::ResponseEndBlock& end_block(const Response* msg);
  static const ::tendermint::abci::ResponseCommit& commit(const Response* msg);
  static const ::tendermint::abci::ResponseListSnapshots& list_snapshots(const Response* msg);
  static const ::tendermint::abci::ResponseOfferSnapshot& offer_snapshot(const Response* msg);
  static const ::tendermint::abci::ResponseLoadSnapshotChunk& load_snapshot_chunk(const Response* msg);
  static const ::tendermint::abci::ResponseApplySnapshotChunk& apply_snapshot_chunk(const Response* msg);
  static const ::tendermint::abci::ResponsePrepareProposal& prepare_proposal(const Response* msg);
  static const ::tendermint::abci::ResponseProcessProposal& process_proposal(const Response* msg);
};

const ::tendermint::abci::ResponseException&
Response::_Internal::exception(const Response* msg) {
  return *msg->_impl_.value_.exception_;
}
const ::tendermint::abci::ResponseEcho&
Response::_Internal::echo(const Response* msg) {
  return *msg->_impl_.value_.echo_;
}
const ::tendermint::abci::ResponseFlush&
Response::_Internal::flush(const Response* msg) {
  return *msg->_impl_.value_.flush_;
}
const ::tendermint::abci::ResponseInfo&
Response::_Internal::info(const Response* msg) {
  return *msg->_impl_.value_.info_;
}
const ::tendermint::abci::ResponseInitChain&
Response::_Internal::init_chain(const Response* msg) {
  return *msg->_impl_.value_.init_chain_;
}
const ::tendermint::abci::ResponseQuery&
Response::_Internal::query(const Response* msg) {
  return *msg->_impl_.value_.query_;
}
const ::tendermint::abci::ResponseBeginBlock&
Response::_Internal::begin_block(const Response* msg) {
  return *msg->_impl_.value_.begin_block_;
}
const ::tendermint::abci::ResponseCheckTx&
Response::_Internal::check_tx(const Response* msg) {
  return *msg->_impl_.value_.check_tx_;
}
const ::tendermint::abci::ResponseDeliverTx&
Response::_Internal::deliver_tx(const Response* msg) {
  return *msg->_impl_.value_.deliver_tx_;
}
const ::tendermint::abci::ResponseEndBlock&
Response::_Internal::end_block(const Response* msg) {
  return *msg->_impl_.value_.end_block_;
}
const ::tendermint::abci::ResponseCommit&
Response::_Internal::commit(const Response* msg) {
  return *msg->_impl_.value_.commit_;
}
const ::tendermint::abci::ResponseListSnapshots&
Response::_Internal::list_snapshots(const Response* msg) {
  return *msg->_impl_.value_.list_snapshots_;
}
const ::tendermint::abci::ResponseOfferSnapshot&
Response::_Internal::offer_snapshot(const Response* msg) {
  return *msg->_impl_.value_.offer_snapshot_;
}
const ::tendermint::abci::ResponseLoadSnapshotChunk&
Response::_Internal::load_snapshot_chunk(const Response* msg) {
  return *msg->_impl_.value_.load_snapshot_chunk_;
}
const ::tendermint::abci::ResponseApplySnapshotChunk&
Response::_Internal::apply_snapshot_chunk(const Response* msg) {
  return *msg->_impl_.value_.apply_snapshot_chunk_;
}
const ::tendermint::abci::ResponsePrepareProposal&
Response::_Internal::prepare_proposal(const Response* msg) {
  return *msg->_impl_.value_.prepare_proposal_;
}
const ::tendermint::abci::ResponseProcessProposal&
Response::_Internal::process_proposal(const Response* msg) {
  return *msg->_impl_.value_.process_proposal_;
}
void Response::set_allocated_exception(::tendermint::abci::ResponseException* exception) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (exception) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(exception);
    if (message_arena != submessage_arena) {
      exception = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    set_has_exception();
    _impl_.value_.exception_ = exception;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.exception)
}
void Response::set_allocated_echo(::tendermint::abci::ResponseEcho* echo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (echo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(echo);
    if (message_arena != submessage_arena) {
      echo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, echo, submessage_arena);
    }
    set_has_echo();
    _impl_.value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.echo)
}
void Response::set_allocated_flush(::tendermint::abci::ResponseFlush* flush) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (flush) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(flush);
    if (message_arena != submessage_arena) {
      flush = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flush, submessage_arena);
    }
    set_has_flush();
    _impl_.value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.flush)
}
void Response::set_allocated_info(::tendermint::abci::ResponseInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    _impl_.value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.info)
}
void Response::set_allocated_init_chain(::tendermint::abci::ResponseInitChain* init_chain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (init_chain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(init_chain);
    if (message_arena != submessage_arena) {
      init_chain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_chain, submessage_arena);
    }
    set_has_init_chain();
    _impl_.value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.init_chain)
}
void Response::set_allocated_query(::tendermint::abci::ResponseQuery* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    _impl_.value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.query)
}
void Response::set_allocated_begin_block(::tendermint::abci::ResponseBeginBlock* begin_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (begin_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(begin_block);
    if (message_arena != submessage_arena) {
      begin_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, begin_block, submessage_arena);
    }
    set_has_begin_block();
    _impl_.value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.begin_block)
}
void Response::set_allocated_check_tx(::tendermint::abci::ResponseCheckTx* check_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (check_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(check_tx);
    if (message_arena != submessage_arena) {
      check_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_tx, submessage_arena);
    }
    set_has_check_tx();
    _impl_.value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.check_tx)
}
void Response::set_allocated_deliver_tx(::tendermint::abci::ResponseDeliverTx* deliver_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (deliver_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(deliver_tx);
    if (message_arena != submessage_arena) {
      deliver_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deliver_tx, submessage_arena);
    }
    set_has_deliver_tx();
    _impl_.value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.deliver_tx)
}
void Response::set_allocated_end_block(::tendermint::abci::ResponseEndBlock* end_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (end_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_block);
    if (message_arena != submessage_arena) {
      end_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_block, submessage_arena);
    }
    set_has_end_block();
    _impl_.value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.end_block)
}
void Response::set_allocated_commit(::tendermint::abci::ResponseCommit* commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(commit);
    if (message_arena != submessage_arena) {
      commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    set_has_commit();
    _impl_.value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.commit)
}
void Response::set_allocated_list_snapshots(::tendermint::abci::ResponseListSnapshots* list_snapshots) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (list_snapshots) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list_snapshots);
    if (message_arena != submessage_arena) {
      list_snapshots = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_snapshots, submessage_arena);
    }
    set_has_list_snapshots();
    _impl_.value_.list_snapshots_ = list_snapshots;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.list_snapshots)
}
void Response::set_allocated_offer_snapshot(::tendermint::abci::ResponseOfferSnapshot* offer_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (offer_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offer_snapshot);
    if (message_arena != submessage_arena) {
      offer_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offer_snapshot, submessage_arena);
    }
    set_has_offer_snapshot();
    _impl_.value_.offer_snapshot_ = offer_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.offer_snapshot)
}
void Response::set_allocated_load_snapshot_chunk(::tendermint::abci::ResponseLoadSnapshotChunk* load_snapshot_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (load_snapshot_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(load_snapshot_chunk);
    if (message_arena != submessage_arena) {
      load_snapshot_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_snapshot_chunk, submessage_arena);
    }
    set_has_load_snapshot_chunk();
    _impl_.value_.load_snapshot_chunk_ = load_snapshot_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.load_snapshot_chunk)
}
void Response::set_allocated_apply_snapshot_chunk(::tendermint::abci::ResponseApplySnapshotChunk* apply_snapshot_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (apply_snapshot_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(apply_snapshot_chunk);
    if (message_arena != submessage_arena) {
      apply_snapshot_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_snapshot_chunk, submessage_arena);
    }
    set_has_apply_snapshot_chunk();
    _impl_.value_.apply_snapshot_chunk_ = apply_snapshot_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.apply_snapshot_chunk)
}
void Response::set_allocated_prepare_proposal(::tendermint::abci::ResponsePrepareProposal* prepare_proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (prepare_proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prepare_proposal);
    if (message_arena != submessage_arena) {
      prepare_proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prepare_proposal, submessage_arena);
    }
    set_has_prepare_proposal();
    _impl_.value_.prepare_proposal_ = prepare_proposal;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.prepare_proposal)
}
void Response::set_allocated_process_proposal(::tendermint::abci::ResponseProcessProposal* process_proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (process_proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(process_proposal);
    if (message_arena != submessage_arena) {
      process_proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_proposal, submessage_arena);
    }
    set_has_process_proposal();
    _impl_.value_.process_proposal_ = process_proposal;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.abci.Response.process_proposal)
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kException: {
      _this->_internal_mutable_exception()->::tendermint::abci::ResponseException::MergeFrom(
          from._internal_exception());
      break;
    }
    case kEcho: {
      _this->_internal_mutable_echo()->::tendermint::abci::ResponseEcho::MergeFrom(
          from._internal_echo());
      break;
    }
    case kFlush: {
      _this->_internal_mutable_flush()->::tendermint::abci::ResponseFlush::MergeFrom(
          from._internal_flush());
      break;
    }
    case kInfo: {
      _this->_internal_mutable_info()->::tendermint::abci::ResponseInfo::MergeFrom(
          from._internal_info());
      break;
    }
    case kInitChain: {
      _this->_internal_mutable_init_chain()->::tendermint::abci::ResponseInitChain::MergeFrom(
          from._internal_init_chain());
      break;
    }
    case kQuery: {
      _this->_internal_mutable_query()->::tendermint::abci::ResponseQuery::MergeFrom(
          from._internal_query());
      break;
    }
    case kBeginBlock: {
      _this->_internal_mutable_begin_block()->::tendermint::abci::ResponseBeginBlock::MergeFrom(
          from._internal_begin_block());
      break;
    }
    case kCheckTx: {
      _this->_internal_mutable_check_tx()->::tendermint::abci::ResponseCheckTx::MergeFrom(
          from._internal_check_tx());
      break;
    }
    case kDeliverTx: {
      _this->_internal_mutable_deliver_tx()->::tendermint::abci::ResponseDeliverTx::MergeFrom(
          from._internal_deliver_tx());
      break;
    }
    case kEndBlock: {
      _this->_internal_mutable_end_block()->::tendermint::abci::ResponseEndBlock::MergeFrom(
          from._internal_end_block());
      break;
    }
    case kCommit: {
      _this->_internal_mutable_commit()->::tendermint::abci::ResponseCommit::MergeFrom(
          from._internal_commit());
      break;
    }
    case kListSnapshots: {
      _this->_internal_mutable_list_snapshots()->::tendermint::abci::ResponseListSnapshots::MergeFrom(
          from._internal_list_snapshots());
      break;
    }
    case kOfferSnapshot: {
      _this->_internal_mutable_offer_snapshot()->::tendermint::abci::ResponseOfferSnapshot::MergeFrom(
          from._internal_offer_snapshot());
      break;
    }
    case kLoadSnapshotChunk: {
      _this->_internal_mutable_load_snapshot_chunk()->::tendermint::abci::ResponseLoadSnapshotChunk::MergeFrom(
          from._internal_load_snapshot_chunk());
      break;
    }
    case kApplySnapshotChunk: {
      _this->_internal_mutable_apply_snapshot_chunk()->::tendermint::abci::ResponseApplySnapshotChunk::MergeFrom(
          from._internal_apply_snapshot_chunk());
      break;
    }
    case kPrepareProposal: {
      _this->_internal_mutable_prepare_proposal()->::tendermint::abci::ResponsePrepareProposal::MergeFrom(
          from._internal_prepare_proposal());
      break;
    }
    case kProcessProposal: {
      _this->_internal_mutable_process_proposal()->::tendermint::abci::ResponseProcessProposal::MergeFrom(
          from._internal_process_proposal());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.Response)
}

inline void Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:tendermint.abci.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.abci.Response)
  switch (value_case()) {
    case kException: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.exception_;
      }
      break;
    }
    case kEcho: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.echo_;
      }
      break;
    }
    case kFlush: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.flush_;
      }
      break;
    }
    case kInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.info_;
      }
      break;
    }
    case kInitChain: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.init_chain_;
      }
      break;
    }
    case kQuery: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.query_;
      }
      break;
    }
    case kBeginBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.begin_block_;
      }
      break;
    }
    case kCheckTx: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.check_tx_;
      }
      break;
    }
    case kDeliverTx: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.deliver_tx_;
      }
      break;
    }
    case kEndBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.end_block_;
      }
      break;
    }
    case kCommit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.commit_;
      }
      break;
    }
    case kListSnapshots: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.list_snapshots_;
      }
      break;
    }
    case kOfferSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.offer_snapshot_;
      }
      break;
    }
    case kLoadSnapshotChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.load_snapshot_chunk_;
      }
      break;
    }
    case kApplySnapshotChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.apply_snapshot_chunk_;
      }
      break;
    }
    case kPrepareProposal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.prepare_proposal_;
      }
      break;
    }
    case kProcessProposal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.process_proposal_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.ResponseException exception = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_exception(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseEcho echo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_echo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseFlush flush = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flush(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseInfo info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseInitChain init_chain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_chain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseQuery query = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseBeginBlock begin_block = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseCheckTx check_tx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseDeliverTx deliver_tx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_deliver_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseEndBlock end_block = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseCommit commit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseListSnapshots list_snapshots = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_snapshots(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseOfferSnapshot offer_snapshot = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_offer_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseLoadSnapshotChunk load_snapshot_chunk = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_snapshot_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseApplySnapshotChunk apply_snapshot_chunk = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_snapshot_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponsePrepareProposal prepare_proposal = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_prepare_proposal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseProcessProposal process_proposal = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_proposal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.ResponseException exception = 1;
  if (_internal_has_exception()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::exception(this),
        _Internal::exception(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseEcho echo = 2;
  if (_internal_has_echo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::echo(this),
        _Internal::echo(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseFlush flush = 3;
  if (_internal_has_flush()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::flush(this),
        _Internal::flush(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseInfo info = 4;
  if (_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseInitChain init_chain = 6;
  if (_internal_has_init_chain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::init_chain(this),
        _Internal::init_chain(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseQuery query = 7;
  if (_internal_has_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseBeginBlock begin_block = 8;
  if (_internal_has_begin_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::begin_block(this),
        _Internal::begin_block(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseCheckTx check_tx = 9;
  if (_internal_has_check_tx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::check_tx(this),
        _Internal::check_tx(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseDeliverTx deliver_tx = 10;
  if (_internal_has_deliver_tx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::deliver_tx(this),
        _Internal::deliver_tx(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseEndBlock end_block = 11;
  if (_internal_has_end_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::end_block(this),
        _Internal::end_block(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseCommit commit = 12;
  if (_internal_has_commit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::commit(this),
        _Internal::commit(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseListSnapshots list_snapshots = 13;
  if (_internal_has_list_snapshots()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::list_snapshots(this),
        _Internal::list_snapshots(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseOfferSnapshot offer_snapshot = 14;
  if (_internal_has_offer_snapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::offer_snapshot(this),
        _Internal::offer_snapshot(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseLoadSnapshotChunk load_snapshot_chunk = 15;
  if (_internal_has_load_snapshot_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::load_snapshot_chunk(this),
        _Internal::load_snapshot_chunk(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseApplySnapshotChunk apply_snapshot_chunk = 16;
  if (_internal_has_apply_snapshot_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::apply_snapshot_chunk(this),
        _Internal::apply_snapshot_chunk(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponsePrepareProposal prepare_proposal = 17;
  if (_internal_has_prepare_proposal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::prepare_proposal(this),
        _Internal::prepare_proposal(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseProcessProposal process_proposal = 18;
  if (_internal_has_process_proposal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::process_proposal(this),
        _Internal::process_proposal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .tendermint.abci.ResponseException exception = 1;
    case kException: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.exception_);
      break;
    }
    // .tendermint.abci.ResponseEcho echo = 2;
    case kEcho: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.echo_);
      break;
    }
    // .tendermint.abci.ResponseFlush flush = 3;
    case kFlush: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.flush_);
      break;
    }
    // .tendermint.abci.ResponseInfo info = 4;
    case kInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.info_);
      break;
    }
    // .tendermint.abci.ResponseInitChain init_chain = 6;
    case kInitChain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.init_chain_);
      break;
    }
    // .tendermint.abci.ResponseQuery query = 7;
    case kQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.query_);
      break;
    }
    // .tendermint.abci.ResponseBeginBlock begin_block = 8;
    case kBeginBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.begin_block_);
      break;
    }
    // .tendermint.abci.ResponseCheckTx check_tx = 9;
    case kCheckTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.check_tx_);
      break;
    }
    // .tendermint.abci.ResponseDeliverTx deliver_tx = 10;
    case kDeliverTx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.deliver_tx_);
      break;
    }
    // .tendermint.abci.ResponseEndBlock end_block = 11;
    case kEndBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.end_block_);
      break;
    }
    // .tendermint.abci.ResponseCommit commit = 12;
    case kCommit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.commit_);
      break;
    }
    // .tendermint.abci.ResponseListSnapshots list_snapshots = 13;
    case kListSnapshots: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.list_snapshots_);
      break;
    }
    // .tendermint.abci.ResponseOfferSnapshot offer_snapshot = 14;
    case kOfferSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.offer_snapshot_);
      break;
    }
    // .tendermint.abci.ResponseLoadSnapshotChunk load_snapshot_chunk = 15;
    case kLoadSnapshotChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.load_snapshot_chunk_);
      break;
    }
    // .tendermint.abci.ResponseApplySnapshotChunk apply_snapshot_chunk = 16;
    case kApplySnapshotChunk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.apply_snapshot_chunk_);
      break;
    }
    // .tendermint.abci.ResponsePrepareProposal prepare_proposal = 17;
    case kPrepareProposal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.prepare_proposal_);
      break;
    }
    // .tendermint.abci.ResponseProcessProposal process_proposal = 18;
    case kProcessProposal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.process_proposal_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kException: {
      _this->_internal_mutable_exception()->::tendermint::abci::ResponseException::MergeFrom(
          from._internal_exception());
      break;
    }
    case kEcho: {
      _this->_internal_mutable_echo()->::tendermint::abci::ResponseEcho::MergeFrom(
          from._internal_echo());
      break;
    }
    case kFlush: {
      _this->_internal_mutable_flush()->::tendermint::abci::ResponseFlush::MergeFrom(
          from._internal_flush());
      break;
    }
    case kInfo: {
      _this->_internal_mutable_info()->::tendermint::abci::ResponseInfo::MergeFrom(
          from._internal_info());
      break;
    }
    case kInitChain: {
      _this->_internal_mutable_init_chain()->::tendermint::abci::ResponseInitChain::MergeFrom(
          from._internal_init_chain());
      break;
    }
    case kQuery: {
      _this->_internal_mutable_query()->::tendermint::abci::ResponseQuery::MergeFrom(
          from._internal_query());
      break;
    }
    case kBeginBlock: {
      _this->_internal_mutable_begin_block()->::tendermint::abci::ResponseBeginBlock::MergeFrom(
          from._internal_begin_block());
      break;
    }
    case kCheckTx: {
      _this->_internal_mutable_check_tx()->::tendermint::abci::ResponseCheckTx::MergeFrom(
          from._internal_check_tx());
      break;
    }
    case kDeliverTx: {
      _this->_internal_mutable_deliver_tx()->::tendermint::abci::ResponseDeliverTx::MergeFrom(
          from._internal_deliver_tx());
      break;
    }
    case kEndBlock: {
      _this->_internal_mutable_end_block()->::tendermint::abci::ResponseEndBlock::MergeFrom(
          from._internal_end_block());
      break;
    }
    case kCommit: {
      _this->_internal_mutable_commit()->::tendermint::abci::ResponseCommit::MergeFrom(
          from._internal_commit());
      break;
    }
    case kListSnapshots: {
      _this->_internal_mutable_list_snapshots()->::tendermint::abci::ResponseListSnapshots::MergeFrom(
          from._internal_list_snapshots());
      break;
    }
    case kOfferSnapshot: {
      _this->_internal_mutable_offer_snapshot()->::tendermint::abci::ResponseOfferSnapshot::MergeFrom(
          from._internal_offer_snapshot());
      break;
    }
    case kLoadSnapshotChunk: {
      _this->_internal_mutable_load_snapshot_chunk()->::tendermint::abci::ResponseLoadSnapshotChunk::MergeFrom(
          from._internal_load_snapshot_chunk());
      break;
    }
    case kApplySnapshotChunk: {
      _this->_internal_mutable_apply_snapshot_chunk()->::tendermint::abci::ResponseApplySnapshotChunk::MergeFrom(
          from._internal_apply_snapshot_chunk());
      break;
    }
    case kPrepareProposal: {
      _this->_internal_mutable_prepare_proposal()->::tendermint::abci::ResponsePrepareProposal::MergeFrom(
          from._internal_prepare_proposal());
      break;
    }
    case kProcessProposal: {
      _this->_internal_mutable_process_proposal()->::tendermint::abci::ResponseProcessProposal::MergeFrom(
          from._internal_process_proposal());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[17]);
}

// ===================================================================

class ResponseException::_Internal {
 public:
};

ResponseException::ResponseException(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseException)
}
ResponseException::ResponseException(const ResponseException& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseException* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseException)
}

inline void ResponseException::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseException::~ResponseException() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseException)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseException::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void ResponseException::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseException::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseException)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseException::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseException.error"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseException::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseException)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseException.error");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseException)
  return target;
}

size_t ResponseException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseException)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 1;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseException::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseException::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseException::GetClassData() const { return &_class_data_; }


void ResponseException::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseException*>(&to_msg);
  auto& from = static_cast<const ResponseException&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseException)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseException::CopyFrom(const ResponseException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseException::IsInitialized() const {
  return true;
}

void ResponseException::InternalSwap(ResponseException* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseException::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[18]);
}

// ===================================================================

class ResponseEcho::_Internal {
 public:
};

ResponseEcho::ResponseEcho(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseEcho)
}
ResponseEcho::ResponseEcho(const ResponseEcho& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseEcho* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseEcho)
}

inline void ResponseEcho::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseEcho::~ResponseEcho() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseEcho)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseEcho::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ResponseEcho::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseEcho::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseEcho)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseEcho::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseEcho.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseEcho::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseEcho)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseEcho.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseEcho)
  return target;
}

size_t ResponseEcho::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseEcho)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseEcho::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseEcho::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseEcho::GetClassData() const { return &_class_data_; }


void ResponseEcho::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseEcho*>(&to_msg);
  auto& from = static_cast<const ResponseEcho&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseEcho)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseEcho::CopyFrom(const ResponseEcho& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEcho::IsInitialized() const {
  return true;
}

void ResponseEcho::InternalSwap(ResponseEcho* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseEcho::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[19]);
}

// ===================================================================

class ResponseFlush::_Internal {
 public:
};

ResponseFlush::ResponseFlush(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseFlush)
}
ResponseFlush::ResponseFlush(const ResponseFlush& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ResponseFlush* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseFlush)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseFlush::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseFlush::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResponseFlush::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[20]);
}

// ===================================================================

class ResponseInfo::_Internal {
 public:
};

ResponseInfo::ResponseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseInfo)
}
ResponseInfo::ResponseInfo(const ResponseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.last_block_app_hash_){}
    , decltype(_impl_.app_version_){}
    , decltype(_impl_.last_block_height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.last_block_app_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_block_app_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_block_app_hash().empty()) {
    _this->_impl_.last_block_app_hash_.Set(from._internal_last_block_app_hash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.app_version_, &from._impl_.app_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_block_height_) -
    reinterpret_cast<char*>(&_impl_.app_version_)) + sizeof(_impl_.last_block_height_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseInfo)
}

inline void ResponseInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.last_block_app_hash_){}
    , decltype(_impl_.app_version_){uint64_t{0u}}
    , decltype(_impl_.last_block_height_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_block_app_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_block_app_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseInfo::~ResponseInfo() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.version_.Destroy();
  _impl_.last_block_app_hash_.Destroy();
}

void ResponseInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.last_block_app_hash_.ClearToEmpty();
  ::memset(&_impl_.app_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_block_height_) -
      reinterpret_cast<char*>(&_impl_.app_version_)) + sizeof(_impl_.last_block_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseInfo.data"));
        } else
          goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseInfo.version"));
        } else
          goto handle_unusual;
        continue;
      // uint64 app_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.app_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 last_block_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.last_block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes last_block_app_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_last_block_app_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseInfo.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseInfo.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // uint64 app_version = 3;
  if (this->_internal_app_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_app_version(), target);
  }

  // int64 last_block_height = 4;
  if (this->_internal_last_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_block_height(), target);
  }

  // bytes last_block_app_hash = 5;
  if (!this->_internal_last_block_app_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_last_block_app_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseInfo)
  return target;
}

size_t ResponseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // bytes last_block_app_hash = 5;
  if (!this->_internal_last_block_app_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_block_app_hash());
  }

  // uint64 app_version = 3;
  if (this->_internal_app_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_app_version());
  }

  // int64 last_block_height = 4;
  if (this->_internal_last_block_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_block_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseInfo::GetClassData() const { return &_class_data_; }


void ResponseInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseInfo*>(&to_msg);
  auto& from = static_cast<const ResponseInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_last_block_app_hash().empty()) {
    _this->_internal_set_last_block_app_hash(from._internal_last_block_app_hash());
  }
  if (from._internal_app_version() != 0) {
    _this->_internal_set_app_version(from._internal_app_version());
  }
  if (from._internal_last_block_height() != 0) {
    _this->_internal_set_last_block_height(from._internal_last_block_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseInfo::CopyFrom(const ResponseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInfo::IsInitialized() const {
  return true;
}

void ResponseInfo::InternalSwap(ResponseInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_block_app_hash_, lhs_arena,
      &other->_impl_.last_block_app_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseInfo, _impl_.last_block_height_)
      + sizeof(ResponseInfo::_impl_.last_block_height_)
      - PROTOBUF_FIELD_OFFSET(ResponseInfo, _impl_.app_version_)>(
          reinterpret_cast<char*>(&_impl_.app_version_),
          reinterpret_cast<char*>(&other->_impl_.app_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[21]);
}

// ===================================================================

class ResponseInitChain::_Internal {
 public:
  static const ::tendermint::types::ConsensusParams& consensus_params(const ResponseInitChain* msg);
};

const ::tendermint::types::ConsensusParams&
ResponseInitChain::_Internal::consensus_params(const ResponseInitChain* msg) {
  return *msg->_impl_.consensus_params_;
}
void ResponseInitChain::clear_consensus_params() {
  if (GetArenaForAllocation() == nullptr && _impl_.consensus_params_ != nullptr) {
    delete _impl_.consensus_params_;
  }
  _impl_.consensus_params_ = nullptr;
}
ResponseInitChain::ResponseInitChain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseInitChain)
}
ResponseInitChain::ResponseInitChain(const ResponseInitChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseInitChain* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.validators_){from._impl_.validators_}
    , decltype(_impl_.app_hash_){}
    , decltype(_impl_.consensus_params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_hash().empty()) {
    _this->_impl_.app_hash_.Set(from._internal_app_hash(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_consensus_params()) {
    _this->_impl_.consensus_params_ = new ::tendermint::types::ConsensusParams(*from._impl_.consensus_params_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseInitChain)
}

inline void ResponseInitChain::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.validators_){arena}
    , decltype(_impl_.app_hash_){}
    , decltype(_impl_.consensus_params_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseInitChain::~ResponseInitChain() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseInitChain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseInitChain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validators_.~RepeatedPtrField();
  _impl_.app_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.consensus_params_;
}

void ResponseInitChain::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseInitChain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validators_.Clear();
  _impl_.app_hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.consensus_params_ != nullptr) {
    delete _impl_.consensus_params_;
  }
  _impl_.consensus_params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseInitChain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.ConsensusParams consensus_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.ValidatorUpdate validators = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes app_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_app_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseInitChain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseInitChain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.ConsensusParams consensus_params = 1;
  if (this->_internal_has_consensus_params()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::consensus_params(this),
        _Internal::consensus_params(this).GetCachedSize(), target, stream);
  }

  // repeated .tendermint.abci.ValidatorUpdate validators = 2 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_validators_size()); i < n; i++) {
    const auto& repfield = this->_internal_validators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes app_hash = 3;
  if (!this->_internal_app_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_app_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseInitChain)
  return target;
}

size_t ResponseInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseInitChain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.ValidatorUpdate validators = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->_impl_.validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes app_hash = 3;
  if (!this->_internal_app_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_hash());
  }

  // .tendermint.types.ConsensusParams consensus_params = 1;
  if (this->_internal_has_consensus_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consensus_params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseInitChain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseInitChain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseInitChain::GetClassData() const { return &_class_data_; }


void ResponseInitChain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseInitChain*>(&to_msg);
  auto& from = static_cast<const ResponseInitChain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseInitChain)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.validators_.MergeFrom(from._impl_.validators_);
  if (!from._internal_app_hash().empty()) {
    _this->_internal_set_app_hash(from._internal_app_hash());
  }
  if (from._internal_has_consensus_params()) {
    _this->_internal_mutable_consensus_params()->::tendermint::types::ConsensusParams::MergeFrom(
        from._internal_consensus_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseInitChain::CopyFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInitChain::IsInitialized() const {
  return true;
}

void ResponseInitChain::InternalSwap(ResponseInitChain* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.validators_.InternalSwap(&other->_impl_.validators_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_hash_, lhs_arena,
      &other->_impl_.app_hash_, rhs_arena
  );
  swap(_impl_.consensus_params_, other->_impl_.consensus_params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseInitChain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[22]);
}

// ===================================================================

class ResponseQuery::_Internal {
 public:
  static const ::tendermint::crypto::ProofOps& proof_ops(const ResponseQuery* msg);
};

const ::tendermint::crypto::ProofOps&
ResponseQuery::_Internal::proof_ops(const ResponseQuery* msg) {
  return *msg->_impl_.proof_ops_;
}
void ResponseQuery::clear_proof_ops() {
  if (GetArenaForAllocation() == nullptr && _impl_.proof_ops_ != nullptr) {
    delete _impl_.proof_ops_;
  }
  _impl_.proof_ops_ = nullptr;
}
ResponseQuery::ResponseQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseQuery)
}
ResponseQuery::ResponseQuery(const ResponseQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.log_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.codespace_){}
    , decltype(_impl_.proof_ops_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log().empty()) {
    _this->_impl_.log_.Set(from._internal_log(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    _this->_impl_.codespace_.Set(from._internal_codespace(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_proof_ops()) {
    _this->_impl_.proof_ops_ = new ::tendermint::crypto::ProofOps(*from._impl_.proof_ops_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseQuery)
}

inline void ResponseQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.log_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.codespace_){}
    , decltype(_impl_.proof_ops_){nullptr}
    , decltype(_impl_.index_){int64_t{0}}
    , decltype(_impl_.height_){int64_t{0}}
    , decltype(_impl_.code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseQuery::~ResponseQuery() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.log_.Destroy();
  _impl_.info_.Destroy();
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
  _impl_.codespace_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proof_ops_;
}

void ResponseQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.log_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.codespace_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.proof_ops_ != nullptr) {
    delete _impl_.proof_ops_;
  }
  _impl_.proof_ops_ = nullptr;
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string log = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseQuery.log"));
        } else
          goto handle_unusual;
        continue;
      // string info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseQuery.info"));
        } else
          goto handle_unusual;
        continue;
      // int64 index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.crypto.ProofOps proof_ops = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_ops(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string codespace = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_codespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseQuery.codespace"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // string log = 3;
  if (!this->_internal_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseQuery.log");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log(), target);
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseQuery.info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_info(), target);
  }

  // int64 index = 5;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_index(), target);
  }

  // bytes key = 6;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_key(), target);
  }

  // bytes value = 7;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_value(), target);
  }

  // .tendermint.crypto.ProofOps proof_ops = 8;
  if (this->_internal_has_proof_ops()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::proof_ops(this),
        _Internal::proof_ops(this).GetCachedSize(), target, stream);
  }

  // int64 height = 9;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_height(), target);
  }

  // string codespace = 10;
  if (!this->_internal_codespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codespace().data(), static_cast<int>(this->_internal_codespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseQuery.codespace");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_codespace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseQuery)
  return target;
}

size_t ResponseQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log = 3;
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // bytes key = 6;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 7;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // string codespace = 10;
  if (!this->_internal_codespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codespace());
  }

  // .tendermint.crypto.ProofOps proof_ops = 8;
  if (this->_internal_has_proof_ops()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proof_ops_);
  }

  // int64 index = 5;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index());
  }

  // int64 height = 9;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseQuery::GetClassData() const { return &_class_data_; }


void ResponseQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseQuery*>(&to_msg);
  auto& from = static_cast<const ResponseQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_log().empty()) {
    _this->_internal_set_log(from._internal_log());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (!from._internal_codespace().empty()) {
    _this->_internal_set_codespace(from._internal_codespace());
  }
  if (from._internal_has_proof_ops()) {
    _this->_internal_mutable_proof_ops()->::tendermint::crypto::ProofOps::MergeFrom(
        from._internal_proof_ops());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseQuery::CopyFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuery::IsInitialized() const {
  return true;
}

void ResponseQuery::InternalSwap(ResponseQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_, lhs_arena,
      &other->_impl_.log_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.codespace_, lhs_arena,
      &other->_impl_.codespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseQuery, _impl_.code_)
      + sizeof(ResponseQuery::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(ResponseQuery, _impl_.proof_ops_)>(
          reinterpret_cast<char*>(&_impl_.proof_ops_),
          reinterpret_cast<char*>(&other->_impl_.proof_ops_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[23]);
}

// ===================================================================

class ResponseBeginBlock::_Internal {
 public:
};

ResponseBeginBlock::ResponseBeginBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseBeginBlock)
}
ResponseBeginBlock::ResponseBeginBlock(const ResponseBeginBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseBeginBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseBeginBlock)
}

inline void ResponseBeginBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseBeginBlock::~ResponseBeginBlock() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseBeginBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseBeginBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
}

void ResponseBeginBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseBeginBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseBeginBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tendermint.abci.Event events = 1 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseBeginBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseBeginBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tendermint.abci.Event events = 1 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseBeginBlock)
  return target;
}

size_t ResponseBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseBeginBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.Event events = 1 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseBeginBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseBeginBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseBeginBlock::GetClassData() const { return &_class_data_; }


void ResponseBeginBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseBeginBlock*>(&to_msg);
  auto& from = static_cast<const ResponseBeginBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseBeginBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseBeginBlock::CopyFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBeginBlock::IsInitialized() const {
  return true;
}

void ResponseBeginBlock::InternalSwap(ResponseBeginBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseBeginBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[24]);
}

// ===================================================================

class ResponseCheckTx::_Internal {
 public:
};

ResponseCheckTx::ResponseCheckTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseCheckTx)
}
ResponseCheckTx::ResponseCheckTx(const ResponseCheckTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseCheckTx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.log_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.codespace_){}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.mempool_error_){}
    , decltype(_impl_.gas_wanted_){}
    , decltype(_impl_.gas_used_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log().empty()) {
    _this->_impl_.log_.Set(from._internal_log(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    _this->_impl_.codespace_.Set(from._internal_codespace(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mempool_error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mempool_error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mempool_error().empty()) {
    _this->_impl_.mempool_error_.Set(from._internal_mempool_error(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gas_wanted_, &from._impl_.gas_wanted_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.gas_wanted_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseCheckTx)
}

inline void ResponseCheckTx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.log_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.codespace_){}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.mempool_error_){}
    , decltype(_impl_.gas_wanted_){int64_t{0}}
    , decltype(_impl_.gas_used_){int64_t{0}}
    , decltype(_impl_.priority_){int64_t{0}}
    , decltype(_impl_.code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mempool_error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mempool_error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseCheckTx::~ResponseCheckTx() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseCheckTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseCheckTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  _impl_.data_.Destroy();
  _impl_.log_.Destroy();
  _impl_.info_.Destroy();
  _impl_.codespace_.Destroy();
  _impl_.sender_.Destroy();
  _impl_.mempool_error_.Destroy();
}

void ResponseCheckTx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseCheckTx::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseCheckTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _impl_.data_.ClearToEmpty();
  _impl_.log_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _impl_.codespace_.ClearToEmpty();
  _impl_.sender_.ClearToEmpty();
  _impl_.mempool_error_.ClearToEmpty();
  ::memset(&_impl_.gas_wanted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.gas_wanted_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseCheckTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string log = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseCheckTx.log"));
        } else
          goto handle_unusual;
        continue;
      // string info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseCheckTx.info"));
        } else
          goto handle_unusual;
        continue;
      // int64 gas_wanted = 5 [json_name = "gas_wanted"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gas_wanted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gas_used = 6 [json_name = "gas_used"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.Event events = 7 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string codespace = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_codespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseCheckTx.codespace"));
        } else
          goto handle_unusual;
        continue;
      // string sender = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseCheckTx.sender"));
        } else
          goto handle_unusual;
        continue;
      // int64 priority = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mempool_error = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_mempool_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseCheckTx.mempool_error"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseCheckTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseCheckTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // string log = 3;
  if (!this->_internal_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseCheckTx.log");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log(), target);
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseCheckTx.info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_info(), target);
  }

  // int64 gas_wanted = 5 [json_name = "gas_wanted"];
  if (this->_internal_gas_wanted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_gas_wanted(), target);
  }

  // int64 gas_used = 6 [json_name = "gas_used"];
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_gas_used(), target);
  }

  // repeated .tendermint.abci.Event events = 7 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string codespace = 8;
  if (!this->_internal_codespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codespace().data(), static_cast<int>(this->_internal_codespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseCheckTx.codespace");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_codespace(), target);
  }

  // string sender = 9;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseCheckTx.sender");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sender(), target);
  }

  // int64 priority = 10;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_priority(), target);
  }

  // string mempool_error = 11;
  if (!this->_internal_mempool_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mempool_error().data(), static_cast<int>(this->_internal_mempool_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseCheckTx.mempool_error");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_mempool_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseCheckTx)
  return target;
}

size_t ResponseCheckTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseCheckTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.Event events = 7 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string log = 3;
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // string codespace = 8;
  if (!this->_internal_codespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codespace());
  }

  // string sender = 9;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // string mempool_error = 11;
  if (!this->_internal_mempool_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mempool_error());
  }

  // int64 gas_wanted = 5 [json_name = "gas_wanted"];
  if (this->_internal_gas_wanted() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gas_wanted());
  }

  // int64 gas_used = 6 [json_name = "gas_used"];
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gas_used());
  }

  // int64 priority = 10;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_priority());
  }

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseCheckTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseCheckTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseCheckTx::GetClassData() const { return &_class_data_; }


void ResponseCheckTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseCheckTx*>(&to_msg);
  auto& from = static_cast<const ResponseCheckTx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseCheckTx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_log().empty()) {
    _this->_internal_set_log(from._internal_log());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (!from._internal_codespace().empty()) {
    _this->_internal_set_codespace(from._internal_codespace());
  }
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_mempool_error().empty()) {
    _this->_internal_set_mempool_error(from._internal_mempool_error());
  }
  if (from._internal_gas_wanted() != 0) {
    _this->_internal_set_gas_wanted(from._internal_gas_wanted());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseCheckTx::CopyFrom(const ResponseCheckTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCheckTx::IsInitialized() const {
  return true;
}

void ResponseCheckTx::InternalSwap(ResponseCheckTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_, lhs_arena,
      &other->_impl_.log_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.codespace_, lhs_arena,
      &other->_impl_.codespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mempool_error_, lhs_arena,
      &other->_impl_.mempool_error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseCheckTx, _impl_.code_)
      + sizeof(ResponseCheckTx::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(ResponseCheckTx, _impl_.gas_wanted_)>(
          reinterpret_cast<char*>(&_impl_.gas_wanted_),
          reinterpret_cast<char*>(&other->_impl_.gas_wanted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseCheckTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[25]);
}

// ===================================================================

class ResponseDeliverTx::_Internal {
 public:
};

ResponseDeliverTx::ResponseDeliverTx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseDeliverTx)
}
ResponseDeliverTx::ResponseDeliverTx(const ResponseDeliverTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseDeliverTx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.log_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.codespace_){}
    , decltype(_impl_.gas_wanted_){}
    , decltype(_impl_.gas_used_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log().empty()) {
    _this->_impl_.log_.Set(from._internal_log(), 
      _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    _this->_impl_.codespace_.Set(from._internal_codespace(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gas_wanted_, &from._impl_.gas_wanted_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.gas_wanted_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseDeliverTx)
}

inline void ResponseDeliverTx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.log_){}
    , decltype(_impl_.info_){}
    , decltype(_impl_.codespace_){}
    , decltype(_impl_.gas_wanted_){int64_t{0}}
    , decltype(_impl_.gas_used_){int64_t{0}}
    , decltype(_impl_.code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseDeliverTx::~ResponseDeliverTx() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseDeliverTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseDeliverTx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  _impl_.data_.Destroy();
  _impl_.log_.Destroy();
  _impl_.info_.Destroy();
  _impl_.codespace_.Destroy();
}

void ResponseDeliverTx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseDeliverTx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _impl_.data_.ClearToEmpty();
  _impl_.log_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _impl_.codespace_.ClearToEmpty();
  ::memset(&_impl_.gas_wanted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.gas_wanted_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseDeliverTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string log = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseDeliverTx.log"));
        } else
          goto handle_unusual;
        continue;
      // string info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseDeliverTx.info"));
        } else
          goto handle_unusual;
        continue;
      // int64 gas_wanted = 5 [json_name = "gas_wanted"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gas_wanted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gas_used = 6 [json_name = "gas_used"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.Event events = 7 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string codespace = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_codespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseDeliverTx.codespace"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseDeliverTx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseDeliverTx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // string log = 3;
  if (!this->_internal_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseDeliverTx.log");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log(), target);
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseDeliverTx.info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_info(), target);
  }

  // int64 gas_wanted = 5 [json_name = "gas_wanted"];
  if (this->_internal_gas_wanted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_gas_wanted(), target);
  }

  // int64 gas_used = 6 [json_name = "gas_used"];
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_gas_used(), target);
  }

  // repeated .tendermint.abci.Event events = 7 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string codespace = 8;
  if (!this->_internal_codespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codespace().data(), static_cast<int>(this->_internal_codespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseDeliverTx.codespace");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_codespace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseDeliverTx)
  return target;
}

size_t ResponseDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseDeliverTx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.Event events = 7 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string log = 3;
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // string info = 4;
  if (!this->_internal_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // string codespace = 8;
  if (!this->_internal_codespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codespace());
  }

  // int64 gas_wanted = 5 [json_name = "gas_wanted"];
  if (this->_internal_gas_wanted() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gas_wanted());
  }

  // int64 gas_used = 6 [json_name = "gas_used"];
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gas_used());
  }

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseDeliverTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseDeliverTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseDeliverTx::GetClassData() const { return &_class_data_; }


void ResponseDeliverTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseDeliverTx*>(&to_msg);
  auto& from = static_cast<const ResponseDeliverTx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseDeliverTx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_log().empty()) {
    _this->_internal_set_log(from._internal_log());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (!from._internal_codespace().empty()) {
    _this->_internal_set_codespace(from._internal_codespace());
  }
  if (from._internal_gas_wanted() != 0) {
    _this->_internal_set_gas_wanted(from._internal_gas_wanted());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseDeliverTx::CopyFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDeliverTx::IsInitialized() const {
  return true;
}

void ResponseDeliverTx::InternalSwap(ResponseDeliverTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_, lhs_arena,
      &other->_impl_.log_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.info_, lhs_arena,
      &other->_impl_.info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.codespace_, lhs_arena,
      &other->_impl_.codespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseDeliverTx, _impl_.code_)
      + sizeof(ResponseDeliverTx::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(ResponseDeliverTx, _impl_.gas_wanted_)>(
          reinterpret_cast<char*>(&_impl_.gas_wanted_),
          reinterpret_cast<char*>(&other->_impl_.gas_wanted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseDeliverTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[26]);
}

// ===================================================================

class ResponseEndBlock::_Internal {
 public:
  static const ::tendermint::types::ConsensusParams& consensus_param_updates(const ResponseEndBlock* msg);
};

const ::tendermint::types::ConsensusParams&
ResponseEndBlock::_Internal::consensus_param_updates(const ResponseEndBlock* msg) {
  return *msg->_impl_.consensus_param_updates_;
}
void ResponseEndBlock::clear_consensus_param_updates() {
  if (GetArenaForAllocation() == nullptr && _impl_.consensus_param_updates_ != nullptr) {
    delete _impl_.consensus_param_updates_;
  }
  _impl_.consensus_param_updates_ = nullptr;
}
ResponseEndBlock::ResponseEndBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseEndBlock)
}
ResponseEndBlock::ResponseEndBlock(const ResponseEndBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseEndBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.validator_updates_){from._impl_.validator_updates_}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.consensus_param_updates_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_consensus_param_updates()) {
    _this->_impl_.consensus_param_updates_ = new ::tendermint::types::ConsensusParams(*from._impl_.consensus_param_updates_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseEndBlock)
}

inline void ResponseEndBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.validator_updates_){arena}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.consensus_param_updates_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseEndBlock::~ResponseEndBlock() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseEndBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseEndBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validator_updates_.~RepeatedPtrField();
  _impl_.events_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.consensus_param_updates_;
}

void ResponseEndBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseEndBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseEndBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validator_updates_.Clear();
  _impl_.events_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.consensus_param_updates_ != nullptr) {
    delete _impl_.consensus_param_updates_;
  }
  _impl_.consensus_param_updates_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseEndBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tendermint.abci.ValidatorUpdate validator_updates = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validator_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.ConsensusParams consensus_param_updates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_param_updates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.Event events = 3 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseEndBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseEndBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tendermint.abci.ValidatorUpdate validator_updates = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_validator_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_validator_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tendermint.types.ConsensusParams consensus_param_updates = 2;
  if (this->_internal_has_consensus_param_updates()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::consensus_param_updates(this),
        _Internal::consensus_param_updates(this).GetCachedSize(), target, stream);
  }

  // repeated .tendermint.abci.Event events = 3 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseEndBlock)
  return target;
}

size_t ResponseEndBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseEndBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.ValidatorUpdate validator_updates = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_validator_updates_size();
  for (const auto& msg : this->_impl_.validator_updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tendermint.abci.Event events = 3 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "events,omitempty"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tendermint.types.ConsensusParams consensus_param_updates = 2;
  if (this->_internal_has_consensus_param_updates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consensus_param_updates_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseEndBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseEndBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseEndBlock::GetClassData() const { return &_class_data_; }


void ResponseEndBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseEndBlock*>(&to_msg);
  auto& from = static_cast<const ResponseEndBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseEndBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.validator_updates_.MergeFrom(from._impl_.validator_updates_);
  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (from._internal_has_consensus_param_updates()) {
    _this->_internal_mutable_consensus_param_updates()->::tendermint::types::ConsensusParams::MergeFrom(
        from._internal_consensus_param_updates());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseEndBlock::CopyFrom(const ResponseEndBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEndBlock::IsInitialized() const {
  return true;
}

void ResponseEndBlock::InternalSwap(ResponseEndBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.validator_updates_.InternalSwap(&other->_impl_.validator_updates_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  swap(_impl_.consensus_param_updates_, other->_impl_.consensus_param_updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseEndBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[27]);
}

// ===================================================================

class ResponseCommit::_Internal {
 public:
};

ResponseCommit::ResponseCommit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseCommit)
}
ResponseCommit::ResponseCommit(const ResponseCommit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseCommit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.retain_height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.retain_height_ = from._impl_.retain_height_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseCommit)
}

inline void ResponseCommit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.retain_height_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseCommit::~ResponseCommit() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseCommit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseCommit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void ResponseCommit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseCommit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.retain_height_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseCommit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 retain_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.retain_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseCommit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseCommit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // int64 retain_height = 3;
  if (this->_internal_retain_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_retain_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseCommit)
  return target;
}

size_t ResponseCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseCommit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 retain_height = 3;
  if (this->_internal_retain_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_retain_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseCommit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseCommit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseCommit::GetClassData() const { return &_class_data_; }


void ResponseCommit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseCommit*>(&to_msg);
  auto& from = static_cast<const ResponseCommit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseCommit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_retain_height() != 0) {
    _this->_internal_set_retain_height(from._internal_retain_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseCommit::CopyFrom(const ResponseCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCommit::IsInitialized() const {
  return true;
}

void ResponseCommit::InternalSwap(ResponseCommit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.retain_height_, other->_impl_.retain_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseCommit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[28]);
}

// ===================================================================

class ResponseListSnapshots::_Internal {
 public:
};

ResponseListSnapshots::ResponseListSnapshots(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseListSnapshots)
}
ResponseListSnapshots::ResponseListSnapshots(const ResponseListSnapshots& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseListSnapshots* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.snapshots_){from._impl_.snapshots_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseListSnapshots)
}

inline void ResponseListSnapshots::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.snapshots_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseListSnapshots::~ResponseListSnapshots() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseListSnapshots)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseListSnapshots::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.snapshots_.~RepeatedPtrField();
}

void ResponseListSnapshots::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseListSnapshots::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseListSnapshots)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.snapshots_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseListSnapshots::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tendermint.abci.Snapshot snapshots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_snapshots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseListSnapshots::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseListSnapshots)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tendermint.abci.Snapshot snapshots = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_snapshots_size()); i < n; i++) {
    const auto& repfield = this->_internal_snapshots(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseListSnapshots)
  return target;
}

size_t ResponseListSnapshots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseListSnapshots)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.Snapshot snapshots = 1;
  total_size += 1UL * this->_internal_snapshots_size();
  for (const auto& msg : this->_impl_.snapshots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseListSnapshots::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseListSnapshots::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseListSnapshots::GetClassData() const { return &_class_data_; }


void ResponseListSnapshots::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseListSnapshots*>(&to_msg);
  auto& from = static_cast<const ResponseListSnapshots&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseListSnapshots)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.snapshots_.MergeFrom(from._impl_.snapshots_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseListSnapshots::CopyFrom(const ResponseListSnapshots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseListSnapshots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseListSnapshots::IsInitialized() const {
  return true;
}

void ResponseListSnapshots::InternalSwap(ResponseListSnapshots* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.snapshots_.InternalSwap(&other->_impl_.snapshots_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseListSnapshots::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[29]);
}

// ===================================================================

class ResponseOfferSnapshot::_Internal {
 public:
};

ResponseOfferSnapshot::ResponseOfferSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseOfferSnapshot)
}
ResponseOfferSnapshot::ResponseOfferSnapshot(const ResponseOfferSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseOfferSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseOfferSnapshot)
}

inline void ResponseOfferSnapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseOfferSnapshot::~ResponseOfferSnapshot() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseOfferSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseOfferSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseOfferSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseOfferSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseOfferSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseOfferSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.ResponseOfferSnapshot.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::tendermint::abci::ResponseOfferSnapshot_Result>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseOfferSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseOfferSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.ResponseOfferSnapshot.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseOfferSnapshot)
  return target;
}

size_t ResponseOfferSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseOfferSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.abci.ResponseOfferSnapshot.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseOfferSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseOfferSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseOfferSnapshot::GetClassData() const { return &_class_data_; }


void ResponseOfferSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseOfferSnapshot*>(&to_msg);
  auto& from = static_cast<const ResponseOfferSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseOfferSnapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseOfferSnapshot::CopyFrom(const ResponseOfferSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseOfferSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseOfferSnapshot::IsInitialized() const {
  return true;
}

void ResponseOfferSnapshot::InternalSwap(ResponseOfferSnapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseOfferSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[30]);
}

// ===================================================================

class ResponseLoadSnapshotChunk::_Internal {
 public:
};

ResponseLoadSnapshotChunk::ResponseLoadSnapshotChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseLoadSnapshotChunk)
}
ResponseLoadSnapshotChunk::ResponseLoadSnapshotChunk(const ResponseLoadSnapshotChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseLoadSnapshotChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chunk().empty()) {
    _this->_impl_.chunk_.Set(from._internal_chunk(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseLoadSnapshotChunk)
}

inline void ResponseLoadSnapshotChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseLoadSnapshotChunk::~ResponseLoadSnapshotChunk() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseLoadSnapshotChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseLoadSnapshotChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunk_.Destroy();
}

void ResponseLoadSnapshotChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseLoadSnapshotChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseLoadSnapshotChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseLoadSnapshotChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseLoadSnapshotChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseLoadSnapshotChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (!this->_internal_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseLoadSnapshotChunk)
  return target;
}

size_t ResponseLoadSnapshotChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseLoadSnapshotChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (!this->_internal_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseLoadSnapshotChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseLoadSnapshotChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseLoadSnapshotChunk::GetClassData() const { return &_class_data_; }


void ResponseLoadSnapshotChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseLoadSnapshotChunk*>(&to_msg);
  auto& from = static_cast<const ResponseLoadSnapshotChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseLoadSnapshotChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chunk().empty()) {
    _this->_internal_set_chunk(from._internal_chunk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseLoadSnapshotChunk::CopyFrom(const ResponseLoadSnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseLoadSnapshotChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLoadSnapshotChunk::IsInitialized() const {
  return true;
}

void ResponseLoadSnapshotChunk::InternalSwap(ResponseLoadSnapshotChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chunk_, lhs_arena,
      &other->_impl_.chunk_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseLoadSnapshotChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[31]);
}

// ===================================================================

class ResponseApplySnapshotChunk::_Internal {
 public:
};

ResponseApplySnapshotChunk::ResponseApplySnapshotChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseApplySnapshotChunk)
}
ResponseApplySnapshotChunk::ResponseApplySnapshotChunk(const ResponseApplySnapshotChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseApplySnapshotChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.refetch_chunks_){from._impl_.refetch_chunks_}
    , /*decltype(_impl_._refetch_chunks_cached_byte_size_)*/{0}
    , decltype(_impl_.reject_senders_){from._impl_.reject_senders_}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseApplySnapshotChunk)
}

inline void ResponseApplySnapshotChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.refetch_chunks_){arena}
    , /*decltype(_impl_._refetch_chunks_cached_byte_size_)*/{0}
    , decltype(_impl_.reject_senders_){arena}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseApplySnapshotChunk::~ResponseApplySnapshotChunk() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseApplySnapshotChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseApplySnapshotChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.refetch_chunks_.~RepeatedField();
  _impl_.reject_senders_.~RepeatedPtrField();
}

void ResponseApplySnapshotChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseApplySnapshotChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseApplySnapshotChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.refetch_chunks_.Clear();
  _impl_.reject_senders_.Clear();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseApplySnapshotChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.ResponseApplySnapshotChunk.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::tendermint::abci::ResponseApplySnapshotChunk_Result>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 refetch_chunks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_refetch_chunks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_refetch_chunks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string reject_senders = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reject_senders();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.ResponseApplySnapshotChunk.reject_senders"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseApplySnapshotChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseApplySnapshotChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.ResponseApplySnapshotChunk.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated uint32 refetch_chunks = 2;
  {
    int byte_size = _impl_._refetch_chunks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_refetch_chunks(), byte_size, target);
    }
  }

  // repeated string reject_senders = 3;
  for (int i = 0, n = this->_internal_reject_senders_size(); i < n; i++) {
    const auto& s = this->_internal_reject_senders(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.ResponseApplySnapshotChunk.reject_senders");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseApplySnapshotChunk)
  return target;
}

size_t ResponseApplySnapshotChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseApplySnapshotChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 refetch_chunks = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.refetch_chunks_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._refetch_chunks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string reject_senders = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.reject_senders_.size());
  for (int i = 0, n = _impl_.reject_senders_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.reject_senders_.Get(i));
  }

  // .tendermint.abci.ResponseApplySnapshotChunk.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseApplySnapshotChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseApplySnapshotChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseApplySnapshotChunk::GetClassData() const { return &_class_data_; }


void ResponseApplySnapshotChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseApplySnapshotChunk*>(&to_msg);
  auto& from = static_cast<const ResponseApplySnapshotChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseApplySnapshotChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.refetch_chunks_.MergeFrom(from._impl_.refetch_chunks_);
  _this->_impl_.reject_senders_.MergeFrom(from._impl_.reject_senders_);
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseApplySnapshotChunk::CopyFrom(const ResponseApplySnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseApplySnapshotChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseApplySnapshotChunk::IsInitialized() const {
  return true;
}

void ResponseApplySnapshotChunk::InternalSwap(ResponseApplySnapshotChunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.refetch_chunks_.InternalSwap(&other->_impl_.refetch_chunks_);
  _impl_.reject_senders_.InternalSwap(&other->_impl_.reject_senders_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseApplySnapshotChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[32]);
}

// ===================================================================

class ResponsePrepareProposal::_Internal {
 public:
};

ResponsePrepareProposal::ResponsePrepareProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponsePrepareProposal)
}
ResponsePrepareProposal::ResponsePrepareProposal(const ResponsePrepareProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponsePrepareProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponsePrepareProposal)
}

inline void ResponsePrepareProposal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponsePrepareProposal::~ResponsePrepareProposal() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponsePrepareProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponsePrepareProposal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txs_.~RepeatedPtrField();
}

void ResponsePrepareProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponsePrepareProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponsePrepareProposal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponsePrepareProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponsePrepareProposal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponsePrepareProposal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes txs = 1;
  for (int i = 0, n = this->_internal_txs_size(); i < n; i++) {
    const auto& s = this->_internal_txs(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponsePrepareProposal)
  return target;
}

size_t ResponsePrepareProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponsePrepareProposal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes txs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.txs_.size());
  for (int i = 0, n = _impl_.txs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.txs_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponsePrepareProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponsePrepareProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponsePrepareProposal::GetClassData() const { return &_class_data_; }


void ResponsePrepareProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponsePrepareProposal*>(&to_msg);
  auto& from = static_cast<const ResponsePrepareProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponsePrepareProposal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.txs_.MergeFrom(from._impl_.txs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponsePrepareProposal::CopyFrom(const ResponsePrepareProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponsePrepareProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePrepareProposal::IsInitialized() const {
  return true;
}

void ResponsePrepareProposal::InternalSwap(ResponsePrepareProposal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.txs_.InternalSwap(&other->_impl_.txs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsePrepareProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[33]);
}

// ===================================================================

class ResponseProcessProposal::_Internal {
 public:
};

ResponseProcessProposal::ResponseProcessProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ResponseProcessProposal)
}
ResponseProcessProposal::ResponseProcessProposal(const ResponseProcessProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseProcessProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ResponseProcessProposal)
}

inline void ResponseProcessProposal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseProcessProposal::~ResponseProcessProposal() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ResponseProcessProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseProcessProposal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseProcessProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseProcessProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ResponseProcessProposal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseProcessProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.ResponseProcessProposal.ProposalStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::tendermint::abci::ResponseProcessProposal_ProposalStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseProcessProposal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ResponseProcessProposal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.ResponseProcessProposal.ProposalStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ResponseProcessProposal)
  return target;
}

size_t ResponseProcessProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ResponseProcessProposal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.abci.ResponseProcessProposal.ProposalStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseProcessProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseProcessProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseProcessProposal::GetClassData() const { return &_class_data_; }


void ResponseProcessProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseProcessProposal*>(&to_msg);
  auto& from = static_cast<const ResponseProcessProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ResponseProcessProposal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseProcessProposal::CopyFrom(const ResponseProcessProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ResponseProcessProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseProcessProposal::IsInitialized() const {
  return true;
}

void ResponseProcessProposal::InternalSwap(ResponseProcessProposal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseProcessProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[34]);
}

// ===================================================================

class CommitInfo::_Internal {
 public:
};

CommitInfo::CommitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.CommitInfo)
}
CommitInfo::CommitInfo(const CommitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommitInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.votes_){from._impl_.votes_}
    , decltype(_impl_.round_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.round_ = from._impl_.round_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.CommitInfo)
}

inline void CommitInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.votes_){arena}
    , decltype(_impl_.round_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommitInfo::~CommitInfo() {
  // @@protoc_insertion_point(destructor:tendermint.abci.CommitInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.votes_.~RepeatedPtrField();
}

void CommitInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.CommitInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.votes_.Clear();
  _impl_.round_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.VoteInfo votes = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.CommitInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 round = 1;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_round(), target);
  }

  // repeated .tendermint.abci.VoteInfo votes = 2 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_votes_size()); i < n; i++) {
    const auto& repfield = this->_internal_votes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.CommitInfo)
  return target;
}

size_t CommitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.CommitInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.VoteInfo votes = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->_impl_.votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 round = 1;
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommitInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitInfo::GetClassData() const { return &_class_data_; }


void CommitInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommitInfo*>(&to_msg);
  auto& from = static_cast<const CommitInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.CommitInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.votes_.MergeFrom(from._impl_.votes_);
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitInfo::CopyFrom(const CommitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.CommitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitInfo::IsInitialized() const {
  return true;
}

void CommitInfo::InternalSwap(CommitInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.votes_.InternalSwap(&other->_impl_.votes_);
  swap(_impl_.round_, other->_impl_.round_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[35]);
}

// ===================================================================

class ExtendedCommitInfo::_Internal {
 public:
};

ExtendedCommitInfo::ExtendedCommitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ExtendedCommitInfo)
}
ExtendedCommitInfo::ExtendedCommitInfo(const ExtendedCommitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtendedCommitInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.votes_){from._impl_.votes_}
    , decltype(_impl_.round_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.round_ = from._impl_.round_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ExtendedCommitInfo)
}

inline void ExtendedCommitInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.votes_){arena}
    , decltype(_impl_.round_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtendedCommitInfo::~ExtendedCommitInfo() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ExtendedCommitInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtendedCommitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.votes_.~RepeatedPtrField();
}

void ExtendedCommitInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtendedCommitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ExtendedCommitInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.votes_.Clear();
  _impl_.round_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendedCommitInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.ExtendedVoteInfo votes = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtendedCommitInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ExtendedCommitInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 round = 1;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_round(), target);
  }

  // repeated .tendermint.abci.ExtendedVoteInfo votes = 2 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_votes_size()); i < n; i++) {
    const auto& repfield = this->_internal_votes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ExtendedCommitInfo)
  return target;
}

size_t ExtendedCommitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ExtendedCommitInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.ExtendedVoteInfo votes = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->_impl_.votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 round = 1;
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtendedCommitInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtendedCommitInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtendedCommitInfo::GetClassData() const { return &_class_data_; }


void ExtendedCommitInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtendedCommitInfo*>(&to_msg);
  auto& from = static_cast<const ExtendedCommitInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ExtendedCommitInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.votes_.MergeFrom(from._impl_.votes_);
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendedCommitInfo::CopyFrom(const ExtendedCommitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ExtendedCommitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedCommitInfo::IsInitialized() const {
  return true;
}

void ExtendedCommitInfo::InternalSwap(ExtendedCommitInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.votes_.InternalSwap(&other->_impl_.votes_);
  swap(_impl_.round_, other->_impl_.round_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendedCommitInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[36]);
}

// ===================================================================

class Event::_Internal {
 public:
};

Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Event* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.Event)
}

inline void Event::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){arena}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:tendermint.abci.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.~RepeatedPtrField();
  _impl_.type_.Destroy();
}

void Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.Event.type"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tendermint.abci.EventAttribute attributes = 2 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "attributes,omitempty"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.Event.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated .tendermint.abci.EventAttribute attributes = 2 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "attributes,omitempty"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.EventAttribute attributes = 2 [(.gogoproto.nullable) = false, (.gogoproto.jsontag) = "attributes,omitempty"];
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_impl_.attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }


void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.Event)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[37]);
}

// ===================================================================

class EventAttribute::_Internal {
 public:
};

EventAttribute::EventAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.EventAttribute)
}
EventAttribute::EventAttribute(const EventAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.EventAttribute)
}

inline void EventAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.index_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventAttribute::~EventAttribute() {
  // @@protoc_insertion_point(destructor:tendermint.abci.EventAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void EventAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.EventAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.index_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.EventAttribute.key"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.abci.EventAttribute.value"));
        } else
          goto handle_unusual;
        continue;
      // bool index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.EventAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.EventAttribute.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tendermint.abci.EventAttribute.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // bool index = 3;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.EventAttribute)
  return target;
}

size_t EventAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.EventAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bool index = 3;
  if (this->_internal_index() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventAttribute::GetClassData() const { return &_class_data_; }


void EventAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventAttribute*>(&to_msg);
  auto& from = static_cast<const EventAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.EventAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventAttribute::CopyFrom(const EventAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.EventAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAttribute::IsInitialized() const {
  return true;
}

void EventAttribute::InternalSwap(EventAttribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[38]);
}

// ===================================================================

class TxResult::_Internal {
 public:
  static const ::tendermint::abci::ResponseDeliverTx& result(const TxResult* msg);
};

const ::tendermint::abci::ResponseDeliverTx&
TxResult::_Internal::result(const TxResult* msg) {
  return *msg->_impl_.result_;
}
TxResult::TxResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.TxResult)
}
TxResult::TxResult(const TxResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.height_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::tendermint::abci::ResponseDeliverTx(*from._impl_.result_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.TxResult)
}

inline void TxResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.height_){int64_t{0}}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxResult::~TxResult() {
  // @@protoc_insertion_point(destructor:tendermint.abci.TxResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_;
}

void TxResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.TxResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.ResponseDeliverTx result = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.TxResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // bytes tx = 3;
  if (!this->_internal_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_tx(), target);
  }

  // .tendermint.abci.ResponseDeliverTx result = 4 [(.gogoproto.nullable) = false];
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.TxResult)
  return target;
}

size_t TxResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.TxResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 3;
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  // .tendermint.abci.ResponseDeliverTx result = 4 [(.gogoproto.nullable) = false];
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // uint32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxResult::GetClassData() const { return &_class_data_; }


void TxResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxResult*>(&to_msg);
  auto& from = static_cast<const TxResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.TxResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::tendermint::abci::ResponseDeliverTx::MergeFrom(
        from._internal_result());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxResult::CopyFrom(const TxResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.TxResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxResult::IsInitialized() const {
  return true;
}

void TxResult::InternalSwap(TxResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_, lhs_arena,
      &other->_impl_.tx_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxResult, _impl_.index_)
      + sizeof(TxResult::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(TxResult, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[39]);
}

// ===================================================================

class Validator::_Internal {
 public:
};

Validator::Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.Validator)
}
Validator::Validator(const Validator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Validator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.power_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.power_ = from._impl_.power_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.Validator)
}

inline void Validator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.power_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Validator::~Validator() {
  // @@protoc_insertion_point(destructor:tendermint.abci.Validator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Validator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void Validator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.Validator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.power_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Validator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 power = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Validator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.Validator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // int64 power = 3;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.Validator)
  return target;
}

size_t Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.Validator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // int64 power = 3;
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Validator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Validator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Validator::GetClassData() const { return &_class_data_; }


void Validator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Validator*>(&to_msg);
  auto& from = static_cast<const Validator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.Validator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_power() != 0) {
    _this->_internal_set_power(from._internal_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validator::IsInitialized() const {
  return true;
}

void Validator::InternalSwap(Validator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  swap(_impl_.power_, other->_impl_.power_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Validator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[40]);
}

// ===================================================================

class ValidatorUpdate::_Internal {
 public:
  static const ::tendermint::crypto::PublicKey& pub_key(const ValidatorUpdate* msg);
};

const ::tendermint::crypto::PublicKey&
ValidatorUpdate::_Internal::pub_key(const ValidatorUpdate* msg) {
  return *msg->_impl_.pub_key_;
}
void ValidatorUpdate::clear_pub_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.pub_key_ != nullptr) {
    delete _impl_.pub_key_;
  }
  _impl_.pub_key_ = nullptr;
}
ValidatorUpdate::ValidatorUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ValidatorUpdate)
}
ValidatorUpdate::ValidatorUpdate(const ValidatorUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.power_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pub_key()) {
    _this->_impl_.pub_key_ = new ::tendermint::crypto::PublicKey(*from._impl_.pub_key_);
  }
  _this->_impl_.power_ = from._impl_.power_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ValidatorUpdate)
}

inline void ValidatorUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.power_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValidatorUpdate::~ValidatorUpdate() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ValidatorUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pub_key_;
}

void ValidatorUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ValidatorUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pub_key_ != nullptr) {
    delete _impl_.pub_key_;
  }
  _impl_.pub_key_ = nullptr;
  _impl_.power_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.crypto.PublicKey pub_key = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidatorUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ValidatorUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.crypto.PublicKey pub_key = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_pub_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pub_key(this),
        _Internal::pub_key(this).GetCachedSize(), target, stream);
  }

  // int64 power = 2;
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ValidatorUpdate)
  return target;
}

size_t ValidatorUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ValidatorUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.crypto.PublicKey pub_key = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_pub_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pub_key_);
  }

  // int64 power = 2;
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorUpdate::GetClassData() const { return &_class_data_; }


void ValidatorUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorUpdate*>(&to_msg);
  auto& from = static_cast<const ValidatorUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ValidatorUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pub_key()) {
    _this->_internal_mutable_pub_key()->::tendermint::crypto::PublicKey::MergeFrom(
        from._internal_pub_key());
  }
  if (from._internal_power() != 0) {
    _this->_internal_set_power(from._internal_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorUpdate::CopyFrom(const ValidatorUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ValidatorUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorUpdate::IsInitialized() const {
  return true;
}

void ValidatorUpdate::InternalSwap(ValidatorUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatorUpdate, _impl_.power_)
      + sizeof(ValidatorUpdate::_impl_.power_)
      - PROTOBUF_FIELD_OFFSET(ValidatorUpdate, _impl_.pub_key_)>(
          reinterpret_cast<char*>(&_impl_.pub_key_),
          reinterpret_cast<char*>(&other->_impl_.pub_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[41]);
}

// ===================================================================

class VoteInfo::_Internal {
 public:
  static const ::tendermint::abci::Validator& validator(const VoteInfo* msg);
};

const ::tendermint::abci::Validator&
VoteInfo::_Internal::validator(const VoteInfo* msg) {
  return *msg->_impl_.validator_;
}
VoteInfo::VoteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.VoteInfo)
}
VoteInfo::VoteInfo(const VoteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoteInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.validator_){nullptr}
    , decltype(_impl_.signed_last_block_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_validator()) {
    _this->_impl_.validator_ = new ::tendermint::abci::Validator(*from._impl_.validator_);
  }
  _this->_impl_.signed_last_block_ = from._impl_.signed_last_block_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.VoteInfo)
}

inline void VoteInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.validator_){nullptr}
    , decltype(_impl_.signed_last_block_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VoteInfo::~VoteInfo() {
  // @@protoc_insertion_point(destructor:tendermint.abci.VoteInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.validator_;
}

void VoteInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.VoteInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.validator_ != nullptr) {
    delete _impl_.validator_;
  }
  _impl_.validator_ = nullptr;
  _impl_.signed_last_block_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.Validator validator = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool signed_last_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.signed_last_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.VoteInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.Validator validator = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_validator()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::validator(this),
        _Internal::validator(this).GetCachedSize(), target, stream);
  }

  // bool signed_last_block = 2;
  if (this->_internal_signed_last_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_signed_last_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.VoteInfo)
  return target;
}

size_t VoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.VoteInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.abci.Validator validator = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.validator_);
  }

  // bool signed_last_block = 2;
  if (this->_internal_signed_last_block() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoteInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteInfo::GetClassData() const { return &_class_data_; }


void VoteInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoteInfo*>(&to_msg);
  auto& from = static_cast<const VoteInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.VoteInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_validator()) {
    _this->_internal_mutable_validator()->::tendermint::abci::Validator::MergeFrom(
        from._internal_validator());
  }
  if (from._internal_signed_last_block() != 0) {
    _this->_internal_set_signed_last_block(from._internal_signed_last_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteInfo::CopyFrom(const VoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.VoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteInfo::IsInitialized() const {
  return true;
}

void VoteInfo::InternalSwap(VoteInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteInfo, _impl_.signed_last_block_)
      + sizeof(VoteInfo::_impl_.signed_last_block_)
      - PROTOBUF_FIELD_OFFSET(VoteInfo, _impl_.validator_)>(
          reinterpret_cast<char*>(&_impl_.validator_),
          reinterpret_cast<char*>(&other->_impl_.validator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[42]);
}

// ===================================================================

class ExtendedVoteInfo::_Internal {
 public:
  static const ::tendermint::abci::Validator& validator(const ExtendedVoteInfo* msg);
};

const ::tendermint::abci::Validator&
ExtendedVoteInfo::_Internal::validator(const ExtendedVoteInfo* msg) {
  return *msg->_impl_.validator_;
}
ExtendedVoteInfo::ExtendedVoteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.ExtendedVoteInfo)
}
ExtendedVoteInfo::ExtendedVoteInfo(const ExtendedVoteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtendedVoteInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vote_extension_){}
    , decltype(_impl_.validator_){nullptr}
    , decltype(_impl_.signed_last_block_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.vote_extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vote_extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vote_extension().empty()) {
    _this->_impl_.vote_extension_.Set(from._internal_vote_extension(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_validator()) {
    _this->_impl_.validator_ = new ::tendermint::abci::Validator(*from._impl_.validator_);
  }
  _this->_impl_.signed_last_block_ = from._impl_.signed_last_block_;
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.ExtendedVoteInfo)
}

inline void ExtendedVoteInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vote_extension_){}
    , decltype(_impl_.validator_){nullptr}
    , decltype(_impl_.signed_last_block_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.vote_extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vote_extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExtendedVoteInfo::~ExtendedVoteInfo() {
  // @@protoc_insertion_point(destructor:tendermint.abci.ExtendedVoteInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtendedVoteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vote_extension_.Destroy();
  if (this != internal_default_instance()) delete _impl_.validator_;
}

void ExtendedVoteInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtendedVoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.ExtendedVoteInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vote_extension_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.validator_ != nullptr) {
    delete _impl_.validator_;
  }
  _impl_.validator_ = nullptr;
  _impl_.signed_last_block_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendedVoteInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.Validator validator = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool signed_last_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.signed_last_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes vote_extension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vote_extension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtendedVoteInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.ExtendedVoteInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.Validator validator = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_validator()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::validator(this),
        _Internal::validator(this).GetCachedSize(), target, stream);
  }

  // bool signed_last_block = 2;
  if (this->_internal_signed_last_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_signed_last_block(), target);
  }

  // bytes vote_extension = 3;
  if (!this->_internal_vote_extension().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_vote_extension(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.ExtendedVoteInfo)
  return target;
}

size_t ExtendedVoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.ExtendedVoteInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes vote_extension = 3;
  if (!this->_internal_vote_extension().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vote_extension());
  }

  // .tendermint.abci.Validator validator = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.validator_);
  }

  // bool signed_last_block = 2;
  if (this->_internal_signed_last_block() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtendedVoteInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtendedVoteInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtendedVoteInfo::GetClassData() const { return &_class_data_; }


void ExtendedVoteInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtendedVoteInfo*>(&to_msg);
  auto& from = static_cast<const ExtendedVoteInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.ExtendedVoteInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vote_extension().empty()) {
    _this->_internal_set_vote_extension(from._internal_vote_extension());
  }
  if (from._internal_has_validator()) {
    _this->_internal_mutable_validator()->::tendermint::abci::Validator::MergeFrom(
        from._internal_validator());
  }
  if (from._internal_signed_last_block() != 0) {
    _this->_internal_set_signed_last_block(from._internal_signed_last_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendedVoteInfo::CopyFrom(const ExtendedVoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.ExtendedVoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedVoteInfo::IsInitialized() const {
  return true;
}

void ExtendedVoteInfo::InternalSwap(ExtendedVoteInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vote_extension_, lhs_arena,
      &other->_impl_.vote_extension_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtendedVoteInfo, _impl_.signed_last_block_)
      + sizeof(ExtendedVoteInfo::_impl_.signed_last_block_)
      - PROTOBUF_FIELD_OFFSET(ExtendedVoteInfo, _impl_.validator_)>(
          reinterpret_cast<char*>(&_impl_.validator_),
          reinterpret_cast<char*>(&other->_impl_.validator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendedVoteInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[43]);
}

// ===================================================================

class Misbehavior::_Internal {
 public:
  static const ::tendermint::abci::Validator& validator(const Misbehavior* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const Misbehavior* msg);
};

const ::tendermint::abci::Validator&
Misbehavior::_Internal::validator(const Misbehavior* msg) {
  return *msg->_impl_.validator_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Misbehavior::_Internal::time(const Misbehavior* msg) {
  return *msg->_impl_.time_;
}
void Misbehavior::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
Misbehavior::Misbehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.Misbehavior)
}
Misbehavior::Misbehavior(const Misbehavior& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Misbehavior* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.validator_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.height_){}
    , decltype(_impl_.total_voting_power_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_validator()) {
    _this->_impl_.validator_ = new ::tendermint::abci::Validator(*from._impl_.validator_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.Misbehavior)
}

inline void Misbehavior::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.validator_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.height_){int64_t{0}}
    , decltype(_impl_.total_voting_power_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Misbehavior::~Misbehavior() {
  // @@protoc_insertion_point(destructor:tendermint.abci.Misbehavior)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Misbehavior::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.validator_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void Misbehavior::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Misbehavior::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.Misbehavior)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.validator_ != nullptr) {
    delete _impl_.validator_;
  }
  _impl_.validator_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Misbehavior::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.MisbehaviorType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::abci::MisbehaviorType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.abci.Validator validator = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_voting_power = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.total_voting_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Misbehavior::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.Misbehavior)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.abci.MisbehaviorType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .tendermint.abci.Validator validator = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_validator()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::validator(this),
        _Internal::validator(this).GetCachedSize(), target, stream);
  }

  // int64 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_height(), target);
  }

  // .google.protobuf.Timestamp time = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // int64 total_voting_power = 5;
  if (this->_internal_total_voting_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_total_voting_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.Misbehavior)
  return target;
}

size_t Misbehavior::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.Misbehavior)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.abci.Validator validator = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.validator_);
  }

  // .google.protobuf.Timestamp time = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // int64 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  // int64 total_voting_power = 5;
  if (this->_internal_total_voting_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_voting_power());
  }

  // .tendermint.abci.MisbehaviorType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Misbehavior::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Misbehavior::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Misbehavior::GetClassData() const { return &_class_data_; }


void Misbehavior::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Misbehavior*>(&to_msg);
  auto& from = static_cast<const Misbehavior&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.Misbehavior)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_validator()) {
    _this->_internal_mutable_validator()->::tendermint::abci::Validator::MergeFrom(
        from._internal_validator());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_total_voting_power() != 0) {
    _this->_internal_set_total_voting_power(from._internal_total_voting_power());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Misbehavior::CopyFrom(const Misbehavior& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.Misbehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Misbehavior::IsInitialized() const {
  return true;
}

void Misbehavior::InternalSwap(Misbehavior* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Misbehavior, _impl_.type_)
      + sizeof(Misbehavior::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Misbehavior, _impl_.validator_)>(
          reinterpret_cast<char*>(&_impl_.validator_),
          reinterpret_cast<char*>(&other->_impl_.validator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Misbehavior::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[44]);
}

// ===================================================================

class Snapshot::_Internal {
 public:
};

Snapshot::Snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tendermint.abci.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Snapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.format_){}
    , decltype(_impl_.chunks_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chunks_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.chunks_));
  // @@protoc_insertion_point(copy_constructor:tendermint.abci.Snapshot)
}

inline void Snapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.height_){uint64_t{0u}}
    , decltype(_impl_.format_){0u}
    , decltype(_impl_.chunks_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:tendermint.abci.Snapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Snapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
  _impl_.metadata_.Destroy();
}

void Snapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.abci.Snapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.chunks_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.chunks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.abci.Snapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // uint32 format = 2;
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_format(), target);
  }

  // uint32 chunks = 3;
  if (this->_internal_chunks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chunks(), target);
  }

  // bytes hash = 4;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hash(), target);
  }

  // bytes metadata = 5;
  if (!this->_internal_metadata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.abci.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.abci.Snapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 4;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes metadata = 5;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_metadata());
  }

  // uint64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_height());
  }

  // uint32 format = 2;
  if (this->_internal_format() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_format());
  }

  // uint32 chunks = 3;
  if (this->_internal_chunks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chunks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Snapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snapshot::GetClassData() const { return &_class_data_; }


void Snapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Snapshot*>(&to_msg);
  auto& from = static_cast<const Snapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.abci.Snapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_format() != 0) {
    _this->_internal_set_format(from._internal_format());
  }
  if (from._internal_chunks() != 0) {
    _this->_internal_set_chunks(from._internal_chunks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.abci.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.chunks_)
      + sizeof(Snapshot::_impl_.chunks_)
      - PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fabci_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fabci_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fabci_2ftypes_2eproto[45]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace abci
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::abci::Request*
Arena::CreateMaybeMessage< ::tendermint::abci::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestEcho*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestEcho >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestEcho >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestFlush*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestFlush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestFlush >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestInfo*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestInitChain*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestInitChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestInitChain >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestQuery*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestBeginBlock*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestBeginBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestBeginBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestCheckTx*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestCheckTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestCheckTx >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestDeliverTx*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestDeliverTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestDeliverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestEndBlock*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestEndBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestEndBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestCommit*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestCommit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestCommit >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestListSnapshots*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestListSnapshots >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestListSnapshots >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestOfferSnapshot*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestOfferSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestOfferSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestLoadSnapshotChunk*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestLoadSnapshotChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestLoadSnapshotChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestApplySnapshotChunk*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestApplySnapshotChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestApplySnapshotChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestPrepareProposal*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestPrepareProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestPrepareProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::RequestProcessProposal*
Arena::CreateMaybeMessage< ::tendermint::abci::RequestProcessProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::RequestProcessProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::Response*
Arena::CreateMaybeMessage< ::tendermint::abci::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseException*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseException >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseException >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseEcho*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseEcho >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseEcho >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseFlush*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseFlush >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseFlush >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseInfo*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseInitChain*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseInitChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseInitChain >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseQuery*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseBeginBlock*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseBeginBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseBeginBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseCheckTx*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseCheckTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseCheckTx >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseDeliverTx*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseDeliverTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseDeliverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseEndBlock*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseEndBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseEndBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseCommit*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseCommit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseCommit >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseListSnapshots*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseListSnapshots >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseListSnapshots >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseOfferSnapshot*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseOfferSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseOfferSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseLoadSnapshotChunk*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseLoadSnapshotChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseLoadSnapshotChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseApplySnapshotChunk*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseApplySnapshotChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseApplySnapshotChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponsePrepareProposal*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponsePrepareProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponsePrepareProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ResponseProcessProposal*
Arena::CreateMaybeMessage< ::tendermint::abci::ResponseProcessProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ResponseProcessProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::CommitInfo*
Arena::CreateMaybeMessage< ::tendermint::abci::CommitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::CommitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ExtendedCommitInfo*
Arena::CreateMaybeMessage< ::tendermint::abci::ExtendedCommitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ExtendedCommitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::Event*
Arena::CreateMaybeMessage< ::tendermint::abci::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::EventAttribute*
Arena::CreateMaybeMessage< ::tendermint::abci::EventAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::EventAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::TxResult*
Arena::CreateMaybeMessage< ::tendermint::abci::TxResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::TxResult >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::Validator*
Arena::CreateMaybeMessage< ::tendermint::abci::Validator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::Validator >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ValidatorUpdate*
Arena::CreateMaybeMessage< ::tendermint::abci::ValidatorUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ValidatorUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::VoteInfo*
Arena::CreateMaybeMessage< ::tendermint::abci::VoteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::VoteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::ExtendedVoteInfo*
Arena::CreateMaybeMessage< ::tendermint::abci::ExtendedVoteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::ExtendedVoteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::Misbehavior*
Arena::CreateMaybeMessage< ::tendermint::abci::Misbehavior >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::Misbehavior >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::abci::Snapshot*
Arena::CreateMaybeMessage< ::tendermint::abci::Snapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::abci::Snapshot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
