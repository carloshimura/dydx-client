// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/crypto/multisig/v1beta1/multisig.proto

#include "cosmos/crypto/multisig/v1beta1/multisig.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cosmos {
namespace crypto {
namespace multisig {
namespace v1beta1 {
PROTOBUF_CONSTEXPR MultiSignature::MultiSignature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signatures_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiSignatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiSignatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiSignatureDefaultTypeInternal() {}
  union {
    MultiSignature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiSignatureDefaultTypeInternal _MultiSignature_default_instance_;
PROTOBUF_CONSTEXPR CompactBitArray::CompactBitArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elems_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_bits_stored_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompactBitArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompactBitArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompactBitArrayDefaultTypeInternal() {}
  union {
    CompactBitArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompactBitArrayDefaultTypeInternal _CompactBitArray_default_instance_;
}  // namespace v1beta1
}  // namespace multisig
}  // namespace crypto
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto = nullptr;

const uint32_t TableStruct_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::crypto::multisig::v1beta1::MultiSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::crypto::multisig::v1beta1::MultiSignature, _impl_.signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::crypto::multisig::v1beta1::CompactBitArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::crypto::multisig::v1beta1::CompactBitArray, _impl_.extra_bits_stored_),
  PROTOBUF_FIELD_OFFSET(::cosmos::crypto::multisig::v1beta1::CompactBitArray, _impl_.elems_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cosmos::crypto::multisig::v1beta1::MultiSignature)},
  { 7, -1, -1, sizeof(::cosmos::crypto::multisig::v1beta1::CompactBitArray)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cosmos::crypto::multisig::v1beta1::_MultiSignature_default_instance_._instance,
  &::cosmos::crypto::multisig::v1beta1::_CompactBitArray_default_instance_._instance,
};

const char descriptor_table_protodef_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-cosmos/crypto/multisig/v1beta1/multisi"
  "g.proto\022\036cosmos.crypto.multisig.v1beta1\032"
  "\024gogoproto/gogo.proto\"*\n\016MultiSignature\022"
  "\022\n\nsignatures\030\001 \003(\014:\004\320\241\037\001\"A\n\017CompactBitA"
  "rray\022\031\n\021extra_bits_stored\030\001 \001(\r\022\r\n\005elems"
  "\030\002 \001(\014:\004\230\240\037\000B+Z)github.com/cosmos/cosmos"
  "-sdk/crypto/typesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_deps[1] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::_pbi::once_flag descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto = {
    false, false, 265, descriptor_table_protodef_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto,
    "cosmos/crypto/multisig/v1beta1/multisig.proto",
    &descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_once, descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto::offsets,
    file_level_metadata_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto, file_level_enum_descriptors_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto,
    file_level_service_descriptors_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_getter() {
  return &descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto(&descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto);
namespace cosmos {
namespace crypto {
namespace multisig {
namespace v1beta1 {

// ===================================================================

class MultiSignature::_Internal {
 public:
};

MultiSignature::MultiSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.crypto.multisig.v1beta1.MultiSignature)
}
MultiSignature::MultiSignature(const MultiSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiSignature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signatures_){from._impl_.signatures_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.crypto.multisig.v1beta1.MultiSignature)
}

inline void MultiSignature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signatures_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiSignature::~MultiSignature() {
  // @@protoc_insertion_point(destructor:cosmos.crypto.multisig.v1beta1.MultiSignature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signatures_.~RepeatedPtrField();
}

void MultiSignature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.crypto.multisig.v1beta1.MultiSignature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signatures_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiSignature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes signatures = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signatures();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiSignature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.crypto.multisig.v1beta1.MultiSignature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes signatures = 1;
  for (int i = 0, n = this->_internal_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_signatures(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.crypto.multisig.v1beta1.MultiSignature)
  return target;
}

size_t MultiSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.crypto.multisig.v1beta1.MultiSignature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signatures = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.signatures_.size());
  for (int i = 0, n = _impl_.signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.signatures_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiSignature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiSignature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiSignature::GetClassData() const { return &_class_data_; }


void MultiSignature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiSignature*>(&to_msg);
  auto& from = static_cast<const MultiSignature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.crypto.multisig.v1beta1.MultiSignature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.signatures_.MergeFrom(from._impl_.signatures_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiSignature::CopyFrom(const MultiSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.crypto.multisig.v1beta1.MultiSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiSignature::IsInitialized() const {
  return true;
}

void MultiSignature::InternalSwap(MultiSignature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signatures_.InternalSwap(&other->_impl_.signatures_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiSignature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_getter, &descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_once,
      file_level_metadata_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto[0]);
}

// ===================================================================

class CompactBitArray::_Internal {
 public:
};

CompactBitArray::CompactBitArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.crypto.multisig.v1beta1.CompactBitArray)
}
CompactBitArray::CompactBitArray(const CompactBitArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompactBitArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){}
    , decltype(_impl_.extra_bits_stored_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.elems_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.elems_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_elems().empty()) {
    _this->_impl_.elems_.Set(from._internal_elems(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.extra_bits_stored_ = from._impl_.extra_bits_stored_;
  // @@protoc_insertion_point(copy_constructor:cosmos.crypto.multisig.v1beta1.CompactBitArray)
}

inline void CompactBitArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){}
    , decltype(_impl_.extra_bits_stored_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.elems_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.elems_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompactBitArray::~CompactBitArray() {
  // @@protoc_insertion_point(destructor:cosmos.crypto.multisig.v1beta1.CompactBitArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompactBitArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.elems_.Destroy();
}

void CompactBitArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompactBitArray::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.crypto.multisig.v1beta1.CompactBitArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elems_.ClearToEmpty();
  _impl_.extra_bits_stored_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompactBitArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 extra_bits_stored = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.extra_bits_stored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes elems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_elems();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompactBitArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.crypto.multisig.v1beta1.CompactBitArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extra_bits_stored = 1;
  if (this->_internal_extra_bits_stored() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extra_bits_stored(), target);
  }

  // bytes elems = 2;
  if (!this->_internal_elems().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_elems(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.crypto.multisig.v1beta1.CompactBitArray)
  return target;
}

size_t CompactBitArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.crypto.multisig.v1beta1.CompactBitArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes elems = 2;
  if (!this->_internal_elems().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_elems());
  }

  // uint32 extra_bits_stored = 1;
  if (this->_internal_extra_bits_stored() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_bits_stored());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompactBitArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompactBitArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompactBitArray::GetClassData() const { return &_class_data_; }


void CompactBitArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompactBitArray*>(&to_msg);
  auto& from = static_cast<const CompactBitArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.crypto.multisig.v1beta1.CompactBitArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_elems().empty()) {
    _this->_internal_set_elems(from._internal_elems());
  }
  if (from._internal_extra_bits_stored() != 0) {
    _this->_internal_set_extra_bits_stored(from._internal_extra_bits_stored());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompactBitArray::CopyFrom(const CompactBitArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.crypto.multisig.v1beta1.CompactBitArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactBitArray::IsInitialized() const {
  return true;
}

void CompactBitArray::InternalSwap(CompactBitArray* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.elems_, lhs_arena,
      &other->_impl_.elems_, rhs_arena
  );
  swap(_impl_.extra_bits_stored_, other->_impl_.extra_bits_stored_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactBitArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_getter, &descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto_once,
      file_level_metadata_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace multisig
}  // namespace crypto
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::crypto::multisig::v1beta1::MultiSignature*
Arena::CreateMaybeMessage< ::cosmos::crypto::multisig::v1beta1::MultiSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::crypto::multisig::v1beta1::MultiSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::crypto::multisig::v1beta1::CompactBitArray*
Arena::CreateMaybeMessage< ::cosmos::crypto::multisig::v1beta1::CompactBitArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::crypto::multisig::v1beta1::CompactBitArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
