// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/crypto/multisig/v1beta1/multisig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto;
namespace cosmos {
namespace crypto {
namespace multisig {
namespace v1beta1 {
class CompactBitArray;
struct CompactBitArrayDefaultTypeInternal;
extern CompactBitArrayDefaultTypeInternal _CompactBitArray_default_instance_;
class MultiSignature;
struct MultiSignatureDefaultTypeInternal;
extern MultiSignatureDefaultTypeInternal _MultiSignature_default_instance_;
}  // namespace v1beta1
}  // namespace multisig
}  // namespace crypto
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> ::cosmos::crypto::multisig::v1beta1::CompactBitArray* Arena::CreateMaybeMessage<::cosmos::crypto::multisig::v1beta1::CompactBitArray>(Arena*);
template<> ::cosmos::crypto::multisig::v1beta1::MultiSignature* Arena::CreateMaybeMessage<::cosmos::crypto::multisig::v1beta1::MultiSignature>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cosmos {
namespace crypto {
namespace multisig {
namespace v1beta1 {

// ===================================================================

class MultiSignature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.crypto.multisig.v1beta1.MultiSignature) */ {
 public:
  inline MultiSignature() : MultiSignature(nullptr) {}
  ~MultiSignature() override;
  explicit PROTOBUF_CONSTEXPR MultiSignature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiSignature(const MultiSignature& from);
  MultiSignature(MultiSignature&& from) noexcept
    : MultiSignature() {
    *this = ::std::move(from);
  }

  inline MultiSignature& operator=(const MultiSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiSignature& operator=(MultiSignature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiSignature& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiSignature* internal_default_instance() {
    return reinterpret_cast<const MultiSignature*>(
               &_MultiSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MultiSignature& a, MultiSignature& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiSignature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiSignature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiSignature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiSignature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultiSignature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MultiSignature& from) {
    MultiSignature::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiSignature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.crypto.multisig.v1beta1.MultiSignature";
  }
  protected:
  explicit MultiSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 1,
  };
  // repeated bytes signatures = 1;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  const std::string& signatures(int index) const;
  std::string* mutable_signatures(int index);
  void set_signatures(int index, const std::string& value);
  void set_signatures(int index, std::string&& value);
  void set_signatures(int index, const char* value);
  void set_signatures(int index, const void* value, size_t size);
  std::string* add_signatures();
  void add_signatures(const std::string& value);
  void add_signatures(std::string&& value);
  void add_signatures(const char* value);
  void add_signatures(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signatures();
  private:
  const std::string& _internal_signatures(int index) const;
  std::string* _internal_add_signatures();
  public:

  // @@protoc_insertion_point(class_scope:cosmos.crypto.multisig.v1beta1.MultiSignature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signatures_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto;
};
// -------------------------------------------------------------------

class CompactBitArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.crypto.multisig.v1beta1.CompactBitArray) */ {
 public:
  inline CompactBitArray() : CompactBitArray(nullptr) {}
  ~CompactBitArray() override;
  explicit PROTOBUF_CONSTEXPR CompactBitArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompactBitArray(const CompactBitArray& from);
  CompactBitArray(CompactBitArray&& from) noexcept
    : CompactBitArray() {
    *this = ::std::move(from);
  }

  inline CompactBitArray& operator=(const CompactBitArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactBitArray& operator=(CompactBitArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompactBitArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompactBitArray* internal_default_instance() {
    return reinterpret_cast<const CompactBitArray*>(
               &_CompactBitArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CompactBitArray& a, CompactBitArray& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactBitArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompactBitArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompactBitArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompactBitArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompactBitArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompactBitArray& from) {
    CompactBitArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactBitArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.crypto.multisig.v1beta1.CompactBitArray";
  }
  protected:
  explicit CompactBitArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemsFieldNumber = 2,
    kExtraBitsStoredFieldNumber = 1,
  };
  // bytes elems = 2;
  void clear_elems();
  const std::string& elems() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_elems(ArgT0&& arg0, ArgT... args);
  std::string* mutable_elems();
  PROTOBUF_NODISCARD std::string* release_elems();
  void set_allocated_elems(std::string* elems);
  private:
  const std::string& _internal_elems() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_elems(const std::string& value);
  std::string* _internal_mutable_elems();
  public:

  // uint32 extra_bits_stored = 1;
  void clear_extra_bits_stored();
  uint32_t extra_bits_stored() const;
  void set_extra_bits_stored(uint32_t value);
  private:
  uint32_t _internal_extra_bits_stored() const;
  void _internal_set_extra_bits_stored(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cosmos.crypto.multisig.v1beta1.CompactBitArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr elems_;
    uint32_t extra_bits_stored_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MultiSignature

// repeated bytes signatures = 1;
inline int MultiSignature::_internal_signatures_size() const {
  return _impl_.signatures_.size();
}
inline int MultiSignature::signatures_size() const {
  return _internal_signatures_size();
}
inline void MultiSignature::clear_signatures() {
  _impl_.signatures_.Clear();
}
inline std::string* MultiSignature::add_signatures() {
  std::string* _s = _internal_add_signatures();
  // @@protoc_insertion_point(field_add_mutable:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
  return _s;
}
inline const std::string& MultiSignature::_internal_signatures(int index) const {
  return _impl_.signatures_.Get(index);
}
inline const std::string& MultiSignature::signatures(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
  return _internal_signatures(index);
}
inline std::string* MultiSignature::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
  return _impl_.signatures_.Mutable(index);
}
inline void MultiSignature::set_signatures(int index, const std::string& value) {
  _impl_.signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
}
inline void MultiSignature::set_signatures(int index, std::string&& value) {
  _impl_.signatures_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
}
inline void MultiSignature::set_signatures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
}
inline void MultiSignature::set_signatures(int index, const void* value, size_t size) {
  _impl_.signatures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
}
inline std::string* MultiSignature::_internal_add_signatures() {
  return _impl_.signatures_.Add();
}
inline void MultiSignature::add_signatures(const std::string& value) {
  _impl_.signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
}
inline void MultiSignature::add_signatures(std::string&& value) {
  _impl_.signatures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
}
inline void MultiSignature::add_signatures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
}
inline void MultiSignature::add_signatures(const void* value, size_t size) {
  _impl_.signatures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultiSignature::signatures() const {
  // @@protoc_insertion_point(field_list:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
  return _impl_.signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultiSignature::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.crypto.multisig.v1beta1.MultiSignature.signatures)
  return &_impl_.signatures_;
}

// -------------------------------------------------------------------

// CompactBitArray

// uint32 extra_bits_stored = 1;
inline void CompactBitArray::clear_extra_bits_stored() {
  _impl_.extra_bits_stored_ = 0u;
}
inline uint32_t CompactBitArray::_internal_extra_bits_stored() const {
  return _impl_.extra_bits_stored_;
}
inline uint32_t CompactBitArray::extra_bits_stored() const {
  // @@protoc_insertion_point(field_get:cosmos.crypto.multisig.v1beta1.CompactBitArray.extra_bits_stored)
  return _internal_extra_bits_stored();
}
inline void CompactBitArray::_internal_set_extra_bits_stored(uint32_t value) {
  
  _impl_.extra_bits_stored_ = value;
}
inline void CompactBitArray::set_extra_bits_stored(uint32_t value) {
  _internal_set_extra_bits_stored(value);
  // @@protoc_insertion_point(field_set:cosmos.crypto.multisig.v1beta1.CompactBitArray.extra_bits_stored)
}

// bytes elems = 2;
inline void CompactBitArray::clear_elems() {
  _impl_.elems_.ClearToEmpty();
}
inline const std::string& CompactBitArray::elems() const {
  // @@protoc_insertion_point(field_get:cosmos.crypto.multisig.v1beta1.CompactBitArray.elems)
  return _internal_elems();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompactBitArray::set_elems(ArgT0&& arg0, ArgT... args) {
 
 _impl_.elems_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.crypto.multisig.v1beta1.CompactBitArray.elems)
}
inline std::string* CompactBitArray::mutable_elems() {
  std::string* _s = _internal_mutable_elems();
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.multisig.v1beta1.CompactBitArray.elems)
  return _s;
}
inline const std::string& CompactBitArray::_internal_elems() const {
  return _impl_.elems_.Get();
}
inline void CompactBitArray::_internal_set_elems(const std::string& value) {
  
  _impl_.elems_.Set(value, GetArenaForAllocation());
}
inline std::string* CompactBitArray::_internal_mutable_elems() {
  
  return _impl_.elems_.Mutable(GetArenaForAllocation());
}
inline std::string* CompactBitArray::release_elems() {
  // @@protoc_insertion_point(field_release:cosmos.crypto.multisig.v1beta1.CompactBitArray.elems)
  return _impl_.elems_.Release();
}
inline void CompactBitArray::set_allocated_elems(std::string* elems) {
  if (elems != nullptr) {
    
  } else {
    
  }
  _impl_.elems_.SetAllocated(elems, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.elems_.IsDefault()) {
    _impl_.elems_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.crypto.multisig.v1beta1.CompactBitArray.elems)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace multisig
}  // namespace crypto
}  // namespace cosmos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto
