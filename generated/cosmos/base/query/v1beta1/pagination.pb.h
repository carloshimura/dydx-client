// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/query/v1beta1/pagination.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto;
namespace cosmos {
namespace base {
namespace query {
namespace v1beta1 {
class PageRequest;
struct PageRequestDefaultTypeInternal;
extern PageRequestDefaultTypeInternal _PageRequest_default_instance_;
class PageResponse;
struct PageResponseDefaultTypeInternal;
extern PageResponseDefaultTypeInternal _PageResponse_default_instance_;
}  // namespace v1beta1
}  // namespace query
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> ::cosmos::base::query::v1beta1::PageRequest* Arena::CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(Arena*);
template<> ::cosmos::base::query::v1beta1::PageResponse* Arena::CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cosmos {
namespace base {
namespace query {
namespace v1beta1 {

// ===================================================================

class PageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.query.v1beta1.PageRequest) */ {
 public:
  inline PageRequest() : PageRequest(nullptr) {}
  ~PageRequest() override;
  explicit PROTOBUF_CONSTEXPR PageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageRequest(const PageRequest& from);
  PageRequest(PageRequest&& from) noexcept
    : PageRequest() {
    *this = ::std::move(from);
  }

  inline PageRequest& operator=(const PageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageRequest& operator=(PageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageRequest* internal_default_instance() {
    return reinterpret_cast<const PageRequest*>(
               &_PageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PageRequest& a, PageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageRequest& from) {
    PageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.base.query.v1beta1.PageRequest";
  }
  protected:
  explicit PageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLimitFieldNumber = 3,
    kCountTotalFieldNumber = 4,
    kReverseFieldNumber = 5,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 offset = 2;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // uint64 limit = 3;
  void clear_limit();
  uint64_t limit() const;
  void set_limit(uint64_t value);
  private:
  uint64_t _internal_limit() const;
  void _internal_set_limit(uint64_t value);
  public:

  // bool count_total = 4;
  void clear_count_total();
  bool count_total() const;
  void set_count_total(bool value);
  private:
  bool _internal_count_total() const;
  void _internal_set_count_total(bool value);
  public:

  // bool reverse = 5;
  void clear_reverse();
  bool reverse() const;
  void set_reverse(bool value);
  private:
  bool _internal_reverse() const;
  void _internal_set_reverse(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cosmos.base.query.v1beta1.PageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    uint64_t offset_;
    uint64_t limit_;
    bool count_total_;
    bool reverse_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto;
};
// -------------------------------------------------------------------

class PageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.query.v1beta1.PageResponse) */ {
 public:
  inline PageResponse() : PageResponse(nullptr) {}
  ~PageResponse() override;
  explicit PROTOBUF_CONSTEXPR PageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageResponse(const PageResponse& from);
  PageResponse(PageResponse&& from) noexcept
    : PageResponse() {
    *this = ::std::move(from);
  }

  inline PageResponse& operator=(const PageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageResponse& operator=(PageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageResponse* internal_default_instance() {
    return reinterpret_cast<const PageResponse*>(
               &_PageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PageResponse& a, PageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PageResponse& from) {
    PageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.base.query.v1beta1.PageResponse";
  }
  protected:
  explicit PageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextKeyFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // bytes next_key = 1;
  void clear_next_key();
  const std::string& next_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_key();
  PROTOBUF_NODISCARD std::string* release_next_key();
  void set_allocated_next_key(std::string* next_key);
  private:
  const std::string& _internal_next_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_key(const std::string& value);
  std::string* _internal_mutable_next_key();
  public:

  // uint64 total = 2;
  void clear_total();
  uint64_t total() const;
  void set_total(uint64_t value);
  private:
  uint64_t _internal_total() const;
  void _internal_set_total(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cosmos.base.query.v1beta1.PageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_key_;
    uint64_t total_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PageRequest

// bytes key = 1;
inline void PageRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& PageRequest::key() const {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PageRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageRequest.key)
}
inline std::string* PageRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cosmos.base.query.v1beta1.PageRequest.key)
  return _s;
}
inline const std::string& PageRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void PageRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* PageRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* PageRequest::release_key() {
  // @@protoc_insertion_point(field_release:cosmos.base.query.v1beta1.PageRequest.key)
  return _impl_.key_.Release();
}
inline void PageRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.query.v1beta1.PageRequest.key)
}

// uint64 offset = 2;
inline void PageRequest::clear_offset() {
  _impl_.offset_ = uint64_t{0u};
}
inline uint64_t PageRequest::_internal_offset() const {
  return _impl_.offset_;
}
inline uint64_t PageRequest::offset() const {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageRequest.offset)
  return _internal_offset();
}
inline void PageRequest::_internal_set_offset(uint64_t value) {
  
  _impl_.offset_ = value;
}
inline void PageRequest::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageRequest.offset)
}

// uint64 limit = 3;
inline void PageRequest::clear_limit() {
  _impl_.limit_ = uint64_t{0u};
}
inline uint64_t PageRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline uint64_t PageRequest::limit() const {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageRequest.limit)
  return _internal_limit();
}
inline void PageRequest::_internal_set_limit(uint64_t value) {
  
  _impl_.limit_ = value;
}
inline void PageRequest::set_limit(uint64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageRequest.limit)
}

// bool count_total = 4;
inline void PageRequest::clear_count_total() {
  _impl_.count_total_ = false;
}
inline bool PageRequest::_internal_count_total() const {
  return _impl_.count_total_;
}
inline bool PageRequest::count_total() const {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageRequest.count_total)
  return _internal_count_total();
}
inline void PageRequest::_internal_set_count_total(bool value) {
  
  _impl_.count_total_ = value;
}
inline void PageRequest::set_count_total(bool value) {
  _internal_set_count_total(value);
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageRequest.count_total)
}

// bool reverse = 5;
inline void PageRequest::clear_reverse() {
  _impl_.reverse_ = false;
}
inline bool PageRequest::_internal_reverse() const {
  return _impl_.reverse_;
}
inline bool PageRequest::reverse() const {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageRequest.reverse)
  return _internal_reverse();
}
inline void PageRequest::_internal_set_reverse(bool value) {
  
  _impl_.reverse_ = value;
}
inline void PageRequest::set_reverse(bool value) {
  _internal_set_reverse(value);
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageRequest.reverse)
}

// -------------------------------------------------------------------

// PageResponse

// bytes next_key = 1;
inline void PageResponse::clear_next_key() {
  _impl_.next_key_.ClearToEmpty();
}
inline const std::string& PageResponse::next_key() const {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageResponse.next_key)
  return _internal_next_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PageResponse::set_next_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageResponse.next_key)
}
inline std::string* PageResponse::mutable_next_key() {
  std::string* _s = _internal_mutable_next_key();
  // @@protoc_insertion_point(field_mutable:cosmos.base.query.v1beta1.PageResponse.next_key)
  return _s;
}
inline const std::string& PageResponse::_internal_next_key() const {
  return _impl_.next_key_.Get();
}
inline void PageResponse::_internal_set_next_key(const std::string& value) {
  
  _impl_.next_key_.Set(value, GetArenaForAllocation());
}
inline std::string* PageResponse::_internal_mutable_next_key() {
  
  return _impl_.next_key_.Mutable(GetArenaForAllocation());
}
inline std::string* PageResponse::release_next_key() {
  // @@protoc_insertion_point(field_release:cosmos.base.query.v1beta1.PageResponse.next_key)
  return _impl_.next_key_.Release();
}
inline void PageResponse::set_allocated_next_key(std::string* next_key) {
  if (next_key != nullptr) {
    
  } else {
    
  }
  _impl_.next_key_.SetAllocated(next_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_key_.IsDefault()) {
    _impl_.next_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.query.v1beta1.PageResponse.next_key)
}

// uint64 total = 2;
inline void PageResponse::clear_total() {
  _impl_.total_ = uint64_t{0u};
}
inline uint64_t PageResponse::_internal_total() const {
  return _impl_.total_;
}
inline uint64_t PageResponse::total() const {
  // @@protoc_insertion_point(field_get:cosmos.base.query.v1beta1.PageResponse.total)
  return _internal_total();
}
inline void PageResponse::_internal_set_total(uint64_t value) {
  
  _impl_.total_ = value;
}
inline void PageResponse::set_total(uint64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:cosmos.base.query.v1beta1.PageResponse.total)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace query
}  // namespace base
}  // namespace cosmos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto
