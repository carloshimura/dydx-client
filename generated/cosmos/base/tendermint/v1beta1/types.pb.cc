// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/tendermint/v1beta1/types.proto

#include "cosmos/base/tendermint/v1beta1/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cosmos {
namespace base {
namespace tendermint {
namespace v1beta1 {
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.evidence_)*/nullptr
  , /*decltype(_impl_.last_commit_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chain_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_commit_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.validators_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.next_validators_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consensus_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_results_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.evidence_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proposer_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.last_block_id_)*/nullptr
  , /*decltype(_impl_.height_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace v1beta1
}  // namespace tendermint
}  // namespace base
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_.evidence_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_.last_commit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.last_block_id_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.last_commit_hash_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.data_hash_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.validators_hash_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.next_validators_hash_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.consensus_hash_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.app_hash_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.last_results_hash_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.evidence_hash_),
  PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.proposer_address_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cosmos::base::tendermint::v1beta1::Block)},
  { 10, -1, -1, sizeof(::cosmos::base::tendermint::v1beta1::Header)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cosmos::base::tendermint::v1beta1::_Block_default_instance_._instance,
  &::cosmos::base::tendermint::v1beta1::_Header_default_instance_._instance,
};

const char descriptor_table_protodef_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*cosmos/base/tendermint/v1beta1/types.p"
  "roto\022\036cosmos.base.tendermint.v1beta1\032\024go"
  "goproto/gogo.proto\032\034tendermint/types/typ"
  "es.proto\032\037tendermint/types/evidence.prot"
  "o\032\036tendermint/version/types.proto\032\037googl"
  "e/protobuf/timestamp.proto\032\021amino/amino."
  "proto\"\347\001\n\005Block\022A\n\006header\030\001 \001(\0132&.cosmos"
  ".base.tendermint.v1beta1.HeaderB\t\310\336\037\000\250\347\260"
  "*\001\022/\n\004data\030\002 \001(\0132\026.tendermint.types.Data"
  "B\t\310\336\037\000\250\347\260*\001\022;\n\010evidence\030\003 \001(\0132\036.tendermi"
  "nt.types.EvidenceListB\t\310\336\037\000\250\347\260*\001\022-\n\013last"
  "_commit\030\004 \001(\0132\030.tendermint.types.Commit\""
  "\302\003\n\006Header\0229\n\007version\030\001 \001(\0132\035.tendermint"
  ".version.ConsensusB\t\310\336\037\000\250\347\260*\001\022\035\n\010chain_i"
  "d\030\002 \001(\tB\013\342\336\037\007ChainID\022\016\n\006height\030\003 \001(\003\0227\n\004"
  "time\030\004 \001(\0132\032.google.protobuf.TimestampB\r"
  "\310\336\037\000\250\347\260*\001\220\337\037\001\022;\n\rlast_block_id\030\005 \001(\0132\031.t"
  "endermint.types.BlockIDB\t\310\336\037\000\250\347\260*\001\022\030\n\020la"
  "st_commit_hash\030\006 \001(\014\022\021\n\tdata_hash\030\007 \001(\014\022"
  "\027\n\017validators_hash\030\010 \001(\014\022\034\n\024next_validat"
  "ors_hash\030\t \001(\014\022\026\n\016consensus_hash\030\n \001(\014\022\020"
  "\n\010app_hash\030\013 \001(\014\022\031\n\021last_results_hash\030\014 "
  "\001(\014\022\025\n\revidence_hash\030\r \001(\014\022\030\n\020proposer_a"
  "ddress\030\016 \001(\tB4Z2github.com/cosmos/cosmos"
  "-sdk/client/grpc/tmserviceb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_deps[6] = {
  &::descriptor_table_amino_2famino_2eproto,
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_tendermint_2ftypes_2fevidence_2eproto,
  &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
  &::descriptor_table_tendermint_2fversion_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto = {
    false, false, 994, descriptor_table_protodef_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto,
    "cosmos/base/tendermint/v1beta1/types.proto",
    &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_once, descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_deps, 6, 2,
    schemas, file_default_instances, TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto::offsets,
    file_level_metadata_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto, file_level_enum_descriptors_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto,
    file_level_service_descriptors_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_getter() {
  return &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto(&descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto);
namespace cosmos {
namespace base {
namespace tendermint {
namespace v1beta1 {

// ===================================================================

class Block::_Internal {
 public:
  static const ::cosmos::base::tendermint::v1beta1::Header& header(const Block* msg);
  static const ::tendermint::types::Data& data(const Block* msg);
  static const ::tendermint::types::EvidenceList& evidence(const Block* msg);
  static const ::tendermint::types::Commit& last_commit(const Block* msg);
};

const ::cosmos::base::tendermint::v1beta1::Header&
Block::_Internal::header(const Block* msg) {
  return *msg->_impl_.header_;
}
const ::tendermint::types::Data&
Block::_Internal::data(const Block* msg) {
  return *msg->_impl_.data_;
}
const ::tendermint::types::EvidenceList&
Block::_Internal::evidence(const Block* msg) {
  return *msg->_impl_.evidence_;
}
const ::tendermint::types::Commit&
Block::_Internal::last_commit(const Block* msg) {
  return *msg->_impl_.last_commit_;
}
void Block::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
void Block::clear_evidence() {
  if (GetArenaForAllocation() == nullptr && _impl_.evidence_ != nullptr) {
    delete _impl_.evidence_;
  }
  _impl_.evidence_ = nullptr;
}
void Block::clear_last_commit() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_commit_ != nullptr) {
    delete _impl_.last_commit_;
  }
  _impl_.last_commit_ = nullptr;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.tendermint.v1beta1.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Block* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.evidence_){nullptr}
    , decltype(_impl_.last_commit_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::cosmos::base::tendermint::v1beta1::Header(*from._impl_.header_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::tendermint::types::Data(*from._impl_.data_);
  }
  if (from._internal_has_evidence()) {
    _this->_impl_.evidence_ = new ::tendermint::types::EvidenceList(*from._impl_.evidence_);
  }
  if (from._internal_has_last_commit()) {
    _this->_impl_.last_commit_ = new ::tendermint::types::Commit(*from._impl_.last_commit_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.tendermint.v1beta1.Block)
}

inline void Block::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.evidence_){nullptr}
    , decltype(_impl_.last_commit_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:cosmos.base.tendermint.v1beta1.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.evidence_;
  if (this != internal_default_instance()) delete _impl_.last_commit_;
}

void Block::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.tendermint.v1beta1.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.evidence_ != nullptr) {
    delete _impl_.evidence_;
  }
  _impl_.evidence_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_commit_ != nullptr) {
    delete _impl_.last_commit_;
  }
  _impl_.last_commit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.tendermint.v1beta1.Header header = 1 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.Data data = 2 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.EvidenceList evidence = 3 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_evidence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.Commit last_commit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.tendermint.v1beta1.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.base.tendermint.v1beta1.Header header = 1 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.Data data = 2 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.EvidenceList evidence = 3 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (this->_internal_has_evidence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::evidence(this),
        _Internal::evidence(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.Commit last_commit = 4;
  if (this->_internal_has_last_commit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::last_commit(this),
        _Internal::last_commit(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.tendermint.v1beta1.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.tendermint.v1beta1.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.tendermint.v1beta1.Header header = 1 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .tendermint.types.Data data = 2 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // .tendermint.types.EvidenceList evidence = 3 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (this->_internal_has_evidence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.evidence_);
  }

  // .tendermint.types.Commit last_commit = 4;
  if (this->_internal_has_last_commit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_commit_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }


void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Block*>(&to_msg);
  auto& from = static_cast<const Block&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.tendermint.v1beta1.Block)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::cosmos::base::tendermint::v1beta1::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::tendermint::types::Data::MergeFrom(
        from._internal_data());
  }
  if (from._internal_has_evidence()) {
    _this->_internal_mutable_evidence()->::tendermint::types::EvidenceList::MergeFrom(
        from._internal_evidence());
  }
  if (from._internal_has_last_commit()) {
    _this->_internal_mutable_last_commit()->::tendermint::types::Commit::MergeFrom(
        from._internal_last_commit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.tendermint.v1beta1.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, _impl_.last_commit_)
      + sizeof(Block::_impl_.last_commit_)
      - PROTOBUF_FIELD_OFFSET(Block, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto[0]);
}

// ===================================================================

class Header::_Internal {
 public:
  static const ::tendermint::version::Consensus& version(const Header* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const Header* msg);
  static const ::tendermint::types::BlockID& last_block_id(const Header* msg);
};

const ::tendermint::version::Consensus&
Header::_Internal::version(const Header* msg) {
  return *msg->_impl_.version_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Header::_Internal::time(const Header* msg) {
  return *msg->_impl_.time_;
}
const ::tendermint::types::BlockID&
Header::_Internal::last_block_id(const Header* msg) {
  return *msg->_impl_.last_block_id_;
}
void Header::clear_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
}
void Header::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void Header::clear_last_block_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_block_id_ != nullptr) {
    delete _impl_.last_block_id_;
  }
  _impl_.last_block_id_ = nullptr;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.tendermint.v1beta1.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chain_id_){}
    , decltype(_impl_.last_commit_hash_){}
    , decltype(_impl_.data_hash_){}
    , decltype(_impl_.validators_hash_){}
    , decltype(_impl_.next_validators_hash_){}
    , decltype(_impl_.consensus_hash_){}
    , decltype(_impl_.app_hash_){}
    , decltype(_impl_.last_results_hash_){}
    , decltype(_impl_.evidence_hash_){}
    , decltype(_impl_.proposer_address_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.last_block_id_){nullptr}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    _this->_impl_.chain_id_.Set(from._internal_chain_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.last_commit_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_commit_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_commit_hash().empty()) {
    _this->_impl_.last_commit_hash_.Set(from._internal_last_commit_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_hash().empty()) {
    _this->_impl_.data_hash_.Set(from._internal_data_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.validators_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validators_hash().empty()) {
    _this->_impl_.validators_hash_.Set(from._internal_validators_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.next_validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_validators_hash().empty()) {
    _this->_impl_.next_validators_hash_.Set(from._internal_next_validators_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.consensus_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consensus_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consensus_hash().empty()) {
    _this->_impl_.consensus_hash_.Set(from._internal_consensus_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_hash().empty()) {
    _this->_impl_.app_hash_.Set(from._internal_app_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.last_results_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_results_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_results_hash().empty()) {
    _this->_impl_.last_results_hash_.Set(from._internal_last_results_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.evidence_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.evidence_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_evidence_hash().empty()) {
    _this->_impl_.evidence_hash_.Set(from._internal_evidence_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.proposer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proposer_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proposer_address().empty()) {
    _this->_impl_.proposer_address_.Set(from._internal_proposer_address(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::tendermint::version::Consensus(*from._impl_.version_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_last_block_id()) {
    _this->_impl_.last_block_id_ = new ::tendermint::types::BlockID(*from._impl_.last_block_id_);
  }
  _this->_impl_.height_ = from._impl_.height_;
  // @@protoc_insertion_point(copy_constructor:cosmos.base.tendermint.v1beta1.Header)
}

inline void Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chain_id_){}
    , decltype(_impl_.last_commit_hash_){}
    , decltype(_impl_.data_hash_){}
    , decltype(_impl_.validators_hash_){}
    , decltype(_impl_.next_validators_hash_){}
    , decltype(_impl_.consensus_hash_){}
    , decltype(_impl_.app_hash_){}
    , decltype(_impl_.last_results_hash_){}
    , decltype(_impl_.evidence_hash_){}
    , decltype(_impl_.proposer_address_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.last_block_id_){nullptr}
    , decltype(_impl_.height_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_commit_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_commit_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.validators_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.next_validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consensus_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consensus_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_results_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_results_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.evidence_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.evidence_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proposer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proposer_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:cosmos.base.tendermint.v1beta1.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chain_id_.Destroy();
  _impl_.last_commit_hash_.Destroy();
  _impl_.data_hash_.Destroy();
  _impl_.validators_hash_.Destroy();
  _impl_.next_validators_hash_.Destroy();
  _impl_.consensus_hash_.Destroy();
  _impl_.app_hash_.Destroy();
  _impl_.last_results_hash_.Destroy();
  _impl_.evidence_hash_.Destroy();
  _impl_.proposer_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.version_;
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.last_block_id_;
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.tendermint.v1beta1.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chain_id_.ClearToEmpty();
  _impl_.last_commit_hash_.ClearToEmpty();
  _impl_.data_hash_.ClearToEmpty();
  _impl_.validators_hash_.ClearToEmpty();
  _impl_.next_validators_hash_.ClearToEmpty();
  _impl_.consensus_hash_.ClearToEmpty();
  _impl_.app_hash_.ClearToEmpty();
  _impl_.last_results_hash_.ClearToEmpty();
  _impl_.evidence_hash_.ClearToEmpty();
  _impl_.proposer_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_block_id_ != nullptr) {
    delete _impl_.last_block_id_;
  }
  _impl_.last_block_id_ = nullptr;
  _impl_.height_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.version.Consensus version = 1 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chain_id = 2 [(.gogoproto.customname) = "ChainID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.tendermint.v1beta1.Header.chain_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.BlockID last_block_id = 5 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_block_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes last_commit_hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_last_commit_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_data_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes validators_hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_validators_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes next_validators_hash = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_next_validators_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes consensus_hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_consensus_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes app_hash = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_app_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes last_results_hash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_last_results_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes evidence_hash = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_evidence_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string proposer_address = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_proposer_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.tendermint.v1beta1.Header.proposer_address"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.tendermint.v1beta1.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.version.Consensus version = 1 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (this->_internal_has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // string chain_id = 2 [(.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.base.tendermint.v1beta1.Header.chain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chain_id(), target);
  }

  // int64 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_height(), target);
  }

  // .google.protobuf.Timestamp time = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.BlockID last_block_id = 5 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (this->_internal_has_last_block_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::last_block_id(this),
        _Internal::last_block_id(this).GetCachedSize(), target, stream);
  }

  // bytes last_commit_hash = 6;
  if (!this->_internal_last_commit_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_last_commit_hash(), target);
  }

  // bytes data_hash = 7;
  if (!this->_internal_data_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data_hash(), target);
  }

  // bytes validators_hash = 8;
  if (!this->_internal_validators_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_validators_hash(), target);
  }

  // bytes next_validators_hash = 9;
  if (!this->_internal_next_validators_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_next_validators_hash(), target);
  }

  // bytes consensus_hash = 10;
  if (!this->_internal_consensus_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_consensus_hash(), target);
  }

  // bytes app_hash = 11;
  if (!this->_internal_app_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_app_hash(), target);
  }

  // bytes last_results_hash = 12;
  if (!this->_internal_last_results_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_last_results_hash(), target);
  }

  // bytes evidence_hash = 13;
  if (!this->_internal_evidence_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_evidence_hash(), target);
  }

  // string proposer_address = 14;
  if (!this->_internal_proposer_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proposer_address().data(), static_cast<int>(this->_internal_proposer_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.base.tendermint.v1beta1.Header.proposer_address");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_proposer_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.tendermint.v1beta1.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.tendermint.v1beta1.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 2 [(.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // bytes last_commit_hash = 6;
  if (!this->_internal_last_commit_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_commit_hash());
  }

  // bytes data_hash = 7;
  if (!this->_internal_data_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_hash());
  }

  // bytes validators_hash = 8;
  if (!this->_internal_validators_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_validators_hash());
  }

  // bytes next_validators_hash = 9;
  if (!this->_internal_next_validators_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_next_validators_hash());
  }

  // bytes consensus_hash = 10;
  if (!this->_internal_consensus_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_consensus_hash());
  }

  // bytes app_hash = 11;
  if (!this->_internal_app_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_hash());
  }

  // bytes last_results_hash = 12;
  if (!this->_internal_last_results_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_results_hash());
  }

  // bytes evidence_hash = 13;
  if (!this->_internal_evidence_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_evidence_hash());
  }

  // string proposer_address = 14;
  if (!this->_internal_proposer_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proposer_address());
  }

  // .tendermint.version.Consensus version = 1 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_);
  }

  // .google.protobuf.Timestamp time = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .tendermint.types.BlockID last_block_id = 5 [(.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (this->_internal_has_last_block_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_block_id_);
  }

  // int64 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.tendermint.v1beta1.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (!from._internal_last_commit_hash().empty()) {
    _this->_internal_set_last_commit_hash(from._internal_last_commit_hash());
  }
  if (!from._internal_data_hash().empty()) {
    _this->_internal_set_data_hash(from._internal_data_hash());
  }
  if (!from._internal_validators_hash().empty()) {
    _this->_internal_set_validators_hash(from._internal_validators_hash());
  }
  if (!from._internal_next_validators_hash().empty()) {
    _this->_internal_set_next_validators_hash(from._internal_next_validators_hash());
  }
  if (!from._internal_consensus_hash().empty()) {
    _this->_internal_set_consensus_hash(from._internal_consensus_hash());
  }
  if (!from._internal_app_hash().empty()) {
    _this->_internal_set_app_hash(from._internal_app_hash());
  }
  if (!from._internal_last_results_hash().empty()) {
    _this->_internal_set_last_results_hash(from._internal_last_results_hash());
  }
  if (!from._internal_evidence_hash().empty()) {
    _this->_internal_set_evidence_hash(from._internal_evidence_hash());
  }
  if (!from._internal_proposer_address().empty()) {
    _this->_internal_set_proposer_address(from._internal_proposer_address());
  }
  if (from._internal_has_version()) {
    _this->_internal_mutable_version()->::tendermint::version::Consensus::MergeFrom(
        from._internal_version());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_last_block_id()) {
    _this->_internal_mutable_last_block_id()->::tendermint::types::BlockID::MergeFrom(
        from._internal_last_block_id());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.tendermint.v1beta1.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chain_id_, lhs_arena,
      &other->_impl_.chain_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_commit_hash_, lhs_arena,
      &other->_impl_.last_commit_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_hash_, lhs_arena,
      &other->_impl_.data_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.validators_hash_, lhs_arena,
      &other->_impl_.validators_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_validators_hash_, lhs_arena,
      &other->_impl_.next_validators_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.consensus_hash_, lhs_arena,
      &other->_impl_.consensus_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_hash_, lhs_arena,
      &other->_impl_.app_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_results_hash_, lhs_arena,
      &other->_impl_.last_results_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.evidence_hash_, lhs_arena,
      &other->_impl_.evidence_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proposer_address_, lhs_arena,
      &other->_impl_.proposer_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.height_)
      + sizeof(Header::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tendermint
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::base::tendermint::v1beta1::Block*
Arena::CreateMaybeMessage< ::cosmos::base::tendermint::v1beta1::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::tendermint::v1beta1::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::tendermint::v1beta1::Header*
Arena::CreateMaybeMessage< ::cosmos::base::tendermint::v1beta1::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::tendermint::v1beta1::Header >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
