// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/base/tendermint/v1beta1/query.proto

#include "cosmos/base/tendermint/v1beta1/query.pb.h"
#include "cosmos/base/tendermint/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace base {
namespace tendermint {
namespace v1beta1 {

static const char* QueryService_method_names[] = {
  "/cosmos.base.tendermint.v1beta1.Service/GetNodeInfo",
  "/cosmos.base.tendermint.v1beta1.Service/GetSyncing",
  "/cosmos.base.tendermint.v1beta1.Service/GetLatestBlock",
  "/cosmos.base.tendermint.v1beta1.Service/GetBlockByHeight",
  "/cosmos.base.tendermint.v1beta1.Service/GetLatestValidatorSet",
  "/cosmos.base.tendermint.v1beta1.Service/GetValidatorSetByHeight",
  "/cosmos.base.tendermint.v1beta1.Service/ABCIQuery",
};

std::unique_ptr< QueryService::Stub> QueryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< QueryService::Stub> stub(new QueryService::Stub(channel, options));
  return stub;
}

QueryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetNodeInfo_(QueryService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSyncing_(QueryService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLatestBlock_(QueryService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockByHeight_(QueryService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLatestValidatorSet_(QueryService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetValidatorSetByHeight_(QueryService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ABCIQuery_(QueryService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status QueryService::Stub::GetNodeInfo(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetNodeInfoRequest& request, ::cosmos::base::tendermint::v1beta1::GetNodeInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::base::tendermint::v1beta1::GetNodeInfoRequest, ::cosmos::base::tendermint::v1beta1::GetNodeInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNodeInfo_, context, request, response);
}

void QueryService::Stub::async::GetNodeInfo(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetNodeInfoRequest* request, ::cosmos::base::tendermint::v1beta1::GetNodeInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::base::tendermint::v1beta1::GetNodeInfoRequest, ::cosmos::base::tendermint::v1beta1::GetNodeInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeInfo_, context, request, response, std::move(f));
}

void QueryService::Stub::async::GetNodeInfo(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetNodeInfoRequest* request, ::cosmos::base::tendermint::v1beta1::GetNodeInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::GetNodeInfoResponse>* QueryService::Stub::PrepareAsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetNodeInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::base::tendermint::v1beta1::GetNodeInfoResponse, ::cosmos::base::tendermint::v1beta1::GetNodeInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNodeInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::GetNodeInfoResponse>* QueryService::Stub::AsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetNodeInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNodeInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status QueryService::Stub::GetSyncing(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetSyncingRequest& request, ::cosmos::base::tendermint::v1beta1::GetSyncingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::base::tendermint::v1beta1::GetSyncingRequest, ::cosmos::base::tendermint::v1beta1::GetSyncingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSyncing_, context, request, response);
}

void QueryService::Stub::async::GetSyncing(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetSyncingRequest* request, ::cosmos::base::tendermint::v1beta1::GetSyncingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::base::tendermint::v1beta1::GetSyncingRequest, ::cosmos::base::tendermint::v1beta1::GetSyncingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSyncing_, context, request, response, std::move(f));
}

void QueryService::Stub::async::GetSyncing(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetSyncingRequest* request, ::cosmos::base::tendermint::v1beta1::GetSyncingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSyncing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::GetSyncingResponse>* QueryService::Stub::PrepareAsyncGetSyncingRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetSyncingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::base::tendermint::v1beta1::GetSyncingResponse, ::cosmos::base::tendermint::v1beta1::GetSyncingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSyncing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::GetSyncingResponse>* QueryService::Stub::AsyncGetSyncingRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetSyncingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSyncingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status QueryService::Stub::GetLatestBlock(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetLatestBlockRequest& request, ::cosmos::base::tendermint::v1beta1::GetLatestBlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::base::tendermint::v1beta1::GetLatestBlockRequest, ::cosmos::base::tendermint::v1beta1::GetLatestBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLatestBlock_, context, request, response);
}

void QueryService::Stub::async::GetLatestBlock(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetLatestBlockRequest* request, ::cosmos::base::tendermint::v1beta1::GetLatestBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::base::tendermint::v1beta1::GetLatestBlockRequest, ::cosmos::base::tendermint::v1beta1::GetLatestBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestBlock_, context, request, response, std::move(f));
}

void QueryService::Stub::async::GetLatestBlock(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetLatestBlockRequest* request, ::cosmos::base::tendermint::v1beta1::GetLatestBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::GetLatestBlockResponse>* QueryService::Stub::PrepareAsyncGetLatestBlockRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetLatestBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::base::tendermint::v1beta1::GetLatestBlockResponse, ::cosmos::base::tendermint::v1beta1::GetLatestBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLatestBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::GetLatestBlockResponse>* QueryService::Stub::AsyncGetLatestBlockRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetLatestBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLatestBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status QueryService::Stub::GetBlockByHeight(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetBlockByHeightRequest& request, ::cosmos::base::tendermint::v1beta1::GetBlockByHeightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::base::tendermint::v1beta1::GetBlockByHeightRequest, ::cosmos::base::tendermint::v1beta1::GetBlockByHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockByHeight_, context, request, response);
}

void QueryService::Stub::async::GetBlockByHeight(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetBlockByHeightRequest* request, ::cosmos::base::tendermint::v1beta1::GetBlockByHeightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::base::tendermint::v1beta1::GetBlockByHeightRequest, ::cosmos::base::tendermint::v1beta1::GetBlockByHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByHeight_, context, request, response, std::move(f));
}

void QueryService::Stub::async::GetBlockByHeight(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetBlockByHeightRequest* request, ::cosmos::base::tendermint::v1beta1::GetBlockByHeightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockByHeight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::GetBlockByHeightResponse>* QueryService::Stub::PrepareAsyncGetBlockByHeightRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::base::tendermint::v1beta1::GetBlockByHeightResponse, ::cosmos::base::tendermint::v1beta1::GetBlockByHeightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockByHeight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::GetBlockByHeightResponse>* QueryService::Stub::AsyncGetBlockByHeightRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetBlockByHeightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockByHeightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status QueryService::Stub::GetLatestValidatorSet(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetRequest& request, ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetRequest, ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLatestValidatorSet_, context, request, response);
}

void QueryService::Stub::async::GetLatestValidatorSet(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetRequest* request, ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetRequest, ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestValidatorSet_, context, request, response, std::move(f));
}

void QueryService::Stub::async::GetLatestValidatorSet(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetRequest* request, ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestValidatorSet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetResponse>* QueryService::Stub::PrepareAsyncGetLatestValidatorSetRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetResponse, ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLatestValidatorSet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetResponse>* QueryService::Stub::AsyncGetLatestValidatorSetRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLatestValidatorSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status QueryService::Stub::GetValidatorSetByHeight(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightRequest& request, ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightRequest, ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetValidatorSetByHeight_, context, request, response);
}

void QueryService::Stub::async::GetValidatorSetByHeight(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightRequest* request, ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightRequest, ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValidatorSetByHeight_, context, request, response, std::move(f));
}

void QueryService::Stub::async::GetValidatorSetByHeight(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightRequest* request, ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValidatorSetByHeight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightResponse>* QueryService::Stub::PrepareAsyncGetValidatorSetByHeightRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightResponse, ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetValidatorSetByHeight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightResponse>* QueryService::Stub::AsyncGetValidatorSetByHeightRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetValidatorSetByHeightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status QueryService::Stub::ABCIQuery(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::ABCIQueryRequest& request, ::cosmos::base::tendermint::v1beta1::ABCIQueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::base::tendermint::v1beta1::ABCIQueryRequest, ::cosmos::base::tendermint::v1beta1::ABCIQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ABCIQuery_, context, request, response);
}

void QueryService::Stub::async::ABCIQuery(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::ABCIQueryRequest* request, ::cosmos::base::tendermint::v1beta1::ABCIQueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::base::tendermint::v1beta1::ABCIQueryRequest, ::cosmos::base::tendermint::v1beta1::ABCIQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ABCIQuery_, context, request, response, std::move(f));
}

void QueryService::Stub::async::ABCIQuery(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::ABCIQueryRequest* request, ::cosmos::base::tendermint::v1beta1::ABCIQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ABCIQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::ABCIQueryResponse>* QueryService::Stub::PrepareAsyncABCIQueryRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::ABCIQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::base::tendermint::v1beta1::ABCIQueryResponse, ::cosmos::base::tendermint::v1beta1::ABCIQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ABCIQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::tendermint::v1beta1::ABCIQueryResponse>* QueryService::Stub::AsyncABCIQueryRaw(::grpc::ClientContext* context, const ::cosmos::base::tendermint::v1beta1::ABCIQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncABCIQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

QueryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::cosmos::base::tendermint::v1beta1::GetNodeInfoRequest, ::cosmos::base::tendermint::v1beta1::GetNodeInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](QueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::base::tendermint::v1beta1::GetNodeInfoRequest* req,
             ::cosmos::base::tendermint::v1beta1::GetNodeInfoResponse* resp) {
               return service->GetNodeInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::cosmos::base::tendermint::v1beta1::GetSyncingRequest, ::cosmos::base::tendermint::v1beta1::GetSyncingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](QueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::base::tendermint::v1beta1::GetSyncingRequest* req,
             ::cosmos::base::tendermint::v1beta1::GetSyncingResponse* resp) {
               return service->GetSyncing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::cosmos::base::tendermint::v1beta1::GetLatestBlockRequest, ::cosmos::base::tendermint::v1beta1::GetLatestBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](QueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::base::tendermint::v1beta1::GetLatestBlockRequest* req,
             ::cosmos::base::tendermint::v1beta1::GetLatestBlockResponse* resp) {
               return service->GetLatestBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::cosmos::base::tendermint::v1beta1::GetBlockByHeightRequest, ::cosmos::base::tendermint::v1beta1::GetBlockByHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](QueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::base::tendermint::v1beta1::GetBlockByHeightRequest* req,
             ::cosmos::base::tendermint::v1beta1::GetBlockByHeightResponse* resp) {
               return service->GetBlockByHeight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetRequest, ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](QueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetRequest* req,
             ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetResponse* resp) {
               return service->GetLatestValidatorSet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightRequest, ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](QueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightRequest* req,
             ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightResponse* resp) {
               return service->GetValidatorSetByHeight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::cosmos::base::tendermint::v1beta1::ABCIQueryRequest, ::cosmos::base::tendermint::v1beta1::ABCIQueryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](QueryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::base::tendermint::v1beta1::ABCIQueryRequest* req,
             ::cosmos::base::tendermint::v1beta1::ABCIQueryResponse* resp) {
               return service->ABCIQuery(ctx, req, resp);
             }, this)));
}

QueryService::Service::~Service() {
}

::grpc::Status QueryService::Service::GetNodeInfo(::grpc::ServerContext* context, const ::cosmos::base::tendermint::v1beta1::GetNodeInfoRequest* request, ::cosmos::base::tendermint::v1beta1::GetNodeInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::GetSyncing(::grpc::ServerContext* context, const ::cosmos::base::tendermint::v1beta1::GetSyncingRequest* request, ::cosmos::base::tendermint::v1beta1::GetSyncingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::GetLatestBlock(::grpc::ServerContext* context, const ::cosmos::base::tendermint::v1beta1::GetLatestBlockRequest* request, ::cosmos::base::tendermint::v1beta1::GetLatestBlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::GetBlockByHeight(::grpc::ServerContext* context, const ::cosmos::base::tendermint::v1beta1::GetBlockByHeightRequest* request, ::cosmos::base::tendermint::v1beta1::GetBlockByHeightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::GetLatestValidatorSet(::grpc::ServerContext* context, const ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetRequest* request, ::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::GetValidatorSetByHeight(::grpc::ServerContext* context, const ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightRequest* request, ::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::ABCIQuery(::grpc::ServerContext* context, const ::cosmos::base::tendermint::v1beta1::ABCIQueryRequest* request, ::cosmos::base::tendermint::v1beta1::ABCIQueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace base
}  // namespace tendermint
}  // namespace v1beta1

