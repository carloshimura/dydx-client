// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/abci/v1beta1/abci.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "tendermint/abci/types.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
namespace cosmos {
namespace base {
namespace abci {
namespace v1beta1 {
class ABCIMessageLog;
struct ABCIMessageLogDefaultTypeInternal;
extern ABCIMessageLogDefaultTypeInternal _ABCIMessageLog_default_instance_;
class Attribute;
struct AttributeDefaultTypeInternal;
extern AttributeDefaultTypeInternal _Attribute_default_instance_;
class GasInfo;
struct GasInfoDefaultTypeInternal;
extern GasInfoDefaultTypeInternal _GasInfo_default_instance_;
class MsgData;
struct MsgDataDefaultTypeInternal;
extern MsgDataDefaultTypeInternal _MsgData_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class SearchTxsResult;
struct SearchTxsResultDefaultTypeInternal;
extern SearchTxsResultDefaultTypeInternal _SearchTxsResult_default_instance_;
class SimulationResponse;
struct SimulationResponseDefaultTypeInternal;
extern SimulationResponseDefaultTypeInternal _SimulationResponse_default_instance_;
class StringEvent;
struct StringEventDefaultTypeInternal;
extern StringEventDefaultTypeInternal _StringEvent_default_instance_;
class TxMsgData;
struct TxMsgDataDefaultTypeInternal;
extern TxMsgDataDefaultTypeInternal _TxMsgData_default_instance_;
class TxResponse;
struct TxResponseDefaultTypeInternal;
extern TxResponseDefaultTypeInternal _TxResponse_default_instance_;
}  // namespace v1beta1
}  // namespace abci
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> ::cosmos::base::abci::v1beta1::ABCIMessageLog* Arena::CreateMaybeMessage<::cosmos::base::abci::v1beta1::ABCIMessageLog>(Arena*);
template<> ::cosmos::base::abci::v1beta1::Attribute* Arena::CreateMaybeMessage<::cosmos::base::abci::v1beta1::Attribute>(Arena*);
template<> ::cosmos::base::abci::v1beta1::GasInfo* Arena::CreateMaybeMessage<::cosmos::base::abci::v1beta1::GasInfo>(Arena*);
template<> ::cosmos::base::abci::v1beta1::MsgData* Arena::CreateMaybeMessage<::cosmos::base::abci::v1beta1::MsgData>(Arena*);
template<> ::cosmos::base::abci::v1beta1::Result* Arena::CreateMaybeMessage<::cosmos::base::abci::v1beta1::Result>(Arena*);
template<> ::cosmos::base::abci::v1beta1::SearchTxsResult* Arena::CreateMaybeMessage<::cosmos::base::abci::v1beta1::SearchTxsResult>(Arena*);
template<> ::cosmos::base::abci::v1beta1::SimulationResponse* Arena::CreateMaybeMessage<::cosmos::base::abci::v1beta1::SimulationResponse>(Arena*);
template<> ::cosmos::base::abci::v1beta1::StringEvent* Arena::CreateMaybeMessage<::cosmos::base::abci::v1beta1::StringEvent>(Arena*);
template<> ::cosmos::base::abci::v1beta1::TxMsgData* Arena::CreateMaybeMessage<::cosmos::base::abci::v1beta1::TxMsgData>(Arena*);
template<> ::cosmos::base::abci::v1beta1::TxResponse* Arena::CreateMaybeMessage<::cosmos::base::abci::v1beta1::TxResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cosmos {
namespace base {
namespace abci {
namespace v1beta1 {

// ===================================================================

class TxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.TxResponse) */ {
 public:
  inline TxResponse() : TxResponse(nullptr) {}
  ~TxResponse() override;
  explicit PROTOBUF_CONSTEXPR TxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxResponse(const TxResponse& from);
  TxResponse(TxResponse&& from) noexcept
    : TxResponse() {
    *this = ::std::move(from);
  }

  inline TxResponse& operator=(const TxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxResponse& operator=(TxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxResponse* internal_default_instance() {
    return reinterpret_cast<const TxResponse*>(
               &_TxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TxResponse& a, TxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxResponse& from) {
    TxResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.base.abci.v1beta1.TxResponse";
  }
  protected:
  explicit TxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 7,
    kEventsFieldNumber = 13,
    kTxhashFieldNumber = 2,
    kCodespaceFieldNumber = 3,
    kDataFieldNumber = 5,
    kRawLogFieldNumber = 6,
    kInfoFieldNumber = 8,
    kTimestampFieldNumber = 12,
    kTxFieldNumber = 11,
    kHeightFieldNumber = 1,
    kGasWantedFieldNumber = 9,
    kGasUsedFieldNumber = 10,
    kCodeFieldNumber = 4,
  };
  // repeated .cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ABCIMessageLogs"];
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::cosmos::base::abci::v1beta1::ABCIMessageLog* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::ABCIMessageLog >*
      mutable_logs();
  private:
  const ::cosmos::base::abci::v1beta1::ABCIMessageLog& _internal_logs(int index) const;
  ::cosmos::base::abci::v1beta1::ABCIMessageLog* _internal_add_logs();
  public:
  const ::cosmos::base::abci::v1beta1::ABCIMessageLog& logs(int index) const;
  ::cosmos::base::abci::v1beta1::ABCIMessageLog* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::ABCIMessageLog >&
      logs() const;

  // repeated .tendermint.abci.Event events = 13 [(.gogoproto.nullable) = false];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::tendermint::abci::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::Event >*
      mutable_events();
  private:
  const ::tendermint::abci::Event& _internal_events(int index) const;
  ::tendermint::abci::Event* _internal_add_events();
  public:
  const ::tendermint::abci::Event& events(int index) const;
  ::tendermint::abci::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::Event >&
      events() const;

  // string txhash = 2 [(.gogoproto.customname) = "TxHash"];
  void clear_txhash();
  const std::string& txhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_txhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_txhash();
  PROTOBUF_NODISCARD std::string* release_txhash();
  void set_allocated_txhash(std::string* txhash);
  private:
  const std::string& _internal_txhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_txhash(const std::string& value);
  std::string* _internal_mutable_txhash();
  public:

  // string codespace = 3;
  void clear_codespace();
  const std::string& codespace() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codespace(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codespace();
  PROTOBUF_NODISCARD std::string* release_codespace();
  void set_allocated_codespace(std::string* codespace);
  private:
  const std::string& _internal_codespace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codespace(const std::string& value);
  std::string* _internal_mutable_codespace();
  public:

  // string data = 5;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string raw_log = 6;
  void clear_raw_log();
  const std::string& raw_log() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_log(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_log();
  PROTOBUF_NODISCARD std::string* release_raw_log();
  void set_allocated_raw_log(std::string* raw_log);
  private:
  const std::string& _internal_raw_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_log(const std::string& value);
  std::string* _internal_mutable_raw_log();
  public:

  // string info = 8;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // string timestamp = 12;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // .google.protobuf.Any tx = 11;
  bool has_tx() const;
  private:
  bool _internal_has_tx() const;
  public:
  void clear_tx();
  const ::PROTOBUF_NAMESPACE_ID::Any& tx() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_tx();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_tx();
  void set_allocated_tx(::PROTOBUF_NAMESPACE_ID::Any* tx);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_tx() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_tx();
  public:
  void unsafe_arena_set_allocated_tx(
      ::PROTOBUF_NAMESPACE_ID::Any* tx);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_tx();

  // int64 height = 1;
  void clear_height();
  int64_t height() const;
  void set_height(int64_t value);
  private:
  int64_t _internal_height() const;
  void _internal_set_height(int64_t value);
  public:

  // int64 gas_wanted = 9;
  void clear_gas_wanted();
  int64_t gas_wanted() const;
  void set_gas_wanted(int64_t value);
  private:
  int64_t _internal_gas_wanted() const;
  void _internal_set_gas_wanted(int64_t value);
  public:

  // int64 gas_used = 10;
  void clear_gas_used();
  int64_t gas_used() const;
  void set_gas_used(int64_t value);
  private:
  int64_t _internal_gas_used() const;
  void _internal_set_gas_used(int64_t value);
  public:

  // uint32 code = 4;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.TxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::ABCIMessageLog > logs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::Event > events_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codespace_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_log_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
    ::PROTOBUF_NAMESPACE_ID::Any* tx_;
    int64_t height_;
    int64_t gas_wanted_;
    int64_t gas_used_;
    uint32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class ABCIMessageLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.ABCIMessageLog) */ {
 public:
  inline ABCIMessageLog() : ABCIMessageLog(nullptr) {}
  ~ABCIMessageLog() override;
  explicit PROTOBUF_CONSTEXPR ABCIMessageLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ABCIMessageLog(const ABCIMessageLog& from);
  ABCIMessageLog(ABCIMessageLog&& from) noexcept
    : ABCIMessageLog() {
    *this = ::std::move(from);
  }

  inline ABCIMessageLog& operator=(const ABCIMessageLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline ABCIMessageLog& operator=(ABCIMessageLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ABCIMessageLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const ABCIMessageLog* internal_default_instance() {
    return reinterpret_cast<const ABCIMessageLog*>(
               &_ABCIMessageLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ABCIMessageLog& a, ABCIMessageLog& b) {
    a.Swap(&b);
  }
  inline void Swap(ABCIMessageLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ABCIMessageLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ABCIMessageLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ABCIMessageLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ABCIMessageLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ABCIMessageLog& from) {
    ABCIMessageLog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ABCIMessageLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.base.abci.v1beta1.ABCIMessageLog";
  }
  protected:
  explicit ABCIMessageLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 3,
    kLogFieldNumber = 2,
    kMsgIndexFieldNumber = 1,
  };
  // repeated .cosmos.base.abci.v1beta1.StringEvent events = 3 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "StringEvents"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::cosmos::base::abci::v1beta1::StringEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::StringEvent >*
      mutable_events();
  private:
  const ::cosmos::base::abci::v1beta1::StringEvent& _internal_events(int index) const;
  ::cosmos::base::abci::v1beta1::StringEvent* _internal_add_events();
  public:
  const ::cosmos::base::abci::v1beta1::StringEvent& events(int index) const;
  ::cosmos::base::abci::v1beta1::StringEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::StringEvent >&
      events() const;

  // string log = 2;
  void clear_log();
  const std::string& log() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log();
  PROTOBUF_NODISCARD std::string* release_log();
  void set_allocated_log(std::string* log);
  private:
  const std::string& _internal_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log(const std::string& value);
  std::string* _internal_mutable_log();
  public:

  // uint32 msg_index = 1 [(.gogoproto.jsontag) = "msg_index"];
  void clear_msg_index();
  uint32_t msg_index() const;
  void set_msg_index(uint32_t value);
  private:
  uint32_t _internal_msg_index() const;
  void _internal_set_msg_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.ABCIMessageLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::StringEvent > events_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
    uint32_t msg_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class StringEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.StringEvent) */ {
 public:
  inline StringEvent() : StringEvent(nullptr) {}
  ~StringEvent() override;
  explicit PROTOBUF_CONSTEXPR StringEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringEvent(const StringEvent& from);
  StringEvent(StringEvent&& from) noexcept
    : StringEvent() {
    *this = ::std::move(from);
  }

  inline StringEvent& operator=(const StringEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringEvent& operator=(StringEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringEvent* internal_default_instance() {
    return reinterpret_cast<const StringEvent*>(
               &_StringEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StringEvent& a, StringEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(StringEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringEvent& from) {
    StringEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.base.abci.v1beta1.StringEvent";
  }
  protected:
  explicit StringEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .cosmos.base.abci.v1beta1.Attribute attributes = 2 [(.gogoproto.nullable) = false];
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::cosmos::base::abci::v1beta1::Attribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::Attribute >*
      mutable_attributes();
  private:
  const ::cosmos::base::abci::v1beta1::Attribute& _internal_attributes(int index) const;
  ::cosmos::base::abci::v1beta1::Attribute* _internal_add_attributes();
  public:
  const ::cosmos::base::abci::v1beta1::Attribute& attributes(int index) const;
  ::cosmos::base::abci::v1beta1::Attribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::Attribute >&
      attributes() const;

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.StringEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::Attribute > attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class Attribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.Attribute) */ {
 public:
  inline Attribute() : Attribute(nullptr) {}
  ~Attribute() override;
  explicit PROTOBUF_CONSTEXPR Attribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Attribute(const Attribute& from);
  Attribute(Attribute&& from) noexcept
    : Attribute() {
    *this = ::std::move(from);
  }

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attribute& operator=(Attribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attribute* internal_default_instance() {
    return reinterpret_cast<const Attribute*>(
               &_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Attribute& a, Attribute& b) {
    a.Swap(&b);
  }
  inline void Swap(Attribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Attribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Attribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Attribute& from) {
    Attribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.base.abci.v1beta1.Attribute";
  }
  protected:
  explicit Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.Attribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class GasInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.GasInfo) */ {
 public:
  inline GasInfo() : GasInfo(nullptr) {}
  ~GasInfo() override;
  explicit PROTOBUF_CONSTEXPR GasInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GasInfo(const GasInfo& from);
  GasInfo(GasInfo&& from) noexcept
    : GasInfo() {
    *this = ::std::move(from);
  }

  inline GasInfo& operator=(const GasInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GasInfo& operator=(GasInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GasInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GasInfo* internal_default_instance() {
    return reinterpret_cast<const GasInfo*>(
               &_GasInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GasInfo& a, GasInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GasInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GasInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GasInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GasInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GasInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GasInfo& from) {
    GasInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GasInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.base.abci.v1beta1.GasInfo";
  }
  protected:
  explicit GasInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGasWantedFieldNumber = 1,
    kGasUsedFieldNumber = 2,
  };
  // uint64 gas_wanted = 1;
  void clear_gas_wanted();
  uint64_t gas_wanted() const;
  void set_gas_wanted(uint64_t value);
  private:
  uint64_t _internal_gas_wanted() const;
  void _internal_set_gas_wanted(uint64_t value);
  public:

  // uint64 gas_used = 2;
  void clear_gas_used();
  uint64_t gas_used() const;
  void set_gas_used(uint64_t value);
  private:
  uint64_t _internal_gas_used() const;
  void _internal_set_gas_used(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.GasInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t gas_wanted_;
    uint64_t gas_used_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() override;
  explicit PROTOBUF_CONSTEXPR Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Result& from) {
    Result::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.base.abci.v1beta1.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 3,
    kMsgResponsesFieldNumber = 4,
    kDataFieldNumber = 1,
    kLogFieldNumber = 2,
  };
  // repeated .tendermint.abci.Event events = 3 [(.gogoproto.nullable) = false];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::tendermint::abci::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::Event >*
      mutable_events();
  private:
  const ::tendermint::abci::Event& _internal_events(int index) const;
  ::tendermint::abci::Event* _internal_add_events();
  public:
  const ::tendermint::abci::Event& events(int index) const;
  ::tendermint::abci::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::Event >&
      events() const;

  // repeated .google.protobuf.Any msg_responses = 4;
  int msg_responses_size() const;
  private:
  int _internal_msg_responses_size() const;
  public:
  void clear_msg_responses();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_msg_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_msg_responses();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_msg_responses(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_msg_responses();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& msg_responses(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_msg_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      msg_responses() const;

  // bytes data = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_data();
  PROTOBUF_DEPRECATED const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_data(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_data();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_data();
  PROTOBUF_DEPRECATED void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string log = 2;
  void clear_log();
  const std::string& log() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log();
  PROTOBUF_NODISCARD std::string* release_log();
  void set_allocated_log(std::string* log);
  private:
  const std::string& _internal_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log(const std::string& value);
  std::string* _internal_mutable_log();
  public:

  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::Event > events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > msg_responses_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class SimulationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.SimulationResponse) */ {
 public:
  inline SimulationResponse() : SimulationResponse(nullptr) {}
  ~SimulationResponse() override;
  explicit PROTOBUF_CONSTEXPR SimulationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationResponse(const SimulationResponse& from);
  SimulationResponse(SimulationResponse&& from) noexcept
    : SimulationResponse() {
    *this = ::std::move(from);
  }

  inline SimulationResponse& operator=(const SimulationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationResponse& operator=(SimulationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationResponse* internal_default_instance() {
    return reinterpret_cast<const SimulationResponse*>(
               &_SimulationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SimulationResponse& a, SimulationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimulationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimulationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimulationResponse& from) {
    SimulationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.base.abci.v1beta1.SimulationResponse";
  }
  protected:
  explicit SimulationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGasInfoFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // .cosmos.base.abci.v1beta1.GasInfo gas_info = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  bool has_gas_info() const;
  private:
  bool _internal_has_gas_info() const;
  public:
  void clear_gas_info();
  const ::cosmos::base::abci::v1beta1::GasInfo& gas_info() const;
  PROTOBUF_NODISCARD ::cosmos::base::abci::v1beta1::GasInfo* release_gas_info();
  ::cosmos::base::abci::v1beta1::GasInfo* mutable_gas_info();
  void set_allocated_gas_info(::cosmos::base::abci::v1beta1::GasInfo* gas_info);
  private:
  const ::cosmos::base::abci::v1beta1::GasInfo& _internal_gas_info() const;
  ::cosmos::base::abci::v1beta1::GasInfo* _internal_mutable_gas_info();
  public:
  void unsafe_arena_set_allocated_gas_info(
      ::cosmos::base::abci::v1beta1::GasInfo* gas_info);
  ::cosmos::base::abci::v1beta1::GasInfo* unsafe_arena_release_gas_info();

  // .cosmos.base.abci.v1beta1.Result result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::cosmos::base::abci::v1beta1::Result& result() const;
  PROTOBUF_NODISCARD ::cosmos::base::abci::v1beta1::Result* release_result();
  ::cosmos::base::abci::v1beta1::Result* mutable_result();
  void set_allocated_result(::cosmos::base::abci::v1beta1::Result* result);
  private:
  const ::cosmos::base::abci::v1beta1::Result& _internal_result() const;
  ::cosmos::base::abci::v1beta1::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::cosmos::base::abci::v1beta1::Result* result);
  ::cosmos::base::abci::v1beta1::Result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.SimulationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cosmos::base::abci::v1beta1::GasInfo* gas_info_;
    ::cosmos::base::abci::v1beta1::Result* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class MsgData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.MsgData) */ {
 public:
  inline MsgData() : MsgData(nullptr) {}
  ~MsgData() override;
  explicit PROTOBUF_CONSTEXPR MsgData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgData(const MsgData& from);
  MsgData(MsgData&& from) noexcept
    : MsgData() {
    *this = ::std::move(from);
  }

  inline MsgData& operator=(const MsgData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgData& operator=(MsgData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgData* internal_default_instance() {
    return reinterpret_cast<const MsgData*>(
               &_MsgData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgData& a, MsgData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgData& from) {
    MsgData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.base.abci.v1beta1.MsgData";
  }
  protected:
  explicit MsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTypeFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string msg_type = 1;
  void clear_msg_type();
  const std::string& msg_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_type();
  PROTOBUF_NODISCARD std::string* release_msg_type();
  void set_allocated_msg_type(std::string* msg_type);
  private:
  const std::string& _internal_msg_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_type(const std::string& value);
  std::string* _internal_mutable_msg_type();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.MsgData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class TxMsgData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.TxMsgData) */ {
 public:
  inline TxMsgData() : TxMsgData(nullptr) {}
  ~TxMsgData() override;
  explicit PROTOBUF_CONSTEXPR TxMsgData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxMsgData(const TxMsgData& from);
  TxMsgData(TxMsgData&& from) noexcept
    : TxMsgData() {
    *this = ::std::move(from);
  }

  inline TxMsgData& operator=(const TxMsgData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxMsgData& operator=(TxMsgData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxMsgData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxMsgData* internal_default_instance() {
    return reinterpret_cast<const TxMsgData*>(
               &_TxMsgData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TxMsgData& a, TxMsgData& b) {
    a.Swap(&b);
  }
  inline void Swap(TxMsgData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxMsgData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxMsgData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxMsgData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxMsgData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxMsgData& from) {
    TxMsgData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxMsgData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.base.abci.v1beta1.TxMsgData";
  }
  protected:
  explicit TxMsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kMsgResponsesFieldNumber = 2,
  };
  // repeated .cosmos.base.abci.v1beta1.MsgData data = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_data();
  PROTOBUF_DEPRECATED ::cosmos::base::abci::v1beta1::MsgData* mutable_data(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::MsgData >*
      mutable_data();
  private:
  const ::cosmos::base::abci::v1beta1::MsgData& _internal_data(int index) const;
  ::cosmos::base::abci::v1beta1::MsgData* _internal_add_data();
  public:
  PROTOBUF_DEPRECATED const ::cosmos::base::abci::v1beta1::MsgData& data(int index) const;
  PROTOBUF_DEPRECATED ::cosmos::base::abci::v1beta1::MsgData* add_data();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::MsgData >&
      data() const;

  // repeated .google.protobuf.Any msg_responses = 2;
  int msg_responses_size() const;
  private:
  int _internal_msg_responses_size() const;
  public:
  void clear_msg_responses();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_msg_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_msg_responses();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_msg_responses(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_msg_responses();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& msg_responses(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_msg_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      msg_responses() const;

  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.TxMsgData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::MsgData > data_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > msg_responses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// -------------------------------------------------------------------

class SearchTxsResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.abci.v1beta1.SearchTxsResult) */ {
 public:
  inline SearchTxsResult() : SearchTxsResult(nullptr) {}
  ~SearchTxsResult() override;
  explicit PROTOBUF_CONSTEXPR SearchTxsResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchTxsResult(const SearchTxsResult& from);
  SearchTxsResult(SearchTxsResult&& from) noexcept
    : SearchTxsResult() {
    *this = ::std::move(from);
  }

  inline SearchTxsResult& operator=(const SearchTxsResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchTxsResult& operator=(SearchTxsResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchTxsResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchTxsResult* internal_default_instance() {
    return reinterpret_cast<const SearchTxsResult*>(
               &_SearchTxsResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SearchTxsResult& a, SearchTxsResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchTxsResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchTxsResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchTxsResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchTxsResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchTxsResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchTxsResult& from) {
    SearchTxsResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchTxsResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.base.abci.v1beta1.SearchTxsResult";
  }
  protected:
  explicit SearchTxsResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 6,
    kTotalCountFieldNumber = 1,
    kCountFieldNumber = 2,
    kPageNumberFieldNumber = 3,
    kPageTotalFieldNumber = 4,
    kLimitFieldNumber = 5,
  };
  // repeated .cosmos.base.abci.v1beta1.TxResponse txs = 6;
  int txs_size() const;
  private:
  int _internal_txs_size() const;
  public:
  void clear_txs();
  ::cosmos::base::abci::v1beta1::TxResponse* mutable_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::TxResponse >*
      mutable_txs();
  private:
  const ::cosmos::base::abci::v1beta1::TxResponse& _internal_txs(int index) const;
  ::cosmos::base::abci::v1beta1::TxResponse* _internal_add_txs();
  public:
  const ::cosmos::base::abci::v1beta1::TxResponse& txs(int index) const;
  ::cosmos::base::abci::v1beta1::TxResponse* add_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::TxResponse >&
      txs() const;

  // uint64 total_count = 1;
  void clear_total_count();
  uint64_t total_count() const;
  void set_total_count(uint64_t value);
  private:
  uint64_t _internal_total_count() const;
  void _internal_set_total_count(uint64_t value);
  public:

  // uint64 count = 2;
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // uint64 page_number = 3;
  void clear_page_number();
  uint64_t page_number() const;
  void set_page_number(uint64_t value);
  private:
  uint64_t _internal_page_number() const;
  void _internal_set_page_number(uint64_t value);
  public:

  // uint64 page_total = 4;
  void clear_page_total();
  uint64_t page_total() const;
  void set_page_total(uint64_t value);
  private:
  uint64_t _internal_page_total() const;
  void _internal_set_page_total(uint64_t value);
  public:

  // uint64 limit = 5;
  void clear_limit();
  uint64_t limit() const;
  void set_limit(uint64_t value);
  private:
  uint64_t _internal_limit() const;
  void _internal_set_limit(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cosmos.base.abci.v1beta1.SearchTxsResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::TxResponse > txs_;
    uint64_t total_count_;
    uint64_t count_;
    uint64_t page_number_;
    uint64_t page_total_;
    uint64_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxResponse

// int64 height = 1;
inline void TxResponse::clear_height() {
  _impl_.height_ = int64_t{0};
}
inline int64_t TxResponse::_internal_height() const {
  return _impl_.height_;
}
inline int64_t TxResponse::height() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.height)
  return _internal_height();
}
inline void TxResponse::_internal_set_height(int64_t value) {
  
  _impl_.height_ = value;
}
inline void TxResponse::set_height(int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.height)
}

// string txhash = 2 [(.gogoproto.customname) = "TxHash"];
inline void TxResponse::clear_txhash() {
  _impl_.txhash_.ClearToEmpty();
}
inline const std::string& TxResponse::txhash() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.txhash)
  return _internal_txhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxResponse::set_txhash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.txhash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.txhash)
}
inline std::string* TxResponse::mutable_txhash() {
  std::string* _s = _internal_mutable_txhash();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.txhash)
  return _s;
}
inline const std::string& TxResponse::_internal_txhash() const {
  return _impl_.txhash_.Get();
}
inline void TxResponse::_internal_set_txhash(const std::string& value) {
  
  _impl_.txhash_.Set(value, GetArenaForAllocation());
}
inline std::string* TxResponse::_internal_mutable_txhash() {
  
  return _impl_.txhash_.Mutable(GetArenaForAllocation());
}
inline std::string* TxResponse::release_txhash() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.txhash)
  return _impl_.txhash_.Release();
}
inline void TxResponse::set_allocated_txhash(std::string* txhash) {
  if (txhash != nullptr) {
    
  } else {
    
  }
  _impl_.txhash_.SetAllocated(txhash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.txhash_.IsDefault()) {
    _impl_.txhash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.txhash)
}

// string codespace = 3;
inline void TxResponse::clear_codespace() {
  _impl_.codespace_.ClearToEmpty();
}
inline const std::string& TxResponse::codespace() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.codespace)
  return _internal_codespace();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxResponse::set_codespace(ArgT0&& arg0, ArgT... args) {
 
 _impl_.codespace_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.codespace)
}
inline std::string* TxResponse::mutable_codespace() {
  std::string* _s = _internal_mutable_codespace();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.codespace)
  return _s;
}
inline const std::string& TxResponse::_internal_codespace() const {
  return _impl_.codespace_.Get();
}
inline void TxResponse::_internal_set_codespace(const std::string& value) {
  
  _impl_.codespace_.Set(value, GetArenaForAllocation());
}
inline std::string* TxResponse::_internal_mutable_codespace() {
  
  return _impl_.codespace_.Mutable(GetArenaForAllocation());
}
inline std::string* TxResponse::release_codespace() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.codespace)
  return _impl_.codespace_.Release();
}
inline void TxResponse::set_allocated_codespace(std::string* codespace) {
  if (codespace != nullptr) {
    
  } else {
    
  }
  _impl_.codespace_.SetAllocated(codespace, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.codespace_.IsDefault()) {
    _impl_.codespace_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.codespace)
}

// uint32 code = 4;
inline void TxResponse::clear_code() {
  _impl_.code_ = 0u;
}
inline uint32_t TxResponse::_internal_code() const {
  return _impl_.code_;
}
inline uint32_t TxResponse::code() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.code)
  return _internal_code();
}
inline void TxResponse::_internal_set_code(uint32_t value) {
  
  _impl_.code_ = value;
}
inline void TxResponse::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.code)
}

// string data = 5;
inline void TxResponse::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& TxResponse::data() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxResponse::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.data)
}
inline std::string* TxResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.data)
  return _s;
}
inline const std::string& TxResponse::_internal_data() const {
  return _impl_.data_.Get();
}
inline void TxResponse::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* TxResponse::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* TxResponse::release_data() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.data)
  return _impl_.data_.Release();
}
inline void TxResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.data)
}

// string raw_log = 6;
inline void TxResponse::clear_raw_log() {
  _impl_.raw_log_.ClearToEmpty();
}
inline const std::string& TxResponse::raw_log() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.raw_log)
  return _internal_raw_log();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxResponse::set_raw_log(ArgT0&& arg0, ArgT... args) {
 
 _impl_.raw_log_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.raw_log)
}
inline std::string* TxResponse::mutable_raw_log() {
  std::string* _s = _internal_mutable_raw_log();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.raw_log)
  return _s;
}
inline const std::string& TxResponse::_internal_raw_log() const {
  return _impl_.raw_log_.Get();
}
inline void TxResponse::_internal_set_raw_log(const std::string& value) {
  
  _impl_.raw_log_.Set(value, GetArenaForAllocation());
}
inline std::string* TxResponse::_internal_mutable_raw_log() {
  
  return _impl_.raw_log_.Mutable(GetArenaForAllocation());
}
inline std::string* TxResponse::release_raw_log() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.raw_log)
  return _impl_.raw_log_.Release();
}
inline void TxResponse::set_allocated_raw_log(std::string* raw_log) {
  if (raw_log != nullptr) {
    
  } else {
    
  }
  _impl_.raw_log_.SetAllocated(raw_log, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_log_.IsDefault()) {
    _impl_.raw_log_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.raw_log)
}

// repeated .cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ABCIMessageLogs"];
inline int TxResponse::_internal_logs_size() const {
  return _impl_.logs_.size();
}
inline int TxResponse::logs_size() const {
  return _internal_logs_size();
}
inline void TxResponse::clear_logs() {
  _impl_.logs_.Clear();
}
inline ::cosmos::base::abci::v1beta1::ABCIMessageLog* TxResponse::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.logs)
  return _impl_.logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::ABCIMessageLog >*
TxResponse::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.TxResponse.logs)
  return &_impl_.logs_;
}
inline const ::cosmos::base::abci::v1beta1::ABCIMessageLog& TxResponse::_internal_logs(int index) const {
  return _impl_.logs_.Get(index);
}
inline const ::cosmos::base::abci::v1beta1::ABCIMessageLog& TxResponse::logs(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.logs)
  return _internal_logs(index);
}
inline ::cosmos::base::abci::v1beta1::ABCIMessageLog* TxResponse::_internal_add_logs() {
  return _impl_.logs_.Add();
}
inline ::cosmos::base::abci::v1beta1::ABCIMessageLog* TxResponse::add_logs() {
  ::cosmos::base::abci::v1beta1::ABCIMessageLog* _add = _internal_add_logs();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.TxResponse.logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::ABCIMessageLog >&
TxResponse::logs() const {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.TxResponse.logs)
  return _impl_.logs_;
}

// string info = 8;
inline void TxResponse::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& TxResponse::info() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxResponse::set_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.info)
}
inline std::string* TxResponse::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.info)
  return _s;
}
inline const std::string& TxResponse::_internal_info() const {
  return _impl_.info_.Get();
}
inline void TxResponse::_internal_set_info(const std::string& value) {
  
  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* TxResponse::_internal_mutable_info() {
  
  return _impl_.info_.Mutable(GetArenaForAllocation());
}
inline std::string* TxResponse::release_info() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.info)
  return _impl_.info_.Release();
}
inline void TxResponse::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  _impl_.info_.SetAllocated(info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.info)
}

// int64 gas_wanted = 9;
inline void TxResponse::clear_gas_wanted() {
  _impl_.gas_wanted_ = int64_t{0};
}
inline int64_t TxResponse::_internal_gas_wanted() const {
  return _impl_.gas_wanted_;
}
inline int64_t TxResponse::gas_wanted() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.gas_wanted)
  return _internal_gas_wanted();
}
inline void TxResponse::_internal_set_gas_wanted(int64_t value) {
  
  _impl_.gas_wanted_ = value;
}
inline void TxResponse::set_gas_wanted(int64_t value) {
  _internal_set_gas_wanted(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.gas_wanted)
}

// int64 gas_used = 10;
inline void TxResponse::clear_gas_used() {
  _impl_.gas_used_ = int64_t{0};
}
inline int64_t TxResponse::_internal_gas_used() const {
  return _impl_.gas_used_;
}
inline int64_t TxResponse::gas_used() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.gas_used)
  return _internal_gas_used();
}
inline void TxResponse::_internal_set_gas_used(int64_t value) {
  
  _impl_.gas_used_ = value;
}
inline void TxResponse::set_gas_used(int64_t value) {
  _internal_set_gas_used(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.gas_used)
}

// .google.protobuf.Any tx = 11;
inline bool TxResponse::_internal_has_tx() const {
  return this != internal_default_instance() && _impl_.tx_ != nullptr;
}
inline bool TxResponse::has_tx() const {
  return _internal_has_tx();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TxResponse::_internal_tx() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TxResponse::tx() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.tx)
  return _internal_tx();
}
inline void TxResponse::unsafe_arena_set_allocated_tx(
    ::PROTOBUF_NAMESPACE_ID::Any* tx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_);
  }
  _impl_.tx_ = tx;
  if (tx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.abci.v1beta1.TxResponse.tx)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxResponse::release_tx() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxResponse::unsafe_arena_release_tx() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.tx)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxResponse::_internal_mutable_tx() {
  
  if (_impl_.tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.tx_ = p;
  }
  return _impl_.tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxResponse::mutable_tx() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.tx)
  return _msg;
}
inline void TxResponse::set_allocated_tx(::PROTOBUF_NAMESPACE_ID::Any* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_);
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx));
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.tx)
}

// string timestamp = 12;
inline void TxResponse::clear_timestamp() {
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& TxResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TxResponse::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 _impl_.timestamp_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.TxResponse.timestamp)
}
inline std::string* TxResponse::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.timestamp)
  return _s;
}
inline const std::string& TxResponse::_internal_timestamp() const {
  return _impl_.timestamp_.Get();
}
inline void TxResponse::_internal_set_timestamp(const std::string& value) {
  
  _impl_.timestamp_.Set(value, GetArenaForAllocation());
}
inline std::string* TxResponse::_internal_mutable_timestamp() {
  
  return _impl_.timestamp_.Mutable(GetArenaForAllocation());
}
inline std::string* TxResponse::release_timestamp() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.TxResponse.timestamp)
  return _impl_.timestamp_.Release();
}
inline void TxResponse::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  _impl_.timestamp_.SetAllocated(timestamp, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.TxResponse.timestamp)
}

// repeated .tendermint.abci.Event events = 13 [(.gogoproto.nullable) = false];
inline int TxResponse::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int TxResponse::events_size() const {
  return _internal_events_size();
}
inline ::tendermint::abci::Event* TxResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxResponse.events)
  return _impl_.events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::Event >*
TxResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.TxResponse.events)
  return &_impl_.events_;
}
inline const ::tendermint::abci::Event& TxResponse::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const ::tendermint::abci::Event& TxResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxResponse.events)
  return _internal_events(index);
}
inline ::tendermint::abci::Event* TxResponse::_internal_add_events() {
  return _impl_.events_.Add();
}
inline ::tendermint::abci::Event* TxResponse::add_events() {
  ::tendermint::abci::Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.TxResponse.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::Event >&
TxResponse::events() const {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.TxResponse.events)
  return _impl_.events_;
}

// -------------------------------------------------------------------

// ABCIMessageLog

// uint32 msg_index = 1 [(.gogoproto.jsontag) = "msg_index"];
inline void ABCIMessageLog::clear_msg_index() {
  _impl_.msg_index_ = 0u;
}
inline uint32_t ABCIMessageLog::_internal_msg_index() const {
  return _impl_.msg_index_;
}
inline uint32_t ABCIMessageLog::msg_index() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.ABCIMessageLog.msg_index)
  return _internal_msg_index();
}
inline void ABCIMessageLog::_internal_set_msg_index(uint32_t value) {
  
  _impl_.msg_index_ = value;
}
inline void ABCIMessageLog::set_msg_index(uint32_t value) {
  _internal_set_msg_index(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.ABCIMessageLog.msg_index)
}

// string log = 2;
inline void ABCIMessageLog::clear_log() {
  _impl_.log_.ClearToEmpty();
}
inline const std::string& ABCIMessageLog::log() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.ABCIMessageLog.log)
  return _internal_log();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABCIMessageLog::set_log(ArgT0&& arg0, ArgT... args) {
 
 _impl_.log_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.ABCIMessageLog.log)
}
inline std::string* ABCIMessageLog::mutable_log() {
  std::string* _s = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.ABCIMessageLog.log)
  return _s;
}
inline const std::string& ABCIMessageLog::_internal_log() const {
  return _impl_.log_.Get();
}
inline void ABCIMessageLog::_internal_set_log(const std::string& value) {
  
  _impl_.log_.Set(value, GetArenaForAllocation());
}
inline std::string* ABCIMessageLog::_internal_mutable_log() {
  
  return _impl_.log_.Mutable(GetArenaForAllocation());
}
inline std::string* ABCIMessageLog::release_log() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.ABCIMessageLog.log)
  return _impl_.log_.Release();
}
inline void ABCIMessageLog::set_allocated_log(std::string* log) {
  if (log != nullptr) {
    
  } else {
    
  }
  _impl_.log_.SetAllocated(log, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.log_.IsDefault()) {
    _impl_.log_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.ABCIMessageLog.log)
}

// repeated .cosmos.base.abci.v1beta1.StringEvent events = 3 [(.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "StringEvents"];
inline int ABCIMessageLog::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int ABCIMessageLog::events_size() const {
  return _internal_events_size();
}
inline void ABCIMessageLog::clear_events() {
  _impl_.events_.Clear();
}
inline ::cosmos::base::abci::v1beta1::StringEvent* ABCIMessageLog::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.ABCIMessageLog.events)
  return _impl_.events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::StringEvent >*
ABCIMessageLog::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.ABCIMessageLog.events)
  return &_impl_.events_;
}
inline const ::cosmos::base::abci::v1beta1::StringEvent& ABCIMessageLog::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const ::cosmos::base::abci::v1beta1::StringEvent& ABCIMessageLog::events(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.ABCIMessageLog.events)
  return _internal_events(index);
}
inline ::cosmos::base::abci::v1beta1::StringEvent* ABCIMessageLog::_internal_add_events() {
  return _impl_.events_.Add();
}
inline ::cosmos::base::abci::v1beta1::StringEvent* ABCIMessageLog::add_events() {
  ::cosmos::base::abci::v1beta1::StringEvent* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.ABCIMessageLog.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::StringEvent >&
ABCIMessageLog::events() const {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.ABCIMessageLog.events)
  return _impl_.events_;
}

// -------------------------------------------------------------------

// StringEvent

// string type = 1;
inline void StringEvent::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& StringEvent::type() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.StringEvent.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringEvent::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.StringEvent.type)
}
inline std::string* StringEvent::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.StringEvent.type)
  return _s;
}
inline const std::string& StringEvent::_internal_type() const {
  return _impl_.type_.Get();
}
inline void StringEvent::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* StringEvent::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* StringEvent::release_type() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.StringEvent.type)
  return _impl_.type_.Release();
}
inline void StringEvent::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.StringEvent.type)
}

// repeated .cosmos.base.abci.v1beta1.Attribute attributes = 2 [(.gogoproto.nullable) = false];
inline int StringEvent::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int StringEvent::attributes_size() const {
  return _internal_attributes_size();
}
inline void StringEvent::clear_attributes() {
  _impl_.attributes_.Clear();
}
inline ::cosmos::base::abci::v1beta1::Attribute* StringEvent::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.StringEvent.attributes)
  return _impl_.attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::Attribute >*
StringEvent::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.StringEvent.attributes)
  return &_impl_.attributes_;
}
inline const ::cosmos::base::abci::v1beta1::Attribute& StringEvent::_internal_attributes(int index) const {
  return _impl_.attributes_.Get(index);
}
inline const ::cosmos::base::abci::v1beta1::Attribute& StringEvent::attributes(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.StringEvent.attributes)
  return _internal_attributes(index);
}
inline ::cosmos::base::abci::v1beta1::Attribute* StringEvent::_internal_add_attributes() {
  return _impl_.attributes_.Add();
}
inline ::cosmos::base::abci::v1beta1::Attribute* StringEvent::add_attributes() {
  ::cosmos::base::abci::v1beta1::Attribute* _add = _internal_add_attributes();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.StringEvent.attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::Attribute >&
StringEvent::attributes() const {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.StringEvent.attributes)
  return _impl_.attributes_;
}

// -------------------------------------------------------------------

// Attribute

// string key = 1;
inline void Attribute::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Attribute::key() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.Attribute.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Attribute::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.Attribute.key)
}
inline std::string* Attribute::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.Attribute.key)
  return _s;
}
inline const std::string& Attribute::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Attribute::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Attribute::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* Attribute::release_key() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.Attribute.key)
  return _impl_.key_.Release();
}
inline void Attribute::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.Attribute.key)
}

// string value = 2;
inline void Attribute::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Attribute::value() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.Attribute.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Attribute::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.Attribute.value)
}
inline std::string* Attribute::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.Attribute.value)
  return _s;
}
inline const std::string& Attribute::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Attribute::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Attribute::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Attribute::release_value() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.Attribute.value)
  return _impl_.value_.Release();
}
inline void Attribute::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.Attribute.value)
}

// -------------------------------------------------------------------

// GasInfo

// uint64 gas_wanted = 1;
inline void GasInfo::clear_gas_wanted() {
  _impl_.gas_wanted_ = uint64_t{0u};
}
inline uint64_t GasInfo::_internal_gas_wanted() const {
  return _impl_.gas_wanted_;
}
inline uint64_t GasInfo::gas_wanted() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.GasInfo.gas_wanted)
  return _internal_gas_wanted();
}
inline void GasInfo::_internal_set_gas_wanted(uint64_t value) {
  
  _impl_.gas_wanted_ = value;
}
inline void GasInfo::set_gas_wanted(uint64_t value) {
  _internal_set_gas_wanted(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.GasInfo.gas_wanted)
}

// uint64 gas_used = 2;
inline void GasInfo::clear_gas_used() {
  _impl_.gas_used_ = uint64_t{0u};
}
inline uint64_t GasInfo::_internal_gas_used() const {
  return _impl_.gas_used_;
}
inline uint64_t GasInfo::gas_used() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.GasInfo.gas_used)
  return _internal_gas_used();
}
inline void GasInfo::_internal_set_gas_used(uint64_t value) {
  
  _impl_.gas_used_ = value;
}
inline void GasInfo::set_gas_used(uint64_t value) {
  _internal_set_gas_used(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.GasInfo.gas_used)
}

// -------------------------------------------------------------------

// Result

// bytes data = 1 [deprecated = true];
inline void Result::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Result::data() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.Result.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Result::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.Result.data)
}
inline std::string* Result::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.Result.data)
  return _s;
}
inline const std::string& Result::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Result::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Result::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Result::release_data() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.Result.data)
  return _impl_.data_.Release();
}
inline void Result::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.Result.data)
}

// string log = 2;
inline void Result::clear_log() {
  _impl_.log_.ClearToEmpty();
}
inline const std::string& Result::log() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.Result.log)
  return _internal_log();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Result::set_log(ArgT0&& arg0, ArgT... args) {
 
 _impl_.log_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.Result.log)
}
inline std::string* Result::mutable_log() {
  std::string* _s = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.Result.log)
  return _s;
}
inline const std::string& Result::_internal_log() const {
  return _impl_.log_.Get();
}
inline void Result::_internal_set_log(const std::string& value) {
  
  _impl_.log_.Set(value, GetArenaForAllocation());
}
inline std::string* Result::_internal_mutable_log() {
  
  return _impl_.log_.Mutable(GetArenaForAllocation());
}
inline std::string* Result::release_log() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.Result.log)
  return _impl_.log_.Release();
}
inline void Result::set_allocated_log(std::string* log) {
  if (log != nullptr) {
    
  } else {
    
  }
  _impl_.log_.SetAllocated(log, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.log_.IsDefault()) {
    _impl_.log_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.Result.log)
}

// repeated .tendermint.abci.Event events = 3 [(.gogoproto.nullable) = false];
inline int Result::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int Result::events_size() const {
  return _internal_events_size();
}
inline ::tendermint::abci::Event* Result::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.Result.events)
  return _impl_.events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::Event >*
Result::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.Result.events)
  return &_impl_.events_;
}
inline const ::tendermint::abci::Event& Result::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const ::tendermint::abci::Event& Result::events(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.Result.events)
  return _internal_events(index);
}
inline ::tendermint::abci::Event* Result::_internal_add_events() {
  return _impl_.events_.Add();
}
inline ::tendermint::abci::Event* Result::add_events() {
  ::tendermint::abci::Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.Result.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::abci::Event >&
Result::events() const {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.Result.events)
  return _impl_.events_;
}

// repeated .google.protobuf.Any msg_responses = 4;
inline int Result::_internal_msg_responses_size() const {
  return _impl_.msg_responses_.size();
}
inline int Result::msg_responses_size() const {
  return _internal_msg_responses_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Result::mutable_msg_responses(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.Result.msg_responses)
  return _impl_.msg_responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
Result::mutable_msg_responses() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.Result.msg_responses)
  return &_impl_.msg_responses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Result::_internal_msg_responses(int index) const {
  return _impl_.msg_responses_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Result::msg_responses(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.Result.msg_responses)
  return _internal_msg_responses(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Result::_internal_add_msg_responses() {
  return _impl_.msg_responses_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Result::add_msg_responses() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_msg_responses();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.Result.msg_responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
Result::msg_responses() const {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.Result.msg_responses)
  return _impl_.msg_responses_;
}

// -------------------------------------------------------------------

// SimulationResponse

// .cosmos.base.abci.v1beta1.GasInfo gas_info = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
inline bool SimulationResponse::_internal_has_gas_info() const {
  return this != internal_default_instance() && _impl_.gas_info_ != nullptr;
}
inline bool SimulationResponse::has_gas_info() const {
  return _internal_has_gas_info();
}
inline void SimulationResponse::clear_gas_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.gas_info_ != nullptr) {
    delete _impl_.gas_info_;
  }
  _impl_.gas_info_ = nullptr;
}
inline const ::cosmos::base::abci::v1beta1::GasInfo& SimulationResponse::_internal_gas_info() const {
  const ::cosmos::base::abci::v1beta1::GasInfo* p = _impl_.gas_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::abci::v1beta1::GasInfo&>(
      ::cosmos::base::abci::v1beta1::_GasInfo_default_instance_);
}
inline const ::cosmos::base::abci::v1beta1::GasInfo& SimulationResponse::gas_info() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SimulationResponse.gas_info)
  return _internal_gas_info();
}
inline void SimulationResponse::unsafe_arena_set_allocated_gas_info(
    ::cosmos::base::abci::v1beta1::GasInfo* gas_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gas_info_);
  }
  _impl_.gas_info_ = gas_info;
  if (gas_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.abci.v1beta1.SimulationResponse.gas_info)
}
inline ::cosmos::base::abci::v1beta1::GasInfo* SimulationResponse::release_gas_info() {
  
  ::cosmos::base::abci::v1beta1::GasInfo* temp = _impl_.gas_info_;
  _impl_.gas_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::abci::v1beta1::GasInfo* SimulationResponse::unsafe_arena_release_gas_info() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.SimulationResponse.gas_info)
  
  ::cosmos::base::abci::v1beta1::GasInfo* temp = _impl_.gas_info_;
  _impl_.gas_info_ = nullptr;
  return temp;
}
inline ::cosmos::base::abci::v1beta1::GasInfo* SimulationResponse::_internal_mutable_gas_info() {
  
  if (_impl_.gas_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::abci::v1beta1::GasInfo>(GetArenaForAllocation());
    _impl_.gas_info_ = p;
  }
  return _impl_.gas_info_;
}
inline ::cosmos::base::abci::v1beta1::GasInfo* SimulationResponse::mutable_gas_info() {
  ::cosmos::base::abci::v1beta1::GasInfo* _msg = _internal_mutable_gas_info();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.SimulationResponse.gas_info)
  return _msg;
}
inline void SimulationResponse::set_allocated_gas_info(::cosmos::base::abci::v1beta1::GasInfo* gas_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gas_info_;
  }
  if (gas_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gas_info);
    if (message_arena != submessage_arena) {
      gas_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gas_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gas_info_ = gas_info;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.SimulationResponse.gas_info)
}

// .cosmos.base.abci.v1beta1.Result result = 2;
inline bool SimulationResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool SimulationResponse::has_result() const {
  return _internal_has_result();
}
inline void SimulationResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::cosmos::base::abci::v1beta1::Result& SimulationResponse::_internal_result() const {
  const ::cosmos::base::abci::v1beta1::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::abci::v1beta1::Result&>(
      ::cosmos::base::abci::v1beta1::_Result_default_instance_);
}
inline const ::cosmos::base::abci::v1beta1::Result& SimulationResponse::result() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SimulationResponse.result)
  return _internal_result();
}
inline void SimulationResponse::unsafe_arena_set_allocated_result(
    ::cosmos::base::abci::v1beta1::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.abci.v1beta1.SimulationResponse.result)
}
inline ::cosmos::base::abci::v1beta1::Result* SimulationResponse::release_result() {
  
  ::cosmos::base::abci::v1beta1::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::abci::v1beta1::Result* SimulationResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.SimulationResponse.result)
  
  ::cosmos::base::abci::v1beta1::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::cosmos::base::abci::v1beta1::Result* SimulationResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::abci::v1beta1::Result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::cosmos::base::abci::v1beta1::Result* SimulationResponse::mutable_result() {
  ::cosmos::base::abci::v1beta1::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.SimulationResponse.result)
  return _msg;
}
inline void SimulationResponse::set_allocated_result(::cosmos::base::abci::v1beta1::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.SimulationResponse.result)
}

// -------------------------------------------------------------------

// MsgData

// string msg_type = 1;
inline void MsgData::clear_msg_type() {
  _impl_.msg_type_.ClearToEmpty();
}
inline const std::string& MsgData::msg_type() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.MsgData.msg_type)
  return _internal_msg_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgData::set_msg_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.MsgData.msg_type)
}
inline std::string* MsgData::mutable_msg_type() {
  std::string* _s = _internal_mutable_msg_type();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.MsgData.msg_type)
  return _s;
}
inline const std::string& MsgData::_internal_msg_type() const {
  return _impl_.msg_type_.Get();
}
inline void MsgData::_internal_set_msg_type(const std::string& value) {
  
  _impl_.msg_type_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgData::_internal_mutable_msg_type() {
  
  return _impl_.msg_type_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgData::release_msg_type() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.MsgData.msg_type)
  return _impl_.msg_type_.Release();
}
inline void MsgData::set_allocated_msg_type(std::string* msg_type) {
  if (msg_type != nullptr) {
    
  } else {
    
  }
  _impl_.msg_type_.SetAllocated(msg_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_type_.IsDefault()) {
    _impl_.msg_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.MsgData.msg_type)
}

// bytes data = 2;
inline void MsgData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& MsgData::data() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.MsgData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgData::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.MsgData.data)
}
inline std::string* MsgData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.MsgData.data)
  return _s;
}
inline const std::string& MsgData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void MsgData::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgData::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgData::release_data() {
  // @@protoc_insertion_point(field_release:cosmos.base.abci.v1beta1.MsgData.data)
  return _impl_.data_.Release();
}
inline void MsgData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.abci.v1beta1.MsgData.data)
}

// -------------------------------------------------------------------

// TxMsgData

// repeated .cosmos.base.abci.v1beta1.MsgData data = 1 [deprecated = true];
inline int TxMsgData::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int TxMsgData::data_size() const {
  return _internal_data_size();
}
inline void TxMsgData::clear_data() {
  _impl_.data_.Clear();
}
inline ::cosmos::base::abci::v1beta1::MsgData* TxMsgData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxMsgData.data)
  return _impl_.data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::MsgData >*
TxMsgData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.TxMsgData.data)
  return &_impl_.data_;
}
inline const ::cosmos::base::abci::v1beta1::MsgData& TxMsgData::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const ::cosmos::base::abci::v1beta1::MsgData& TxMsgData::data(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxMsgData.data)
  return _internal_data(index);
}
inline ::cosmos::base::abci::v1beta1::MsgData* TxMsgData::_internal_add_data() {
  return _impl_.data_.Add();
}
inline ::cosmos::base::abci::v1beta1::MsgData* TxMsgData::add_data() {
  ::cosmos::base::abci::v1beta1::MsgData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.TxMsgData.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::MsgData >&
TxMsgData::data() const {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.TxMsgData.data)
  return _impl_.data_;
}

// repeated .google.protobuf.Any msg_responses = 2;
inline int TxMsgData::_internal_msg_responses_size() const {
  return _impl_.msg_responses_.size();
}
inline int TxMsgData::msg_responses_size() const {
  return _internal_msg_responses_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxMsgData::mutable_msg_responses(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.TxMsgData.msg_responses)
  return _impl_.msg_responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
TxMsgData::mutable_msg_responses() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.TxMsgData.msg_responses)
  return &_impl_.msg_responses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TxMsgData::_internal_msg_responses(int index) const {
  return _impl_.msg_responses_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TxMsgData::msg_responses(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.TxMsgData.msg_responses)
  return _internal_msg_responses(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxMsgData::_internal_add_msg_responses() {
  return _impl_.msg_responses_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxMsgData::add_msg_responses() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_msg_responses();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.TxMsgData.msg_responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
TxMsgData::msg_responses() const {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.TxMsgData.msg_responses)
  return _impl_.msg_responses_;
}

// -------------------------------------------------------------------

// SearchTxsResult

// uint64 total_count = 1;
inline void SearchTxsResult::clear_total_count() {
  _impl_.total_count_ = uint64_t{0u};
}
inline uint64_t SearchTxsResult::_internal_total_count() const {
  return _impl_.total_count_;
}
inline uint64_t SearchTxsResult::total_count() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchTxsResult.total_count)
  return _internal_total_count();
}
inline void SearchTxsResult::_internal_set_total_count(uint64_t value) {
  
  _impl_.total_count_ = value;
}
inline void SearchTxsResult::set_total_count(uint64_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchTxsResult.total_count)
}

// uint64 count = 2;
inline void SearchTxsResult::clear_count() {
  _impl_.count_ = uint64_t{0u};
}
inline uint64_t SearchTxsResult::_internal_count() const {
  return _impl_.count_;
}
inline uint64_t SearchTxsResult::count() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchTxsResult.count)
  return _internal_count();
}
inline void SearchTxsResult::_internal_set_count(uint64_t value) {
  
  _impl_.count_ = value;
}
inline void SearchTxsResult::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchTxsResult.count)
}

// uint64 page_number = 3;
inline void SearchTxsResult::clear_page_number() {
  _impl_.page_number_ = uint64_t{0u};
}
inline uint64_t SearchTxsResult::_internal_page_number() const {
  return _impl_.page_number_;
}
inline uint64_t SearchTxsResult::page_number() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchTxsResult.page_number)
  return _internal_page_number();
}
inline void SearchTxsResult::_internal_set_page_number(uint64_t value) {
  
  _impl_.page_number_ = value;
}
inline void SearchTxsResult::set_page_number(uint64_t value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchTxsResult.page_number)
}

// uint64 page_total = 4;
inline void SearchTxsResult::clear_page_total() {
  _impl_.page_total_ = uint64_t{0u};
}
inline uint64_t SearchTxsResult::_internal_page_total() const {
  return _impl_.page_total_;
}
inline uint64_t SearchTxsResult::page_total() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchTxsResult.page_total)
  return _internal_page_total();
}
inline void SearchTxsResult::_internal_set_page_total(uint64_t value) {
  
  _impl_.page_total_ = value;
}
inline void SearchTxsResult::set_page_total(uint64_t value) {
  _internal_set_page_total(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchTxsResult.page_total)
}

// uint64 limit = 5;
inline void SearchTxsResult::clear_limit() {
  _impl_.limit_ = uint64_t{0u};
}
inline uint64_t SearchTxsResult::_internal_limit() const {
  return _impl_.limit_;
}
inline uint64_t SearchTxsResult::limit() const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchTxsResult.limit)
  return _internal_limit();
}
inline void SearchTxsResult::_internal_set_limit(uint64_t value) {
  
  _impl_.limit_ = value;
}
inline void SearchTxsResult::set_limit(uint64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:cosmos.base.abci.v1beta1.SearchTxsResult.limit)
}

// repeated .cosmos.base.abci.v1beta1.TxResponse txs = 6;
inline int SearchTxsResult::_internal_txs_size() const {
  return _impl_.txs_.size();
}
inline int SearchTxsResult::txs_size() const {
  return _internal_txs_size();
}
inline void SearchTxsResult::clear_txs() {
  _impl_.txs_.Clear();
}
inline ::cosmos::base::abci::v1beta1::TxResponse* SearchTxsResult::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.abci.v1beta1.SearchTxsResult.txs)
  return _impl_.txs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::TxResponse >*
SearchTxsResult::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.abci.v1beta1.SearchTxsResult.txs)
  return &_impl_.txs_;
}
inline const ::cosmos::base::abci::v1beta1::TxResponse& SearchTxsResult::_internal_txs(int index) const {
  return _impl_.txs_.Get(index);
}
inline const ::cosmos::base::abci::v1beta1::TxResponse& SearchTxsResult::txs(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.abci.v1beta1.SearchTxsResult.txs)
  return _internal_txs(index);
}
inline ::cosmos::base::abci::v1beta1::TxResponse* SearchTxsResult::_internal_add_txs() {
  return _impl_.txs_.Add();
}
inline ::cosmos::base::abci::v1beta1::TxResponse* SearchTxsResult::add_txs() {
  ::cosmos::base::abci::v1beta1::TxResponse* _add = _internal_add_txs();
  // @@protoc_insertion_point(field_add:cosmos.base.abci.v1beta1.SearchTxsResult.txs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::TxResponse >&
SearchTxsResult::txs() const {
  // @@protoc_insertion_point(field_list:cosmos.base.abci.v1beta1.SearchTxsResult.txs)
  return _impl_.txs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace abci
}  // namespace base
}  // namespace cosmos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto
