// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/tx/v1beta1/service.proto

#include "cosmos/tx/v1beta1/service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cosmos {
namespace tx {
namespace v1beta1 {
PROTOBUF_CONSTEXPR GetTxsEventRequest::GetTxsEventRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.page_)*/uint64_t{0u}
  , /*decltype(_impl_.limit_)*/uint64_t{0u}
  , /*decltype(_impl_.order_by_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTxsEventRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTxsEventRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTxsEventRequestDefaultTypeInternal() {}
  union {
    GetTxsEventRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTxsEventRequestDefaultTypeInternal _GetTxsEventRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTxsEventResponse::GetTxsEventResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_.tx_responses_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTxsEventResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTxsEventResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTxsEventResponseDefaultTypeInternal() {}
  union {
    GetTxsEventResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTxsEventResponseDefaultTypeInternal _GetTxsEventResponse_default_instance_;
PROTOBUF_CONSTEXPR BroadcastTxRequest::BroadcastTxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BroadcastTxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastTxRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastTxRequestDefaultTypeInternal() {}
  union {
    BroadcastTxRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastTxRequestDefaultTypeInternal _BroadcastTxRequest_default_instance_;
PROTOBUF_CONSTEXPR BroadcastTxResponse::BroadcastTxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BroadcastTxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastTxResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastTxResponseDefaultTypeInternal() {}
  union {
    BroadcastTxResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastTxResponseDefaultTypeInternal _BroadcastTxResponse_default_instance_;
PROTOBUF_CONSTEXPR SimulateRequest::SimulateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimulateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulateRequestDefaultTypeInternal() {}
  union {
    SimulateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulateRequestDefaultTypeInternal _SimulateRequest_default_instance_;
PROTOBUF_CONSTEXPR SimulateResponse::SimulateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gas_info_)*/nullptr
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimulateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulateResponseDefaultTypeInternal() {}
  union {
    SimulateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulateResponseDefaultTypeInternal _SimulateResponse_default_instance_;
PROTOBUF_CONSTEXPR GetTxRequest::GetTxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTxRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTxRequestDefaultTypeInternal() {}
  union {
    GetTxRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTxRequestDefaultTypeInternal _GetTxRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTxResponse::GetTxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_)*/nullptr
  , /*decltype(_impl_.tx_response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTxResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTxResponseDefaultTypeInternal() {}
  union {
    GetTxResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTxResponseDefaultTypeInternal _GetTxResponse_default_instance_;
PROTOBUF_CONSTEXPR GetBlockWithTxsRequest::GetBlockWithTxsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.height_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBlockWithTxsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBlockWithTxsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBlockWithTxsRequestDefaultTypeInternal() {}
  union {
    GetBlockWithTxsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBlockWithTxsRequestDefaultTypeInternal _GetBlockWithTxsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBlockWithTxsResponse::GetBlockWithTxsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_.block_id_)*/nullptr
  , /*decltype(_impl_.block_)*/nullptr
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBlockWithTxsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBlockWithTxsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBlockWithTxsResponseDefaultTypeInternal() {}
  union {
    GetBlockWithTxsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBlockWithTxsResponseDefaultTypeInternal _GetBlockWithTxsResponse_default_instance_;
PROTOBUF_CONSTEXPR TxDecodeRequest::TxDecodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxDecodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxDecodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxDecodeRequestDefaultTypeInternal() {}
  union {
    TxDecodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxDecodeRequestDefaultTypeInternal _TxDecodeRequest_default_instance_;
PROTOBUF_CONSTEXPR TxDecodeResponse::TxDecodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxDecodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxDecodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxDecodeResponseDefaultTypeInternal() {}
  union {
    TxDecodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxDecodeResponseDefaultTypeInternal _TxDecodeResponse_default_instance_;
PROTOBUF_CONSTEXPR TxEncodeRequest::TxEncodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxEncodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxEncodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxEncodeRequestDefaultTypeInternal() {}
  union {
    TxEncodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxEncodeRequestDefaultTypeInternal _TxEncodeRequest_default_instance_;
PROTOBUF_CONSTEXPR TxEncodeResponse::TxEncodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxEncodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxEncodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxEncodeResponseDefaultTypeInternal() {}
  union {
    TxEncodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxEncodeResponseDefaultTypeInternal _TxEncodeResponse_default_instance_;
PROTOBUF_CONSTEXPR TxEncodeAminoRequest::TxEncodeAminoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amino_json_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxEncodeAminoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxEncodeAminoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxEncodeAminoRequestDefaultTypeInternal() {}
  union {
    TxEncodeAminoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxEncodeAminoRequestDefaultTypeInternal _TxEncodeAminoRequest_default_instance_;
PROTOBUF_CONSTEXPR TxEncodeAminoResponse::TxEncodeAminoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amino_binary_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxEncodeAminoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxEncodeAminoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxEncodeAminoResponseDefaultTypeInternal() {}
  union {
    TxEncodeAminoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxEncodeAminoResponseDefaultTypeInternal _TxEncodeAminoResponse_default_instance_;
PROTOBUF_CONSTEXPR TxDecodeAminoRequest::TxDecodeAminoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amino_binary_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxDecodeAminoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxDecodeAminoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxDecodeAminoRequestDefaultTypeInternal() {}
  union {
    TxDecodeAminoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxDecodeAminoRequestDefaultTypeInternal _TxDecodeAminoRequest_default_instance_;
PROTOBUF_CONSTEXPR TxDecodeAminoResponse::TxDecodeAminoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amino_json_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxDecodeAminoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxDecodeAminoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxDecodeAminoResponseDefaultTypeInternal() {}
  union {
    TxDecodeAminoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxDecodeAminoResponseDefaultTypeInternal _TxDecodeAminoResponse_default_instance_;
}  // namespace v1beta1
}  // namespace tx
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[18];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cosmos_2ftx_2fv1beta1_2fservice_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cosmos_2ftx_2fv1beta1_2fservice_2eproto = nullptr;

const uint32_t TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxsEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxsEventRequest, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxsEventRequest, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxsEventRequest, _impl_.order_by_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxsEventRequest, _impl_.page_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxsEventRequest, _impl_.limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxsEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxsEventResponse, _impl_.txs_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxsEventResponse, _impl_.tx_responses_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxsEventResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxsEventResponse, _impl_.total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::BroadcastTxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::BroadcastTxRequest, _impl_.tx_bytes_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::BroadcastTxRequest, _impl_.mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::BroadcastTxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::BroadcastTxResponse, _impl_.tx_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SimulateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SimulateRequest, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SimulateRequest, _impl_.tx_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SimulateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SimulateResponse, _impl_.gas_info_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SimulateResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxRequest, _impl_.hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxResponse, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetTxResponse, _impl_.tx_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetBlockWithTxsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetBlockWithTxsRequest, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetBlockWithTxsRequest, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetBlockWithTxsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetBlockWithTxsResponse, _impl_.txs_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetBlockWithTxsResponse, _impl_.block_id_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetBlockWithTxsResponse, _impl_.block_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::GetBlockWithTxsResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxDecodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxDecodeRequest, _impl_.tx_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxDecodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxDecodeResponse, _impl_.tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxEncodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxEncodeRequest, _impl_.tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxEncodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxEncodeResponse, _impl_.tx_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxEncodeAminoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxEncodeAminoRequest, _impl_.amino_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxEncodeAminoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxEncodeAminoResponse, _impl_.amino_binary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxDecodeAminoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxDecodeAminoRequest, _impl_.amino_binary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxDecodeAminoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxDecodeAminoResponse, _impl_.amino_json_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cosmos::tx::v1beta1::GetTxsEventRequest)},
  { 11, -1, -1, sizeof(::cosmos::tx::v1beta1::GetTxsEventResponse)},
  { 21, -1, -1, sizeof(::cosmos::tx::v1beta1::BroadcastTxRequest)},
  { 29, -1, -1, sizeof(::cosmos::tx::v1beta1::BroadcastTxResponse)},
  { 36, -1, -1, sizeof(::cosmos::tx::v1beta1::SimulateRequest)},
  { 44, -1, -1, sizeof(::cosmos::tx::v1beta1::SimulateResponse)},
  { 52, -1, -1, sizeof(::cosmos::tx::v1beta1::GetTxRequest)},
  { 59, -1, -1, sizeof(::cosmos::tx::v1beta1::GetTxResponse)},
  { 67, -1, -1, sizeof(::cosmos::tx::v1beta1::GetBlockWithTxsRequest)},
  { 75, -1, -1, sizeof(::cosmos::tx::v1beta1::GetBlockWithTxsResponse)},
  { 85, -1, -1, sizeof(::cosmos::tx::v1beta1::TxDecodeRequest)},
  { 92, -1, -1, sizeof(::cosmos::tx::v1beta1::TxDecodeResponse)},
  { 99, -1, -1, sizeof(::cosmos::tx::v1beta1::TxEncodeRequest)},
  { 106, -1, -1, sizeof(::cosmos::tx::v1beta1::TxEncodeResponse)},
  { 113, -1, -1, sizeof(::cosmos::tx::v1beta1::TxEncodeAminoRequest)},
  { 120, -1, -1, sizeof(::cosmos::tx::v1beta1::TxEncodeAminoResponse)},
  { 127, -1, -1, sizeof(::cosmos::tx::v1beta1::TxDecodeAminoRequest)},
  { 134, -1, -1, sizeof(::cosmos::tx::v1beta1::TxDecodeAminoResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cosmos::tx::v1beta1::_GetTxsEventRequest_default_instance_._instance,
  &::cosmos::tx::v1beta1::_GetTxsEventResponse_default_instance_._instance,
  &::cosmos::tx::v1beta1::_BroadcastTxRequest_default_instance_._instance,
  &::cosmos::tx::v1beta1::_BroadcastTxResponse_default_instance_._instance,
  &::cosmos::tx::v1beta1::_SimulateRequest_default_instance_._instance,
  &::cosmos::tx::v1beta1::_SimulateResponse_default_instance_._instance,
  &::cosmos::tx::v1beta1::_GetTxRequest_default_instance_._instance,
  &::cosmos::tx::v1beta1::_GetTxResponse_default_instance_._instance,
  &::cosmos::tx::v1beta1::_GetBlockWithTxsRequest_default_instance_._instance,
  &::cosmos::tx::v1beta1::_GetBlockWithTxsResponse_default_instance_._instance,
  &::cosmos::tx::v1beta1::_TxDecodeRequest_default_instance_._instance,
  &::cosmos::tx::v1beta1::_TxDecodeResponse_default_instance_._instance,
  &::cosmos::tx::v1beta1::_TxEncodeRequest_default_instance_._instance,
  &::cosmos::tx::v1beta1::_TxEncodeResponse_default_instance_._instance,
  &::cosmos::tx::v1beta1::_TxEncodeAminoRequest_default_instance_._instance,
  &::cosmos::tx::v1beta1::_TxEncodeAminoResponse_default_instance_._instance,
  &::cosmos::tx::v1beta1::_TxDecodeAminoRequest_default_instance_._instance,
  &::cosmos::tx::v1beta1::_TxDecodeAminoResponse_default_instance_._instance,
};

const char descriptor_table_protodef_cosmos_2ftx_2fv1beta1_2fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037cosmos/tx/v1beta1/service.proto\022\021cosmo"
  "s.tx.v1beta1\032\034google/api/annotations.pro"
  "to\032#cosmos/base/abci/v1beta1/abci.proto\032"
  "\032cosmos/tx/v1beta1/tx.proto\032*cosmos/base"
  "/query/v1beta1/pagination.proto\032\034tenderm"
  "int/types/block.proto\032\034tendermint/types/"
  "types.proto\"\257\001\n\022GetTxsEventRequest\022\016\n\006ev"
  "ents\030\001 \003(\t\022>\n\npagination\030\002 \001(\0132&.cosmos."
  "base.query.v1beta1.PageRequestB\002\030\001\022,\n\010or"
  "der_by\030\003 \001(\0162\032.cosmos.tx.v1beta1.OrderBy"
  "\022\014\n\004page\030\004 \001(\004\022\r\n\005limit\030\005 \001(\004\"\305\001\n\023GetTxs"
  "EventResponse\022\"\n\003txs\030\001 \003(\0132\025.cosmos.tx.v"
  "1beta1.Tx\022:\n\014tx_responses\030\002 \003(\0132$.cosmos"
  ".base.abci.v1beta1.TxResponse\022\?\n\npaginat"
  "ion\030\003 \001(\0132\'.cosmos.base.query.v1beta1.Pa"
  "geResponseB\002\030\001\022\r\n\005total\030\004 \001(\004\"V\n\022Broadca"
  "stTxRequest\022\020\n\010tx_bytes\030\001 \001(\014\022.\n\004mode\030\002 "
  "\001(\0162 .cosmos.tx.v1beta1.BroadcastMode\"P\n"
  "\023BroadcastTxResponse\0229\n\013tx_response\030\001 \001("
  "\0132$.cosmos.base.abci.v1beta1.TxResponse\""
  "J\n\017SimulateRequest\022%\n\002tx\030\001 \001(\0132\025.cosmos."
  "tx.v1beta1.TxB\002\030\001\022\020\n\010tx_bytes\030\002 \001(\014\"y\n\020S"
  "imulateResponse\0223\n\010gas_info\030\001 \001(\0132!.cosm"
  "os.base.abci.v1beta1.GasInfo\0220\n\006result\030\002"
  " \001(\0132 .cosmos.base.abci.v1beta1.Result\"\034"
  "\n\014GetTxRequest\022\014\n\004hash\030\001 \001(\t\"m\n\rGetTxRes"
  "ponse\022!\n\002tx\030\001 \001(\0132\025.cosmos.tx.v1beta1.Tx"
  "\0229\n\013tx_response\030\002 \001(\0132$.cosmos.base.abci"
  ".v1beta1.TxResponse\"d\n\026GetBlockWithTxsRe"
  "quest\022\016\n\006height\030\001 \001(\003\022:\n\npagination\030\002 \001("
  "\0132&.cosmos.base.query.v1beta1.PageReques"
  "t\"\317\001\n\027GetBlockWithTxsResponse\022\"\n\003txs\030\001 \003"
  "(\0132\025.cosmos.tx.v1beta1.Tx\022+\n\010block_id\030\002 "
  "\001(\0132\031.tendermint.types.BlockID\022&\n\005block\030"
  "\003 \001(\0132\027.tendermint.types.Block\022;\n\npagina"
  "tion\030\004 \001(\0132\'.cosmos.base.query.v1beta1.P"
  "ageResponse\"#\n\017TxDecodeRequest\022\020\n\010tx_byt"
  "es\030\001 \001(\014\"5\n\020TxDecodeResponse\022!\n\002tx\030\001 \001(\013"
  "2\025.cosmos.tx.v1beta1.Tx\"4\n\017TxEncodeReque"
  "st\022!\n\002tx\030\001 \001(\0132\025.cosmos.tx.v1beta1.Tx\"$\n"
  "\020TxEncodeResponse\022\020\n\010tx_bytes\030\001 \001(\014\"*\n\024T"
  "xEncodeAminoRequest\022\022\n\namino_json\030\001 \001(\t\""
  "-\n\025TxEncodeAminoResponse\022\024\n\014amino_binary"
  "\030\001 \001(\014\",\n\024TxDecodeAminoRequest\022\024\n\014amino_"
  "binary\030\001 \001(\014\"+\n\025TxDecodeAminoResponse\022\022\n"
  "\namino_json\030\001 \001(\t*H\n\007OrderBy\022\030\n\024ORDER_BY"
  "_UNSPECIFIED\020\000\022\020\n\014ORDER_BY_ASC\020\001\022\021\n\rORDE"
  "R_BY_DESC\020\002*\200\001\n\rBroadcastMode\022\036\n\032BROADCA"
  "ST_MODE_UNSPECIFIED\020\000\022\034\n\024BROADCAST_MODE_"
  "BLOCK\020\001\032\002\010\001\022\027\n\023BROADCAST_MODE_SYNC\020\002\022\030\n\024"
  "BROADCAST_MODE_ASYNC\020\0032\254\t\n\tTxService\022{\n\010"
  "Simulate\022\".cosmos.tx.v1beta1.SimulateReq"
  "uest\032#.cosmos.tx.v1beta1.SimulateRespons"
  "e\"&\202\323\344\223\002 \"\033/cosmos/tx/v1beta1/simulate:\001"
  "*\022q\n\005GetTx\022\037.cosmos.tx.v1beta1.GetTxRequ"
  "est\032 .cosmos.tx.v1beta1.GetTxResponse\"%\202"
  "\323\344\223\002\037\022\035/cosmos/tx/v1beta1/txs/{hash}\022\177\n\013"
  "BroadcastTx\022%.cosmos.tx.v1beta1.Broadcas"
  "tTxRequest\032&.cosmos.tx.v1beta1.Broadcast"
  "TxResponse\"!\202\323\344\223\002\033\"\026/cosmos/tx/v1beta1/t"
  "xs:\001*\022|\n\013GetTxsEvent\022%.cosmos.tx.v1beta1"
  ".GetTxsEventRequest\032&.cosmos.tx.v1beta1."
  "GetTxsEventResponse\"\036\202\323\344\223\002\030\022\026/cosmos/tx/"
  "v1beta1/txs\022\227\001\n\017GetBlockWithTxs\022).cosmos"
  ".tx.v1beta1.GetBlockWithTxsRequest\032*.cos"
  "mos.tx.v1beta1.GetBlockWithTxsResponse\"-"
  "\202\323\344\223\002\'\022%/cosmos/tx/v1beta1/txs/block/{he"
  "ight}\022y\n\010TxDecode\022\".cosmos.tx.v1beta1.Tx"
  "DecodeRequest\032#.cosmos.tx.v1beta1.TxDeco"
  "deResponse\"$\202\323\344\223\002\036\"\031/cosmos/tx/v1beta1/d"
  "ecode:\001*\022y\n\010TxEncode\022\".cosmos.tx.v1beta1"
  ".TxEncodeRequest\032#.cosmos.tx.v1beta1.TxE"
  "ncodeResponse\"$\202\323\344\223\002\036\"\031/cosmos/tx/v1beta"
  "1/encode:\001*\022\216\001\n\rTxEncodeAmino\022\'.cosmos.t"
  "x.v1beta1.TxEncodeAminoRequest\032(.cosmos."
  "tx.v1beta1.TxEncodeAminoResponse\"*\202\323\344\223\002$"
  "\"\037/cosmos/tx/v1beta1/encode/amino:\001*\022\216\001\n"
  "\rTxDecodeAmino\022\'.cosmos.tx.v1beta1.TxDec"
  "odeAminoRequest\032(.cosmos.tx.v1beta1.TxDe"
  "codeAminoResponse\"*\202\323\344\223\002$\"\037/cosmos/tx/v1"
  "beta1/decode/amino:\001*B\'Z%github.com/cosm"
  "os/cosmos-sdk/types/txb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_deps[6] = {
  &::descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto,
  &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
  &::descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_tendermint_2ftypes_2fblock_2eproto,
  &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto = {
    false, false, 3270, descriptor_table_protodef_cosmos_2ftx_2fv1beta1_2fservice_2eproto,
    "cosmos/tx/v1beta1/service.proto",
    &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once, descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_deps, 6, 18,
    schemas, file_default_instances, TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto::offsets,
    file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto, file_level_enum_descriptors_cosmos_2ftx_2fv1beta1_2fservice_2eproto,
    file_level_service_descriptors_cosmos_2ftx_2fv1beta1_2fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter() {
  return &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2ftx_2fv1beta1_2fservice_2eproto(&descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto);
namespace cosmos {
namespace tx {
namespace v1beta1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderBy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto);
  return file_level_enum_descriptors_cosmos_2ftx_2fv1beta1_2fservice_2eproto[0];
}
bool OrderBy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BroadcastMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto);
  return file_level_enum_descriptors_cosmos_2ftx_2fv1beta1_2fservice_2eproto[1];
}
bool BroadcastMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetTxsEventRequest::_Internal {
 public:
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const GetTxsEventRequest* msg);
};

const ::cosmos::base::query::v1beta1::PageRequest&
GetTxsEventRequest::_Internal::pagination(const GetTxsEventRequest* msg) {
  return *msg->_impl_.pagination_;
}
void GetTxsEventRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetTxsEventRequest::GetTxsEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.GetTxsEventRequest)
}
GetTxsEventRequest::GetTxsEventRequest(const GetTxsEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTxsEventRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.page_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.order_by_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  ::memcpy(&_impl_.page_, &from._impl_.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.order_by_) -
    reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.order_by_));
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.GetTxsEventRequest)
}

inline void GetTxsEventRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.page_){uint64_t{0u}}
    , decltype(_impl_.limit_){uint64_t{0u}}
    , decltype(_impl_.order_by_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTxsEventRequest::~GetTxsEventRequest() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.GetTxsEventRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTxsEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetTxsEventRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTxsEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.GetTxsEventRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  ::memset(&_impl_.page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.order_by_) -
      reinterpret_cast<char*>(&_impl_.page_)) + sizeof(_impl_.order_by_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTxsEventRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_events();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cosmos.tx.v1beta1.GetTxsEventRequest.events"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cosmos.tx.v1beta1.OrderBy order_by = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_order_by(static_cast<::cosmos::tx::v1beta1::OrderBy>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTxsEventRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.GetTxsEventRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string events = 1;
  for (int i = 0, n = this->_internal_events_size(); i < n; i++) {
    const auto& s = this->_internal_events(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.tx.v1beta1.GetTxsEventRequest.events");
    target = stream->WriteString(1, s, target);
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [deprecated = true];
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // .cosmos.tx.v1beta1.OrderBy order_by = 3;
  if (this->_internal_order_by() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_order_by(), target);
  }

  // uint64 page = 4;
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_page(), target);
  }

  // uint64 limit = 5;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.GetTxsEventRequest)
  return target;
}

size_t GetTxsEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.GetTxsEventRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string events = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.events_.size());
  for (int i = 0, n = _impl_.events_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.events_.Get(i));
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [deprecated = true];
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // uint64 page = 4;
  if (this->_internal_page() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_page());
  }

  // uint64 limit = 5;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_limit());
  }

  // .cosmos.tx.v1beta1.OrderBy order_by = 3;
  if (this->_internal_order_by() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_order_by());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTxsEventRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTxsEventRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTxsEventRequest::GetClassData() const { return &_class_data_; }


void GetTxsEventRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTxsEventRequest*>(&to_msg);
  auto& from = static_cast<const GetTxsEventRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.GetTxsEventRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_page() != 0) {
    _this->_internal_set_page(from._internal_page());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_order_by() != 0) {
    _this->_internal_set_order_by(from._internal_order_by());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTxsEventRequest::CopyFrom(const GetTxsEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.GetTxsEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxsEventRequest::IsInitialized() const {
  return true;
}

void GetTxsEventRequest::InternalSwap(GetTxsEventRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTxsEventRequest, _impl_.order_by_)
      + sizeof(GetTxsEventRequest::_impl_.order_by_)
      - PROTOBUF_FIELD_OFFSET(GetTxsEventRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTxsEventRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[0]);
}

// ===================================================================

class GetTxsEventResponse::_Internal {
 public:
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const GetTxsEventResponse* msg);
};

const ::cosmos::base::query::v1beta1::PageResponse&
GetTxsEventResponse::_Internal::pagination(const GetTxsEventResponse* msg) {
  return *msg->_impl_.pagination_;
}
void GetTxsEventResponse::clear_txs() {
  _impl_.txs_.Clear();
}
void GetTxsEventResponse::clear_tx_responses() {
  _impl_.tx_responses_.Clear();
}
void GetTxsEventResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetTxsEventResponse::GetTxsEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.GetTxsEventResponse)
}
GetTxsEventResponse::GetTxsEventResponse(const GetTxsEventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTxsEventResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , decltype(_impl_.tx_responses_){from._impl_.tx_responses_}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.GetTxsEventResponse)
}

inline void GetTxsEventResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , decltype(_impl_.tx_responses_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTxsEventResponse::~GetTxsEventResponse() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.GetTxsEventResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTxsEventResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txs_.~RepeatedPtrField();
  _impl_.tx_responses_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetTxsEventResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTxsEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.GetTxsEventResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txs_.Clear();
  _impl_.tx_responses_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.total_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTxsEventResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.tx.v1beta1.Tx txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .cosmos.base.abci.v1beta1.TxResponse tx_responses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tx_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTxsEventResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.GetTxsEventResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.tx.v1beta1.Tx txs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txs_size()); i < n; i++) {
    const auto& repfield = this->_internal_txs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.base.abci.v1beta1.TxResponse tx_responses = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tx_responses_size()); i < n; i++) {
    const auto& repfield = this->_internal_tx_responses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 3 [deprecated = true];
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // uint64 total = 4;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.GetTxsEventResponse)
  return target;
}

size_t GetTxsEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.GetTxsEventResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.tx.v1beta1.Tx txs = 1;
  total_size += 1UL * this->_internal_txs_size();
  for (const auto& msg : this->_impl_.txs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.base.abci.v1beta1.TxResponse tx_responses = 2;
  total_size += 1UL * this->_internal_tx_responses_size();
  for (const auto& msg : this->_impl_.tx_responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 3 [deprecated = true];
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // uint64 total = 4;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTxsEventResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTxsEventResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTxsEventResponse::GetClassData() const { return &_class_data_; }


void GetTxsEventResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTxsEventResponse*>(&to_msg);
  auto& from = static_cast<const GetTxsEventResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.GetTxsEventResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.txs_.MergeFrom(from._impl_.txs_);
  _this->_impl_.tx_responses_.MergeFrom(from._impl_.tx_responses_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTxsEventResponse::CopyFrom(const GetTxsEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.GetTxsEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxsEventResponse::IsInitialized() const {
  return true;
}

void GetTxsEventResponse::InternalSwap(GetTxsEventResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.txs_.InternalSwap(&other->_impl_.txs_);
  _impl_.tx_responses_.InternalSwap(&other->_impl_.tx_responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTxsEventResponse, _impl_.total_)
      + sizeof(GetTxsEventResponse::_impl_.total_)
      - PROTOBUF_FIELD_OFFSET(GetTxsEventResponse, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTxsEventResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[1]);
}

// ===================================================================

class BroadcastTxRequest::_Internal {
 public:
};

BroadcastTxRequest::BroadcastTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.BroadcastTxRequest)
}
BroadcastTxRequest::BroadcastTxRequest(const BroadcastTxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastTxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_bytes_){}
    , decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_bytes().empty()) {
    _this->_impl_.tx_bytes_.Set(from._internal_tx_bytes(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mode_ = from._impl_.mode_;
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.BroadcastTxRequest)
}

inline void BroadcastTxRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_bytes_){}
    , decltype(_impl_.mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BroadcastTxRequest::~BroadcastTxRequest() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.BroadcastTxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastTxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_bytes_.Destroy();
}

void BroadcastTxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.BroadcastTxRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_bytes_.ClearToEmpty();
  _impl_.mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastTxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cosmos.tx.v1beta1.BroadcastMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::cosmos::tx::v1beta1::BroadcastMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastTxRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.BroadcastTxRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx_bytes = 1;
  if (!this->_internal_tx_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx_bytes(), target);
  }

  // .cosmos.tx.v1beta1.BroadcastMode mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.BroadcastTxRequest)
  return target;
}

size_t BroadcastTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.BroadcastTxRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_bytes = 1;
  if (!this->_internal_tx_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_bytes());
  }

  // .cosmos.tx.v1beta1.BroadcastMode mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastTxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastTxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastTxRequest::GetClassData() const { return &_class_data_; }


void BroadcastTxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastTxRequest*>(&to_msg);
  auto& from = static_cast<const BroadcastTxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.BroadcastTxRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_bytes().empty()) {
    _this->_internal_set_tx_bytes(from._internal_tx_bytes());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastTxRequest::CopyFrom(const BroadcastTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.BroadcastTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastTxRequest::IsInitialized() const {
  return true;
}

void BroadcastTxRequest::InternalSwap(BroadcastTxRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_bytes_, lhs_arena,
      &other->_impl_.tx_bytes_, rhs_arena
  );
  swap(_impl_.mode_, other->_impl_.mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastTxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[2]);
}

// ===================================================================

class BroadcastTxResponse::_Internal {
 public:
  static const ::cosmos::base::abci::v1beta1::TxResponse& tx_response(const BroadcastTxResponse* msg);
};

const ::cosmos::base::abci::v1beta1::TxResponse&
BroadcastTxResponse::_Internal::tx_response(const BroadcastTxResponse* msg) {
  return *msg->_impl_.tx_response_;
}
void BroadcastTxResponse::clear_tx_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.tx_response_ != nullptr) {
    delete _impl_.tx_response_;
  }
  _impl_.tx_response_ = nullptr;
}
BroadcastTxResponse::BroadcastTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.BroadcastTxResponse)
}
BroadcastTxResponse::BroadcastTxResponse(const BroadcastTxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastTxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tx_response()) {
    _this->_impl_.tx_response_ = new ::cosmos::base::abci::v1beta1::TxResponse(*from._impl_.tx_response_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.BroadcastTxResponse)
}

inline void BroadcastTxResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BroadcastTxResponse::~BroadcastTxResponse() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.BroadcastTxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastTxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tx_response_;
}

void BroadcastTxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.BroadcastTxResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tx_response_ != nullptr) {
    delete _impl_.tx_response_;
  }
  _impl_.tx_response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastTxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.abci.v1beta1.TxResponse tx_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadcastTxResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.BroadcastTxResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.base.abci.v1beta1.TxResponse tx_response = 1;
  if (this->_internal_has_tx_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tx_response(this),
        _Internal::tx_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.BroadcastTxResponse)
  return target;
}

size_t BroadcastTxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.BroadcastTxResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.abci.v1beta1.TxResponse tx_response = 1;
  if (this->_internal_has_tx_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tx_response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastTxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastTxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastTxResponse::GetClassData() const { return &_class_data_; }


void BroadcastTxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastTxResponse*>(&to_msg);
  auto& from = static_cast<const BroadcastTxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.BroadcastTxResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tx_response()) {
    _this->_internal_mutable_tx_response()->::cosmos::base::abci::v1beta1::TxResponse::MergeFrom(
        from._internal_tx_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastTxResponse::CopyFrom(const BroadcastTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.BroadcastTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastTxResponse::IsInitialized() const {
  return true;
}

void BroadcastTxResponse::InternalSwap(BroadcastTxResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.tx_response_, other->_impl_.tx_response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastTxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[3]);
}

// ===================================================================

class SimulateRequest::_Internal {
 public:
  static const ::cosmos::tx::v1beta1::Tx& tx(const SimulateRequest* msg);
};

const ::cosmos::tx::v1beta1::Tx&
SimulateRequest::_Internal::tx(const SimulateRequest* msg) {
  return *msg->_impl_.tx_;
}
void SimulateRequest::clear_tx() {
  if (GetArenaForAllocation() == nullptr && _impl_.tx_ != nullptr) {
    delete _impl_.tx_;
  }
  _impl_.tx_ = nullptr;
}
SimulateRequest::SimulateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.SimulateRequest)
}
SimulateRequest::SimulateRequest(const SimulateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimulateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_bytes_){}
    , decltype(_impl_.tx_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_bytes().empty()) {
    _this->_impl_.tx_bytes_.Set(from._internal_tx_bytes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tx()) {
    _this->_impl_.tx_ = new ::cosmos::tx::v1beta1::Tx(*from._impl_.tx_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.SimulateRequest)
}

inline void SimulateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_bytes_){}
    , decltype(_impl_.tx_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimulateRequest::~SimulateRequest() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.SimulateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimulateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_bytes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tx_;
}

void SimulateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimulateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.SimulateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_bytes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.tx_ != nullptr) {
    delete _impl_.tx_;
  }
  _impl_.tx_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.tx.v1beta1.Tx tx = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tx_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tx_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.SimulateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.tx.v1beta1.Tx tx = 1 [deprecated = true];
  if (this->_internal_has_tx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tx(this),
        _Internal::tx(this).GetCachedSize(), target, stream);
  }

  // bytes tx_bytes = 2;
  if (!this->_internal_tx_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tx_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.SimulateRequest)
  return target;
}

size_t SimulateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.SimulateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_bytes = 2;
  if (!this->_internal_tx_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_bytes());
  }

  // .cosmos.tx.v1beta1.Tx tx = 1 [deprecated = true];
  if (this->_internal_has_tx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tx_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimulateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulateRequest::GetClassData() const { return &_class_data_; }


void SimulateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimulateRequest*>(&to_msg);
  auto& from = static_cast<const SimulateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.SimulateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_bytes().empty()) {
    _this->_internal_set_tx_bytes(from._internal_tx_bytes());
  }
  if (from._internal_has_tx()) {
    _this->_internal_mutable_tx()->::cosmos::tx::v1beta1::Tx::MergeFrom(
        from._internal_tx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulateRequest::CopyFrom(const SimulateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.SimulateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulateRequest::IsInitialized() const {
  return true;
}

void SimulateRequest::InternalSwap(SimulateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_bytes_, lhs_arena,
      &other->_impl_.tx_bytes_, rhs_arena
  );
  swap(_impl_.tx_, other->_impl_.tx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[4]);
}

// ===================================================================

class SimulateResponse::_Internal {
 public:
  static const ::cosmos::base::abci::v1beta1::GasInfo& gas_info(const SimulateResponse* msg);
  static const ::cosmos::base::abci::v1beta1::Result& result(const SimulateResponse* msg);
};

const ::cosmos::base::abci::v1beta1::GasInfo&
SimulateResponse::_Internal::gas_info(const SimulateResponse* msg) {
  return *msg->_impl_.gas_info_;
}
const ::cosmos::base::abci::v1beta1::Result&
SimulateResponse::_Internal::result(const SimulateResponse* msg) {
  return *msg->_impl_.result_;
}
void SimulateResponse::clear_gas_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.gas_info_ != nullptr) {
    delete _impl_.gas_info_;
  }
  _impl_.gas_info_ = nullptr;
}
void SimulateResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
SimulateResponse::SimulateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.SimulateResponse)
}
SimulateResponse::SimulateResponse(const SimulateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimulateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gas_info_){nullptr}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gas_info()) {
    _this->_impl_.gas_info_ = new ::cosmos::base::abci::v1beta1::GasInfo(*from._impl_.gas_info_);
  }
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::cosmos::base::abci::v1beta1::Result(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.SimulateResponse)
}

inline void SimulateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gas_info_){nullptr}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SimulateResponse::~SimulateResponse() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.SimulateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimulateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gas_info_;
  if (this != internal_default_instance()) delete _impl_.result_;
}

void SimulateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimulateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.SimulateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gas_info_ != nullptr) {
    delete _impl_.gas_info_;
  }
  _impl_.gas_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.abci.v1beta1.GasInfo gas_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gas_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cosmos.base.abci.v1beta1.Result result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.SimulateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.base.abci.v1beta1.GasInfo gas_info = 1;
  if (this->_internal_has_gas_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gas_info(this),
        _Internal::gas_info(this).GetCachedSize(), target, stream);
  }

  // .cosmos.base.abci.v1beta1.Result result = 2;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.SimulateResponse)
  return target;
}

size_t SimulateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.SimulateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.abci.v1beta1.GasInfo gas_info = 1;
  if (this->_internal_has_gas_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gas_info_);
  }

  // .cosmos.base.abci.v1beta1.Result result = 2;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimulateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulateResponse::GetClassData() const { return &_class_data_; }


void SimulateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimulateResponse*>(&to_msg);
  auto& from = static_cast<const SimulateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.SimulateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gas_info()) {
    _this->_internal_mutable_gas_info()->::cosmos::base::abci::v1beta1::GasInfo::MergeFrom(
        from._internal_gas_info());
  }
  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::cosmos::base::abci::v1beta1::Result::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulateResponse::CopyFrom(const SimulateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.SimulateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulateResponse::IsInitialized() const {
  return true;
}

void SimulateResponse::InternalSwap(SimulateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulateResponse, _impl_.result_)
      + sizeof(SimulateResponse::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(SimulateResponse, _impl_.gas_info_)>(
          reinterpret_cast<char*>(&_impl_.gas_info_),
          reinterpret_cast<char*>(&other->_impl_.gas_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[5]);
}

// ===================================================================

class GetTxRequest::_Internal {
 public:
};

GetTxRequest::GetTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.GetTxRequest)
}
GetTxRequest::GetTxRequest(const GetTxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.GetTxRequest)
}

inline void GetTxRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTxRequest::~GetTxRequest() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.GetTxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
}

void GetTxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.GetTxRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.tx.v1beta1.GetTxRequest.hash"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTxRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.GetTxRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.tx.v1beta1.GetTxRequest.hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.GetTxRequest)
  return target;
}

size_t GetTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.GetTxRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash = 1;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTxRequest::GetClassData() const { return &_class_data_; }


void GetTxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTxRequest*>(&to_msg);
  auto& from = static_cast<const GetTxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.GetTxRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTxRequest::CopyFrom(const GetTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.GetTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxRequest::IsInitialized() const {
  return true;
}

void GetTxRequest::InternalSwap(GetTxRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[6]);
}

// ===================================================================

class GetTxResponse::_Internal {
 public:
  static const ::cosmos::tx::v1beta1::Tx& tx(const GetTxResponse* msg);
  static const ::cosmos::base::abci::v1beta1::TxResponse& tx_response(const GetTxResponse* msg);
};

const ::cosmos::tx::v1beta1::Tx&
GetTxResponse::_Internal::tx(const GetTxResponse* msg) {
  return *msg->_impl_.tx_;
}
const ::cosmos::base::abci::v1beta1::TxResponse&
GetTxResponse::_Internal::tx_response(const GetTxResponse* msg) {
  return *msg->_impl_.tx_response_;
}
void GetTxResponse::clear_tx() {
  if (GetArenaForAllocation() == nullptr && _impl_.tx_ != nullptr) {
    delete _impl_.tx_;
  }
  _impl_.tx_ = nullptr;
}
void GetTxResponse::clear_tx_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.tx_response_ != nullptr) {
    delete _impl_.tx_response_;
  }
  _impl_.tx_response_ = nullptr;
}
GetTxResponse::GetTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.GetTxResponse)
}
GetTxResponse::GetTxResponse(const GetTxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){nullptr}
    , decltype(_impl_.tx_response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tx()) {
    _this->_impl_.tx_ = new ::cosmos::tx::v1beta1::Tx(*from._impl_.tx_);
  }
  if (from._internal_has_tx_response()) {
    _this->_impl_.tx_response_ = new ::cosmos::base::abci::v1beta1::TxResponse(*from._impl_.tx_response_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.GetTxResponse)
}

inline void GetTxResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){nullptr}
    , decltype(_impl_.tx_response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTxResponse::~GetTxResponse() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.GetTxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tx_;
  if (this != internal_default_instance()) delete _impl_.tx_response_;
}

void GetTxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.GetTxResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tx_ != nullptr) {
    delete _impl_.tx_;
  }
  _impl_.tx_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tx_response_ != nullptr) {
    delete _impl_.tx_response_;
  }
  _impl_.tx_response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.tx.v1beta1.Tx tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cosmos.base.abci.v1beta1.TxResponse tx_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTxResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.GetTxResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.tx.v1beta1.Tx tx = 1;
  if (this->_internal_has_tx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tx(this),
        _Internal::tx(this).GetCachedSize(), target, stream);
  }

  // .cosmos.base.abci.v1beta1.TxResponse tx_response = 2;
  if (this->_internal_has_tx_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tx_response(this),
        _Internal::tx_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.GetTxResponse)
  return target;
}

size_t GetTxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.GetTxResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.tx.v1beta1.Tx tx = 1;
  if (this->_internal_has_tx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tx_);
  }

  // .cosmos.base.abci.v1beta1.TxResponse tx_response = 2;
  if (this->_internal_has_tx_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tx_response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTxResponse::GetClassData() const { return &_class_data_; }


void GetTxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTxResponse*>(&to_msg);
  auto& from = static_cast<const GetTxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.GetTxResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tx()) {
    _this->_internal_mutable_tx()->::cosmos::tx::v1beta1::Tx::MergeFrom(
        from._internal_tx());
  }
  if (from._internal_has_tx_response()) {
    _this->_internal_mutable_tx_response()->::cosmos::base::abci::v1beta1::TxResponse::MergeFrom(
        from._internal_tx_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTxResponse::CopyFrom(const GetTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.GetTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxResponse::IsInitialized() const {
  return true;
}

void GetTxResponse::InternalSwap(GetTxResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTxResponse, _impl_.tx_response_)
      + sizeof(GetTxResponse::_impl_.tx_response_)
      - PROTOBUF_FIELD_OFFSET(GetTxResponse, _impl_.tx_)>(
          reinterpret_cast<char*>(&_impl_.tx_),
          reinterpret_cast<char*>(&other->_impl_.tx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[7]);
}

// ===================================================================

class GetBlockWithTxsRequest::_Internal {
 public:
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const GetBlockWithTxsRequest* msg);
};

const ::cosmos::base::query::v1beta1::PageRequest&
GetBlockWithTxsRequest::_Internal::pagination(const GetBlockWithTxsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void GetBlockWithTxsRequest::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetBlockWithTxsRequest::GetBlockWithTxsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.GetBlockWithTxsRequest)
}
GetBlockWithTxsRequest::GetBlockWithTxsRequest(const GetBlockWithTxsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBlockWithTxsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  _this->_impl_.height_ = from._impl_.height_;
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.GetBlockWithTxsRequest)
}

inline void GetBlockWithTxsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.height_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBlockWithTxsRequest::~GetBlockWithTxsRequest() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.GetBlockWithTxsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBlockWithTxsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetBlockWithTxsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBlockWithTxsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.GetBlockWithTxsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.height_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockWithTxsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBlockWithTxsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.GetBlockWithTxsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_height(), target);
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.GetBlockWithTxsRequest)
  return target;
}

size_t GetBlockWithTxsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.GetBlockWithTxsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // int64 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockWithTxsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBlockWithTxsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockWithTxsRequest::GetClassData() const { return &_class_data_; }


void GetBlockWithTxsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBlockWithTxsRequest*>(&to_msg);
  auto& from = static_cast<const GetBlockWithTxsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.GetBlockWithTxsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockWithTxsRequest::CopyFrom(const GetBlockWithTxsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.GetBlockWithTxsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockWithTxsRequest::IsInitialized() const {
  return true;
}

void GetBlockWithTxsRequest::InternalSwap(GetBlockWithTxsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBlockWithTxsRequest, _impl_.height_)
      + sizeof(GetBlockWithTxsRequest::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(GetBlockWithTxsRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockWithTxsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[8]);
}

// ===================================================================

class GetBlockWithTxsResponse::_Internal {
 public:
  static const ::tendermint::types::BlockID& block_id(const GetBlockWithTxsResponse* msg);
  static const ::tendermint::types::Block& block(const GetBlockWithTxsResponse* msg);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const GetBlockWithTxsResponse* msg);
};

const ::tendermint::types::BlockID&
GetBlockWithTxsResponse::_Internal::block_id(const GetBlockWithTxsResponse* msg) {
  return *msg->_impl_.block_id_;
}
const ::tendermint::types::Block&
GetBlockWithTxsResponse::_Internal::block(const GetBlockWithTxsResponse* msg) {
  return *msg->_impl_.block_;
}
const ::cosmos::base::query::v1beta1::PageResponse&
GetBlockWithTxsResponse::_Internal::pagination(const GetBlockWithTxsResponse* msg) {
  return *msg->_impl_.pagination_;
}
void GetBlockWithTxsResponse::clear_txs() {
  _impl_.txs_.Clear();
}
void GetBlockWithTxsResponse::clear_block_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_id_ != nullptr) {
    delete _impl_.block_id_;
  }
  _impl_.block_id_ = nullptr;
}
void GetBlockWithTxsResponse::clear_block() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_ != nullptr) {
    delete _impl_.block_;
  }
  _impl_.block_ = nullptr;
}
void GetBlockWithTxsResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
GetBlockWithTxsResponse::GetBlockWithTxsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.GetBlockWithTxsResponse)
}
GetBlockWithTxsResponse::GetBlockWithTxsResponse(const GetBlockWithTxsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBlockWithTxsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.block_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_id()) {
    _this->_impl_.block_id_ = new ::tendermint::types::BlockID(*from._impl_.block_id_);
  }
  if (from._internal_has_block()) {
    _this->_impl_.block_ = new ::tendermint::types::Block(*from._impl_.block_);
  }
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.GetBlockWithTxsResponse)
}

inline void GetBlockWithTxsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.block_){nullptr}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBlockWithTxsResponse::~GetBlockWithTxsResponse() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.GetBlockWithTxsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBlockWithTxsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.block_id_;
  if (this != internal_default_instance()) delete _impl_.block_;
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetBlockWithTxsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBlockWithTxsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.GetBlockWithTxsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.block_id_ != nullptr) {
    delete _impl_.block_id_;
  }
  _impl_.block_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.block_ != nullptr) {
    delete _impl_.block_;
  }
  _impl_.block_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockWithTxsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.tx.v1beta1.Tx txs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.BlockID block_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tendermint.types.Block block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBlockWithTxsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.GetBlockWithTxsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.tx.v1beta1.Tx txs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txs_size()); i < n; i++) {
    const auto& repfield = this->_internal_txs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tendermint.types.BlockID block_id = 2;
  if (this->_internal_has_block_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::block_id(this),
        _Internal::block_id(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.Block block = 3;
  if (this->_internal_has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::block(this),
        _Internal::block(this).GetCachedSize(), target, stream);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 4;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.GetBlockWithTxsResponse)
  return target;
}

size_t GetBlockWithTxsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.GetBlockWithTxsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.tx.v1beta1.Tx txs = 1;
  total_size += 1UL * this->_internal_txs_size();
  for (const auto& msg : this->_impl_.txs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tendermint.types.BlockID block_id = 2;
  if (this->_internal_has_block_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_id_);
  }

  // .tendermint.types.Block block = 3;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 4;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockWithTxsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBlockWithTxsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockWithTxsResponse::GetClassData() const { return &_class_data_; }


void GetBlockWithTxsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBlockWithTxsResponse*>(&to_msg);
  auto& from = static_cast<const GetBlockWithTxsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.GetBlockWithTxsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.txs_.MergeFrom(from._impl_.txs_);
  if (from._internal_has_block_id()) {
    _this->_internal_mutable_block_id()->::tendermint::types::BlockID::MergeFrom(
        from._internal_block_id());
  }
  if (from._internal_has_block()) {
    _this->_internal_mutable_block()->::tendermint::types::Block::MergeFrom(
        from._internal_block());
  }
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockWithTxsResponse::CopyFrom(const GetBlockWithTxsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.GetBlockWithTxsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockWithTxsResponse::IsInitialized() const {
  return true;
}

void GetBlockWithTxsResponse::InternalSwap(GetBlockWithTxsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.txs_.InternalSwap(&other->_impl_.txs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBlockWithTxsResponse, _impl_.pagination_)
      + sizeof(GetBlockWithTxsResponse::_impl_.pagination_)
      - PROTOBUF_FIELD_OFFSET(GetBlockWithTxsResponse, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockWithTxsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[9]);
}

// ===================================================================

class TxDecodeRequest::_Internal {
 public:
};

TxDecodeRequest::TxDecodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.TxDecodeRequest)
}
TxDecodeRequest::TxDecodeRequest(const TxDecodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxDecodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_bytes().empty()) {
    _this->_impl_.tx_bytes_.Set(from._internal_tx_bytes(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.TxDecodeRequest)
}

inline void TxDecodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxDecodeRequest::~TxDecodeRequest() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.TxDecodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxDecodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_bytes_.Destroy();
}

void TxDecodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxDecodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.TxDecodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_bytes_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxDecodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxDecodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.TxDecodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx_bytes = 1;
  if (!this->_internal_tx_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.TxDecodeRequest)
  return target;
}

size_t TxDecodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.TxDecodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_bytes = 1;
  if (!this->_internal_tx_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxDecodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxDecodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxDecodeRequest::GetClassData() const { return &_class_data_; }


void TxDecodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxDecodeRequest*>(&to_msg);
  auto& from = static_cast<const TxDecodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.TxDecodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_bytes().empty()) {
    _this->_internal_set_tx_bytes(from._internal_tx_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxDecodeRequest::CopyFrom(const TxDecodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.TxDecodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxDecodeRequest::IsInitialized() const {
  return true;
}

void TxDecodeRequest::InternalSwap(TxDecodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_bytes_, lhs_arena,
      &other->_impl_.tx_bytes_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TxDecodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[10]);
}

// ===================================================================

class TxDecodeResponse::_Internal {
 public:
  static const ::cosmos::tx::v1beta1::Tx& tx(const TxDecodeResponse* msg);
};

const ::cosmos::tx::v1beta1::Tx&
TxDecodeResponse::_Internal::tx(const TxDecodeResponse* msg) {
  return *msg->_impl_.tx_;
}
void TxDecodeResponse::clear_tx() {
  if (GetArenaForAllocation() == nullptr && _impl_.tx_ != nullptr) {
    delete _impl_.tx_;
  }
  _impl_.tx_ = nullptr;
}
TxDecodeResponse::TxDecodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.TxDecodeResponse)
}
TxDecodeResponse::TxDecodeResponse(const TxDecodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxDecodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tx()) {
    _this->_impl_.tx_ = new ::cosmos::tx::v1beta1::Tx(*from._impl_.tx_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.TxDecodeResponse)
}

inline void TxDecodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TxDecodeResponse::~TxDecodeResponse() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.TxDecodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxDecodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tx_;
}

void TxDecodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxDecodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.TxDecodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tx_ != nullptr) {
    delete _impl_.tx_;
  }
  _impl_.tx_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxDecodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.tx.v1beta1.Tx tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxDecodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.TxDecodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.tx.v1beta1.Tx tx = 1;
  if (this->_internal_has_tx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tx(this),
        _Internal::tx(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.TxDecodeResponse)
  return target;
}

size_t TxDecodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.TxDecodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.tx.v1beta1.Tx tx = 1;
  if (this->_internal_has_tx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tx_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxDecodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxDecodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxDecodeResponse::GetClassData() const { return &_class_data_; }


void TxDecodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxDecodeResponse*>(&to_msg);
  auto& from = static_cast<const TxDecodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.TxDecodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tx()) {
    _this->_internal_mutable_tx()->::cosmos::tx::v1beta1::Tx::MergeFrom(
        from._internal_tx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxDecodeResponse::CopyFrom(const TxDecodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.TxDecodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxDecodeResponse::IsInitialized() const {
  return true;
}

void TxDecodeResponse::InternalSwap(TxDecodeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.tx_, other->_impl_.tx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxDecodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[11]);
}

// ===================================================================

class TxEncodeRequest::_Internal {
 public:
  static const ::cosmos::tx::v1beta1::Tx& tx(const TxEncodeRequest* msg);
};

const ::cosmos::tx::v1beta1::Tx&
TxEncodeRequest::_Internal::tx(const TxEncodeRequest* msg) {
  return *msg->_impl_.tx_;
}
void TxEncodeRequest::clear_tx() {
  if (GetArenaForAllocation() == nullptr && _impl_.tx_ != nullptr) {
    delete _impl_.tx_;
  }
  _impl_.tx_ = nullptr;
}
TxEncodeRequest::TxEncodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.TxEncodeRequest)
}
TxEncodeRequest::TxEncodeRequest(const TxEncodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxEncodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tx()) {
    _this->_impl_.tx_ = new ::cosmos::tx::v1beta1::Tx(*from._impl_.tx_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.TxEncodeRequest)
}

inline void TxEncodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TxEncodeRequest::~TxEncodeRequest() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.TxEncodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxEncodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tx_;
}

void TxEncodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxEncodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.TxEncodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tx_ != nullptr) {
    delete _impl_.tx_;
  }
  _impl_.tx_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxEncodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.tx.v1beta1.Tx tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxEncodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.TxEncodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.tx.v1beta1.Tx tx = 1;
  if (this->_internal_has_tx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tx(this),
        _Internal::tx(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.TxEncodeRequest)
  return target;
}

size_t TxEncodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.TxEncodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.tx.v1beta1.Tx tx = 1;
  if (this->_internal_has_tx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tx_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxEncodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxEncodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxEncodeRequest::GetClassData() const { return &_class_data_; }


void TxEncodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxEncodeRequest*>(&to_msg);
  auto& from = static_cast<const TxEncodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.TxEncodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tx()) {
    _this->_internal_mutable_tx()->::cosmos::tx::v1beta1::Tx::MergeFrom(
        from._internal_tx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxEncodeRequest::CopyFrom(const TxEncodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.TxEncodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxEncodeRequest::IsInitialized() const {
  return true;
}

void TxEncodeRequest::InternalSwap(TxEncodeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.tx_, other->_impl_.tx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxEncodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[12]);
}

// ===================================================================

class TxEncodeResponse::_Internal {
 public:
};

TxEncodeResponse::TxEncodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.TxEncodeResponse)
}
TxEncodeResponse::TxEncodeResponse(const TxEncodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxEncodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_bytes().empty()) {
    _this->_impl_.tx_bytes_.Set(from._internal_tx_bytes(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.TxEncodeResponse)
}

inline void TxEncodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxEncodeResponse::~TxEncodeResponse() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.TxEncodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxEncodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_bytes_.Destroy();
}

void TxEncodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxEncodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.TxEncodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_bytes_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxEncodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxEncodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.TxEncodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx_bytes = 1;
  if (!this->_internal_tx_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.TxEncodeResponse)
  return target;
}

size_t TxEncodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.TxEncodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_bytes = 1;
  if (!this->_internal_tx_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxEncodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxEncodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxEncodeResponse::GetClassData() const { return &_class_data_; }


void TxEncodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxEncodeResponse*>(&to_msg);
  auto& from = static_cast<const TxEncodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.TxEncodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_bytes().empty()) {
    _this->_internal_set_tx_bytes(from._internal_tx_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxEncodeResponse::CopyFrom(const TxEncodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.TxEncodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxEncodeResponse::IsInitialized() const {
  return true;
}

void TxEncodeResponse::InternalSwap(TxEncodeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_bytes_, lhs_arena,
      &other->_impl_.tx_bytes_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TxEncodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[13]);
}

// ===================================================================

class TxEncodeAminoRequest::_Internal {
 public:
};

TxEncodeAminoRequest::TxEncodeAminoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.TxEncodeAminoRequest)
}
TxEncodeAminoRequest::TxEncodeAminoRequest(const TxEncodeAminoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxEncodeAminoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amino_json_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.amino_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.amino_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amino_json().empty()) {
    _this->_impl_.amino_json_.Set(from._internal_amino_json(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.TxEncodeAminoRequest)
}

inline void TxEncodeAminoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amino_json_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.amino_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.amino_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxEncodeAminoRequest::~TxEncodeAminoRequest() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.TxEncodeAminoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxEncodeAminoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.amino_json_.Destroy();
}

void TxEncodeAminoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxEncodeAminoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.TxEncodeAminoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.amino_json_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxEncodeAminoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string amino_json = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_amino_json();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.tx.v1beta1.TxEncodeAminoRequest.amino_json"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxEncodeAminoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.TxEncodeAminoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string amino_json = 1;
  if (!this->_internal_amino_json().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amino_json().data(), static_cast<int>(this->_internal_amino_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.tx.v1beta1.TxEncodeAminoRequest.amino_json");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_amino_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.TxEncodeAminoRequest)
  return target;
}

size_t TxEncodeAminoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.TxEncodeAminoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amino_json = 1;
  if (!this->_internal_amino_json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amino_json());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxEncodeAminoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxEncodeAminoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxEncodeAminoRequest::GetClassData() const { return &_class_data_; }


void TxEncodeAminoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxEncodeAminoRequest*>(&to_msg);
  auto& from = static_cast<const TxEncodeAminoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.TxEncodeAminoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_amino_json().empty()) {
    _this->_internal_set_amino_json(from._internal_amino_json());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxEncodeAminoRequest::CopyFrom(const TxEncodeAminoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.TxEncodeAminoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxEncodeAminoRequest::IsInitialized() const {
  return true;
}

void TxEncodeAminoRequest::InternalSwap(TxEncodeAminoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.amino_json_, lhs_arena,
      &other->_impl_.amino_json_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TxEncodeAminoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[14]);
}

// ===================================================================

class TxEncodeAminoResponse::_Internal {
 public:
};

TxEncodeAminoResponse::TxEncodeAminoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.TxEncodeAminoResponse)
}
TxEncodeAminoResponse::TxEncodeAminoResponse(const TxEncodeAminoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxEncodeAminoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amino_binary_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.amino_binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.amino_binary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amino_binary().empty()) {
    _this->_impl_.amino_binary_.Set(from._internal_amino_binary(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.TxEncodeAminoResponse)
}

inline void TxEncodeAminoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amino_binary_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.amino_binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.amino_binary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxEncodeAminoResponse::~TxEncodeAminoResponse() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.TxEncodeAminoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxEncodeAminoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.amino_binary_.Destroy();
}

void TxEncodeAminoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxEncodeAminoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.TxEncodeAminoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.amino_binary_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxEncodeAminoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes amino_binary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_amino_binary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxEncodeAminoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.TxEncodeAminoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes amino_binary = 1;
  if (!this->_internal_amino_binary().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_amino_binary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.TxEncodeAminoResponse)
  return target;
}

size_t TxEncodeAminoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.TxEncodeAminoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes amino_binary = 1;
  if (!this->_internal_amino_binary().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amino_binary());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxEncodeAminoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxEncodeAminoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxEncodeAminoResponse::GetClassData() const { return &_class_data_; }


void TxEncodeAminoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxEncodeAminoResponse*>(&to_msg);
  auto& from = static_cast<const TxEncodeAminoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.TxEncodeAminoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_amino_binary().empty()) {
    _this->_internal_set_amino_binary(from._internal_amino_binary());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxEncodeAminoResponse::CopyFrom(const TxEncodeAminoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.TxEncodeAminoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxEncodeAminoResponse::IsInitialized() const {
  return true;
}

void TxEncodeAminoResponse::InternalSwap(TxEncodeAminoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.amino_binary_, lhs_arena,
      &other->_impl_.amino_binary_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TxEncodeAminoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[15]);
}

// ===================================================================

class TxDecodeAminoRequest::_Internal {
 public:
};

TxDecodeAminoRequest::TxDecodeAminoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.TxDecodeAminoRequest)
}
TxDecodeAminoRequest::TxDecodeAminoRequest(const TxDecodeAminoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxDecodeAminoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amino_binary_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.amino_binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.amino_binary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amino_binary().empty()) {
    _this->_impl_.amino_binary_.Set(from._internal_amino_binary(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.TxDecodeAminoRequest)
}

inline void TxDecodeAminoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amino_binary_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.amino_binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.amino_binary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxDecodeAminoRequest::~TxDecodeAminoRequest() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.TxDecodeAminoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxDecodeAminoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.amino_binary_.Destroy();
}

void TxDecodeAminoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxDecodeAminoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.TxDecodeAminoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.amino_binary_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxDecodeAminoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes amino_binary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_amino_binary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxDecodeAminoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.TxDecodeAminoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes amino_binary = 1;
  if (!this->_internal_amino_binary().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_amino_binary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.TxDecodeAminoRequest)
  return target;
}

size_t TxDecodeAminoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.TxDecodeAminoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes amino_binary = 1;
  if (!this->_internal_amino_binary().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_amino_binary());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxDecodeAminoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxDecodeAminoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxDecodeAminoRequest::GetClassData() const { return &_class_data_; }


void TxDecodeAminoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxDecodeAminoRequest*>(&to_msg);
  auto& from = static_cast<const TxDecodeAminoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.TxDecodeAminoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_amino_binary().empty()) {
    _this->_internal_set_amino_binary(from._internal_amino_binary());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxDecodeAminoRequest::CopyFrom(const TxDecodeAminoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.TxDecodeAminoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxDecodeAminoRequest::IsInitialized() const {
  return true;
}

void TxDecodeAminoRequest::InternalSwap(TxDecodeAminoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.amino_binary_, lhs_arena,
      &other->_impl_.amino_binary_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TxDecodeAminoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[16]);
}

// ===================================================================

class TxDecodeAminoResponse::_Internal {
 public:
};

TxDecodeAminoResponse::TxDecodeAminoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.TxDecodeAminoResponse)
}
TxDecodeAminoResponse::TxDecodeAminoResponse(const TxDecodeAminoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxDecodeAminoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amino_json_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.amino_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.amino_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amino_json().empty()) {
    _this->_impl_.amino_json_.Set(from._internal_amino_json(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.TxDecodeAminoResponse)
}

inline void TxDecodeAminoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amino_json_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.amino_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.amino_json_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxDecodeAminoResponse::~TxDecodeAminoResponse() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.TxDecodeAminoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxDecodeAminoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.amino_json_.Destroy();
}

void TxDecodeAminoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxDecodeAminoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.TxDecodeAminoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.amino_json_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxDecodeAminoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string amino_json = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_amino_json();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.tx.v1beta1.TxDecodeAminoResponse.amino_json"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxDecodeAminoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.TxDecodeAminoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string amino_json = 1;
  if (!this->_internal_amino_json().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amino_json().data(), static_cast<int>(this->_internal_amino_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.tx.v1beta1.TxDecodeAminoResponse.amino_json");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_amino_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.TxDecodeAminoResponse)
  return target;
}

size_t TxDecodeAminoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.TxDecodeAminoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amino_json = 1;
  if (!this->_internal_amino_json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amino_json());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxDecodeAminoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxDecodeAminoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxDecodeAminoResponse::GetClassData() const { return &_class_data_; }


void TxDecodeAminoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxDecodeAminoResponse*>(&to_msg);
  auto& from = static_cast<const TxDecodeAminoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.TxDecodeAminoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_amino_json().empty()) {
    _this->_internal_set_amino_json(from._internal_amino_json());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxDecodeAminoResponse::CopyFrom(const TxDecodeAminoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.TxDecodeAminoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxDecodeAminoResponse::IsInitialized() const {
  return true;
}

void TxDecodeAminoResponse::InternalSwap(TxDecodeAminoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.amino_json_, lhs_arena,
      &other->_impl_.amino_json_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TxDecodeAminoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_getter, &descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fv1beta1_2fservice_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tx
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::GetTxsEventRequest*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::GetTxsEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::GetTxsEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::GetTxsEventResponse*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::GetTxsEventResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::GetTxsEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::BroadcastTxRequest*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::BroadcastTxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::BroadcastTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::BroadcastTxResponse*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::BroadcastTxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::BroadcastTxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::SimulateRequest*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::SimulateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::SimulateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::SimulateResponse*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::SimulateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::SimulateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::GetTxRequest*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::GetTxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::GetTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::GetTxResponse*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::GetTxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::GetTxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::GetBlockWithTxsRequest*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::GetBlockWithTxsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::GetBlockWithTxsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::GetBlockWithTxsResponse*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::TxDecodeRequest*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::TxDecodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::TxDecodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::TxDecodeResponse*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::TxDecodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::TxDecodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::TxEncodeRequest*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::TxEncodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::TxEncodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::TxEncodeResponse*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::TxEncodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::TxEncodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::TxEncodeAminoRequest*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::TxEncodeAminoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::TxEncodeAminoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::TxEncodeAminoResponse*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::TxEncodeAminoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::TxEncodeAminoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::TxDecodeAminoRequest*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::TxDecodeAminoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::TxDecodeAminoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::TxDecodeAminoResponse*
Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::TxDecodeAminoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::TxDecodeAminoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
