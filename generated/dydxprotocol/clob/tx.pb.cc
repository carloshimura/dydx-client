// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/tx.proto

#include "dydxprotocol/clob/tx.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dydxprotocol {
namespace clob {
PROTOBUF_CONSTEXPR MsgProposedOperations::MsgProposedOperations(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operations_queue_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgProposedOperationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgProposedOperationsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgProposedOperationsDefaultTypeInternal() {}
  union {
    MsgProposedOperations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgProposedOperationsDefaultTypeInternal _MsgProposedOperations_default_instance_;
PROTOBUF_CONSTEXPR MsgProposedOperationsResponse::MsgProposedOperationsResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgProposedOperationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgProposedOperationsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgProposedOperationsResponseDefaultTypeInternal() {}
  union {
    MsgProposedOperationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgProposedOperationsResponseDefaultTypeInternal _MsgProposedOperationsResponse_default_instance_;
PROTOBUF_CONSTEXPR MsgPlaceOrder::MsgPlaceOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgPlaceOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgPlaceOrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgPlaceOrderDefaultTypeInternal() {}
  union {
    MsgPlaceOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgPlaceOrderDefaultTypeInternal _MsgPlaceOrder_default_instance_;
PROTOBUF_CONSTEXPR MsgPlaceOrderResponse::MsgPlaceOrderResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgPlaceOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgPlaceOrderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgPlaceOrderResponseDefaultTypeInternal() {}
  union {
    MsgPlaceOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgPlaceOrderResponseDefaultTypeInternal _MsgPlaceOrderResponse_default_instance_;
PROTOBUF_CONSTEXPR MsgCancelOrder::MsgCancelOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_id_)*/nullptr
  , /*decltype(_impl_.good_til_oneof_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MsgCancelOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCancelOrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCancelOrderDefaultTypeInternal() {}
  union {
    MsgCancelOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCancelOrderDefaultTypeInternal _MsgCancelOrder_default_instance_;
PROTOBUF_CONSTEXPR MsgCancelOrderResponse::MsgCancelOrderResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgCancelOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCancelOrderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCancelOrderResponseDefaultTypeInternal() {}
  union {
    MsgCancelOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCancelOrderResponseDefaultTypeInternal _MsgCancelOrderResponse_default_instance_;
PROTOBUF_CONSTEXPR OperationRaw::OperationRaw(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operation_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OperationRawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationRawDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationRawDefaultTypeInternal() {}
  union {
    OperationRaw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationRawDefaultTypeInternal _OperationRaw_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dydxprotocol_2fclob_2ftx_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dydxprotocol_2fclob_2ftx_2eproto = nullptr;

const uint32_t TableStruct_dydxprotocol_2fclob_2ftx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgProposedOperations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgProposedOperations, _impl_.operations_queue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgProposedOperationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgPlaceOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgPlaceOrder, _impl_.order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgPlaceOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCancelOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCancelOrder, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCancelOrder, _impl_.order_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCancelOrder, _impl_.good_til_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCancelOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OperationRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OperationRaw, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OperationRaw, _impl_.operation_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dydxprotocol::clob::MsgProposedOperations)},
  { 7, -1, -1, sizeof(::dydxprotocol::clob::MsgProposedOperationsResponse)},
  { 13, -1, -1, sizeof(::dydxprotocol::clob::MsgPlaceOrder)},
  { 20, -1, -1, sizeof(::dydxprotocol::clob::MsgPlaceOrderResponse)},
  { 26, -1, -1, sizeof(::dydxprotocol::clob::MsgCancelOrder)},
  { 36, -1, -1, sizeof(::dydxprotocol::clob::MsgCancelOrderResponse)},
  { 42, -1, -1, sizeof(::dydxprotocol::clob::OperationRaw)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dydxprotocol::clob::_MsgProposedOperations_default_instance_._instance,
  &::dydxprotocol::clob::_MsgProposedOperationsResponse_default_instance_._instance,
  &::dydxprotocol::clob::_MsgPlaceOrder_default_instance_._instance,
  &::dydxprotocol::clob::_MsgPlaceOrderResponse_default_instance_._instance,
  &::dydxprotocol::clob::_MsgCancelOrder_default_instance_._instance,
  &::dydxprotocol::clob::_MsgCancelOrderResponse_default_instance_._instance,
  &::dydxprotocol::clob::_OperationRaw_default_instance_._instance,
};

const char descriptor_table_protodef_dydxprotocol_2fclob_2ftx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032dydxprotocol/clob/tx.proto\022\021dydxprotoc"
  "ol.clob\032\024gogoproto/gogo.proto\032\035dydxproto"
  "col/clob/order.proto\032&dydxprotocol/clob/"
  "order_removals.proto\032\037dydxprotocol/clob/"
  "matches.proto\"X\n\025MsgProposedOperations\022\?"
  "\n\020operations_queue\030\001 \003(\0132\037.dydxprotocol."
  "clob.OperationRawB\004\310\336\037\000\"\037\n\035MsgProposedOp"
  "erationsResponse\">\n\rMsgPlaceOrder\022-\n\005ord"
  "er\030\001 \001(\0132\030.dydxprotocol.clob.OrderB\004\310\336\037\000"
  "\"\027\n\025MsgPlaceOrderResponse\"\217\001\n\016MsgCancelO"
  "rder\0222\n\010order_id\030\001 \001(\0132\032.dydxprotocol.cl"
  "ob.OrderIdB\004\310\336\037\000\022\030\n\016good_til_block\030\002 \001(\r"
  "H\000\022\035\n\023good_til_block_time\030\003 \001(\007H\000B\020\n\016goo"
  "d_til_oneof\"\030\n\026MsgCancelOrderResponse\"\252\001"
  "\n\014OperationRaw\022-\n\005match\030\001 \001(\0132\034.dydxprot"
  "ocol.clob.ClobMatchH\000\022$\n\032short_term_orde"
  "r_placement\030\002 \001(\014H\000\0228\n\rorder_removal\030\003 \001"
  "(\0132\037.dydxprotocol.clob.OrderRemovalH\000B\013\n"
  "\toperation2\256\002\n\003Msg\022p\n\022ProposedOperations"
  "\022(.dydxprotocol.clob.MsgProposedOperatio"
  "ns\0320.dydxprotocol.clob.MsgProposedOperat"
  "ionsResponse\022X\n\nPlaceOrder\022 .dydxprotoco"
  "l.clob.MsgPlaceOrder\032(.dydxprotocol.clob"
  ".MsgPlaceOrderResponse\022[\n\013CancelOrder\022!."
  "dydxprotocol.clob.MsgCancelOrder\032).dydxp"
  "rotocol.clob.MsgCancelOrderResponseB8Z6g"
  "ithub.com/dydxprotocol/v4-chain/protocol"
  "/x/clob/typesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_deps[4] = {
  &::descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto,
  &::descriptor_table_dydxprotocol_2fclob_2forder_2eproto,
  &::descriptor_table_dydxprotocol_2fclob_2forder_5fremovals_2eproto,
  &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::_pbi::once_flag descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fclob_2ftx_2eproto = {
    false, false, 1101, descriptor_table_protodef_dydxprotocol_2fclob_2ftx_2eproto,
    "dydxprotocol/clob/tx.proto",
    &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once, descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_deps, 4, 7,
    schemas, file_default_instances, TableStruct_dydxprotocol_2fclob_2ftx_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto, file_level_enum_descriptors_dydxprotocol_2fclob_2ftx_2eproto,
    file_level_service_descriptors_dydxprotocol_2fclob_2ftx_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fclob_2ftx_2eproto(&descriptor_table_dydxprotocol_2fclob_2ftx_2eproto);
namespace dydxprotocol {
namespace clob {

// ===================================================================

class MsgProposedOperations::_Internal {
 public:
};

MsgProposedOperations::MsgProposedOperations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgProposedOperations)
}
MsgProposedOperations::MsgProposedOperations(const MsgProposedOperations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgProposedOperations* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operations_queue_){from._impl_.operations_queue_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgProposedOperations)
}

inline void MsgProposedOperations::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.operations_queue_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgProposedOperations::~MsgProposedOperations() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MsgProposedOperations)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgProposedOperations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operations_queue_.~RepeatedPtrField();
}

void MsgProposedOperations::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgProposedOperations::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MsgProposedOperations)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operations_queue_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgProposedOperations::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.clob.OperationRaw operations_queue = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations_queue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgProposedOperations::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MsgProposedOperations)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.OperationRaw operations_queue = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operations_queue_size()); i < n; i++) {
    const auto& repfield = this->_internal_operations_queue(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MsgProposedOperations)
  return target;
}

size_t MsgProposedOperations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MsgProposedOperations)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.OperationRaw operations_queue = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_operations_queue_size();
  for (const auto& msg : this->_impl_.operations_queue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgProposedOperations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgProposedOperations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgProposedOperations::GetClassData() const { return &_class_data_; }


void MsgProposedOperations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgProposedOperations*>(&to_msg);
  auto& from = static_cast<const MsgProposedOperations&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MsgProposedOperations)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.operations_queue_.MergeFrom(from._impl_.operations_queue_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgProposedOperations::CopyFrom(const MsgProposedOperations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MsgProposedOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgProposedOperations::IsInitialized() const {
  return true;
}

void MsgProposedOperations::InternalSwap(MsgProposedOperations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.operations_queue_.InternalSwap(&other->_impl_.operations_queue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgProposedOperations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[0]);
}

// ===================================================================

class MsgProposedOperationsResponse::_Internal {
 public:
};

MsgProposedOperationsResponse::MsgProposedOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgProposedOperationsResponse)
}
MsgProposedOperationsResponse::MsgProposedOperationsResponse(const MsgProposedOperationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgProposedOperationsResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgProposedOperationsResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgProposedOperationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgProposedOperationsResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgProposedOperationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[1]);
}

// ===================================================================

class MsgPlaceOrder::_Internal {
 public:
  static const ::dydxprotocol::clob::Order& order(const MsgPlaceOrder* msg);
};

const ::dydxprotocol::clob::Order&
MsgPlaceOrder::_Internal::order(const MsgPlaceOrder* msg) {
  return *msg->_impl_.order_;
}
void MsgPlaceOrder::clear_order() {
  if (GetArenaForAllocation() == nullptr && _impl_.order_ != nullptr) {
    delete _impl_.order_;
  }
  _impl_.order_ = nullptr;
}
MsgPlaceOrder::MsgPlaceOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgPlaceOrder)
}
MsgPlaceOrder::MsgPlaceOrder(const MsgPlaceOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgPlaceOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    _this->_impl_.order_ = new ::dydxprotocol::clob::Order(*from._impl_.order_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgPlaceOrder)
}

inline void MsgPlaceOrder::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgPlaceOrder::~MsgPlaceOrder() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MsgPlaceOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgPlaceOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.order_;
}

void MsgPlaceOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgPlaceOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MsgPlaceOrder)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.order_ != nullptr) {
    delete _impl_.order_;
  }
  _impl_.order_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPlaceOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgPlaceOrder::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MsgPlaceOrder)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_order()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MsgPlaceOrder)
  return target;
}

size_t MsgPlaceOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MsgPlaceOrder)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPlaceOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgPlaceOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPlaceOrder::GetClassData() const { return &_class_data_; }


void MsgPlaceOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgPlaceOrder*>(&to_msg);
  auto& from = static_cast<const MsgPlaceOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MsgPlaceOrder)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_order()) {
    _this->_internal_mutable_order()->::dydxprotocol::clob::Order::MergeFrom(
        from._internal_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgPlaceOrder::CopyFrom(const MsgPlaceOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MsgPlaceOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlaceOrder::IsInitialized() const {
  return true;
}

void MsgPlaceOrder::InternalSwap(MsgPlaceOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.order_, other->_impl_.order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPlaceOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[2]);
}

// ===================================================================

class MsgPlaceOrderResponse::_Internal {
 public:
};

MsgPlaceOrderResponse::MsgPlaceOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgPlaceOrderResponse)
}
MsgPlaceOrderResponse::MsgPlaceOrderResponse(const MsgPlaceOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgPlaceOrderResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgPlaceOrderResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPlaceOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPlaceOrderResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgPlaceOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[3]);
}

// ===================================================================

class MsgCancelOrder::_Internal {
 public:
  static const ::dydxprotocol::clob::OrderId& order_id(const MsgCancelOrder* msg);
};

const ::dydxprotocol::clob::OrderId&
MsgCancelOrder::_Internal::order_id(const MsgCancelOrder* msg) {
  return *msg->_impl_.order_id_;
}
void MsgCancelOrder::clear_order_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.order_id_ != nullptr) {
    delete _impl_.order_id_;
  }
  _impl_.order_id_ = nullptr;
}
MsgCancelOrder::MsgCancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgCancelOrder)
}
MsgCancelOrder::MsgCancelOrder(const MsgCancelOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCancelOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_id_){nullptr}
    , decltype(_impl_.good_til_oneof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order_id()) {
    _this->_impl_.order_id_ = new ::dydxprotocol::clob::OrderId(*from._impl_.order_id_);
  }
  clear_has_good_til_oneof();
  switch (from.good_til_oneof_case()) {
    case kGoodTilBlock: {
      _this->_internal_set_good_til_block(from._internal_good_til_block());
      break;
    }
    case kGoodTilBlockTime: {
      _this->_internal_set_good_til_block_time(from._internal_good_til_block_time());
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgCancelOrder)
}

inline void MsgCancelOrder::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_id_){nullptr}
    , decltype(_impl_.good_til_oneof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_good_til_oneof();
}

MsgCancelOrder::~MsgCancelOrder() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MsgCancelOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCancelOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.order_id_;
  if (has_good_til_oneof()) {
    clear_good_til_oneof();
  }
}

void MsgCancelOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCancelOrder::clear_good_til_oneof() {
// @@protoc_insertion_point(one_of_clear_start:dydxprotocol.clob.MsgCancelOrder)
  switch (good_til_oneof_case()) {
    case kGoodTilBlock: {
      // No need to clear
      break;
    }
    case kGoodTilBlockTime: {
      // No need to clear
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = GOOD_TIL_ONEOF_NOT_SET;
}


void MsgCancelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MsgCancelOrder)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.order_id_ != nullptr) {
    delete _impl_.order_id_;
  }
  _impl_.order_id_ = nullptr;
  clear_good_til_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCancelOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 good_til_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_good_til_block(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 good_til_block_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _internal_set_good_til_block_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgCancelOrder::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MsgCancelOrder)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_order_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order_id(this),
        _Internal::order_id(this).GetCachedSize(), target, stream);
  }

  // uint32 good_til_block = 2;
  if (_internal_has_good_til_block()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_good_til_block(), target);
  }

  // fixed32 good_til_block_time = 3;
  if (_internal_has_good_til_block_time()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_good_til_block_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MsgCancelOrder)
  return target;
}

size_t MsgCancelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MsgCancelOrder)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_order_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_id_);
  }

  switch (good_til_oneof_case()) {
    // uint32 good_til_block = 2;
    case kGoodTilBlock: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_good_til_block());
      break;
    }
    // fixed32 good_til_block_time = 3;
    case kGoodTilBlockTime: {
      total_size += 1 + 4;
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCancelOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCancelOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCancelOrder::GetClassData() const { return &_class_data_; }


void MsgCancelOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCancelOrder*>(&to_msg);
  auto& from = static_cast<const MsgCancelOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MsgCancelOrder)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_order_id()) {
    _this->_internal_mutable_order_id()->::dydxprotocol::clob::OrderId::MergeFrom(
        from._internal_order_id());
  }
  switch (from.good_til_oneof_case()) {
    case kGoodTilBlock: {
      _this->_internal_set_good_til_block(from._internal_good_til_block());
      break;
    }
    case kGoodTilBlockTime: {
      _this->_internal_set_good_til_block_time(from._internal_good_til_block_time());
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCancelOrder::CopyFrom(const MsgCancelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MsgCancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCancelOrder::IsInitialized() const {
  return true;
}

void MsgCancelOrder::InternalSwap(MsgCancelOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.order_id_, other->_impl_.order_id_);
  swap(_impl_.good_til_oneof_, other->_impl_.good_til_oneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCancelOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[4]);
}

// ===================================================================

class MsgCancelOrderResponse::_Internal {
 public:
};

MsgCancelOrderResponse::MsgCancelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgCancelOrderResponse)
}
MsgCancelOrderResponse::MsgCancelOrderResponse(const MsgCancelOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgCancelOrderResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgCancelOrderResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCancelOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCancelOrderResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgCancelOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[5]);
}

// ===================================================================

class OperationRaw::_Internal {
 public:
  static const ::dydxprotocol::clob::ClobMatch& match(const OperationRaw* msg);
  static const ::dydxprotocol::clob::OrderRemoval& order_removal(const OperationRaw* msg);
};

const ::dydxprotocol::clob::ClobMatch&
OperationRaw::_Internal::match(const OperationRaw* msg) {
  return *msg->_impl_.operation_.match_;
}
const ::dydxprotocol::clob::OrderRemoval&
OperationRaw::_Internal::order_removal(const OperationRaw* msg) {
  return *msg->_impl_.operation_.order_removal_;
}
void OperationRaw::set_allocated_match(::dydxprotocol::clob::ClobMatch* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match));
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    set_has_match();
    _impl_.operation_.match_ = match;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.OperationRaw.match)
}
void OperationRaw::clear_match() {
  if (_internal_has_match()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.operation_.match_;
    }
    clear_has_operation();
  }
}
void OperationRaw::set_allocated_order_removal(::dydxprotocol::clob::OrderRemoval* order_removal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (order_removal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_removal));
    if (message_arena != submessage_arena) {
      order_removal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_removal, submessage_arena);
    }
    set_has_order_removal();
    _impl_.operation_.order_removal_ = order_removal;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.OperationRaw.order_removal)
}
void OperationRaw::clear_order_removal() {
  if (_internal_has_order_removal()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.operation_.order_removal_;
    }
    clear_has_operation();
  }
}
OperationRaw::OperationRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.OperationRaw)
}
OperationRaw::OperationRaw(const OperationRaw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationRaw* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_operation();
  switch (from.operation_case()) {
    case kMatch: {
      _this->_internal_mutable_match()->::dydxprotocol::clob::ClobMatch::MergeFrom(
          from._internal_match());
      break;
    }
    case kShortTermOrderPlacement: {
      _this->_internal_set_short_term_order_placement(from._internal_short_term_order_placement());
      break;
    }
    case kOrderRemoval: {
      _this->_internal_mutable_order_removal()->::dydxprotocol::clob::OrderRemoval::MergeFrom(
          from._internal_order_removal());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.OperationRaw)
}

inline void OperationRaw::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_operation();
}

OperationRaw::~OperationRaw() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.OperationRaw)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationRaw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_operation()) {
    clear_operation();
  }
}

void OperationRaw::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationRaw::clear_operation() {
// @@protoc_insertion_point(one_of_clear_start:dydxprotocol.clob.OperationRaw)
  switch (operation_case()) {
    case kMatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.match_;
      }
      break;
    }
    case kShortTermOrderPlacement: {
      _impl_.operation_.short_term_order_placement_.Destroy();
      break;
    }
    case kOrderRemoval: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.order_removal_;
      }
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPERATION_NOT_SET;
}


void OperationRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.OperationRaw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_operation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationRaw::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.ClobMatch match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes short_term_order_placement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_short_term_order_placement();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dydxprotocol.clob.OrderRemoval order_removal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_removal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationRaw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.OperationRaw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dydxprotocol.clob.ClobMatch match = 1;
  if (_internal_has_match()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::match(this),
        _Internal::match(this).GetCachedSize(), target, stream);
  }

  // bytes short_term_order_placement = 2;
  if (_internal_has_short_term_order_placement()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_short_term_order_placement(), target);
  }

  // .dydxprotocol.clob.OrderRemoval order_removal = 3;
  if (_internal_has_order_removal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::order_removal(this),
        _Internal::order_removal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.OperationRaw)
  return target;
}

size_t OperationRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.OperationRaw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (operation_case()) {
    // .dydxprotocol.clob.ClobMatch match = 1;
    case kMatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.match_);
      break;
    }
    // bytes short_term_order_placement = 2;
    case kShortTermOrderPlacement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_short_term_order_placement());
      break;
    }
    // .dydxprotocol.clob.OrderRemoval order_removal = 3;
    case kOrderRemoval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.order_removal_);
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationRaw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationRaw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationRaw::GetClassData() const { return &_class_data_; }


void OperationRaw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationRaw*>(&to_msg);
  auto& from = static_cast<const OperationRaw&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.OperationRaw)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.operation_case()) {
    case kMatch: {
      _this->_internal_mutable_match()->::dydxprotocol::clob::ClobMatch::MergeFrom(
          from._internal_match());
      break;
    }
    case kShortTermOrderPlacement: {
      _this->_internal_set_short_term_order_placement(from._internal_short_term_order_placement());
      break;
    }
    case kOrderRemoval: {
      _this->_internal_mutable_order_removal()->::dydxprotocol::clob::OrderRemoval::MergeFrom(
          from._internal_order_removal());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationRaw::CopyFrom(const OperationRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.OperationRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationRaw::IsInitialized() const {
  return true;
}

void OperationRaw::InternalSwap(OperationRaw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.operation_, other->_impl_.operation_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationRaw::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgProposedOperations*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgProposedOperations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgProposedOperations >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgProposedOperationsResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgProposedOperationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgProposedOperationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgPlaceOrder*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgPlaceOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgPlaceOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgPlaceOrderResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgPlaceOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgPlaceOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgCancelOrder*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgCancelOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgCancelOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgCancelOrderResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgCancelOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgCancelOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::OperationRaw*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::OperationRaw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::OperationRaw >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
