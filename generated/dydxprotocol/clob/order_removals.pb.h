// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/order_removals.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2forder_5fremovals_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2forder_5fremovals_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "dydxprotocol/clob/order.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fclob_2forder_5fremovals_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fclob_2forder_5fremovals_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dydxprotocol_2fclob_2forder_5fremovals_2eproto;
namespace dydxprotocol {
namespace clob {
class OrderRemoval;
struct OrderRemovalDefaultTypeInternal;
extern OrderRemovalDefaultTypeInternal _OrderRemoval_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::dydxprotocol::clob::OrderRemoval* Arena::CreateMaybeMessage<::dydxprotocol::clob::OrderRemoval>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dydxprotocol {
namespace clob {

enum OrderRemoval_RemovalReason : int {
  OrderRemoval_RemovalReason_REMOVAL_REASON_UNSPECIFIED = 0,
  OrderRemoval_RemovalReason_REMOVAL_REASON_UNDERCOLLATERALIZED = 1,
  OrderRemoval_RemovalReason_REMOVAL_REASON_INVALID_REDUCE_ONLY = 2,
  OrderRemoval_RemovalReason_REMOVAL_REASON_POST_ONLY_WOULD_CROSS_MAKER_ORDER = 3,
  OrderRemoval_RemovalReason_REMOVAL_REASON_INVALID_SELF_TRADE = 4,
  OrderRemoval_RemovalReason_REMOVAL_REASON_CONDITIONAL_FOK_COULD_NOT_BE_FULLY_FILLED = 5,
  OrderRemoval_RemovalReason_REMOVAL_REASON_CONDITIONAL_IOC_WOULD_REST_ON_BOOK = 6,
  OrderRemoval_RemovalReason_REMOVAL_REASON_FULLY_FILLED = 7,
  OrderRemoval_RemovalReason_OrderRemoval_RemovalReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OrderRemoval_RemovalReason_OrderRemoval_RemovalReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OrderRemoval_RemovalReason_IsValid(int value);
constexpr OrderRemoval_RemovalReason OrderRemoval_RemovalReason_RemovalReason_MIN = OrderRemoval_RemovalReason_REMOVAL_REASON_UNSPECIFIED;
constexpr OrderRemoval_RemovalReason OrderRemoval_RemovalReason_RemovalReason_MAX = OrderRemoval_RemovalReason_REMOVAL_REASON_FULLY_FILLED;
constexpr int OrderRemoval_RemovalReason_RemovalReason_ARRAYSIZE = OrderRemoval_RemovalReason_RemovalReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderRemoval_RemovalReason_descriptor();
template<typename T>
inline const std::string& OrderRemoval_RemovalReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderRemoval_RemovalReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderRemoval_RemovalReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderRemoval_RemovalReason_descriptor(), enum_t_value);
}
inline bool OrderRemoval_RemovalReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderRemoval_RemovalReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderRemoval_RemovalReason>(
    OrderRemoval_RemovalReason_descriptor(), name, value);
}
// ===================================================================

class OrderRemoval final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.OrderRemoval) */ {
 public:
  inline OrderRemoval() : OrderRemoval(nullptr) {}
  ~OrderRemoval() override;
  explicit PROTOBUF_CONSTEXPR OrderRemoval(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderRemoval(const OrderRemoval& from);
  OrderRemoval(OrderRemoval&& from) noexcept
    : OrderRemoval() {
    *this = ::std::move(from);
  }

  inline OrderRemoval& operator=(const OrderRemoval& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderRemoval& operator=(OrderRemoval&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderRemoval& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderRemoval* internal_default_instance() {
    return reinterpret_cast<const OrderRemoval*>(
               &_OrderRemoval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrderRemoval& a, OrderRemoval& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderRemoval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderRemoval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderRemoval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderRemoval>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderRemoval& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderRemoval& from) {
    OrderRemoval::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderRemoval* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.OrderRemoval";
  }
  protected:
  explicit OrderRemoval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OrderRemoval_RemovalReason RemovalReason;
  static constexpr RemovalReason REMOVAL_REASON_UNSPECIFIED =
    OrderRemoval_RemovalReason_REMOVAL_REASON_UNSPECIFIED;
  static constexpr RemovalReason REMOVAL_REASON_UNDERCOLLATERALIZED =
    OrderRemoval_RemovalReason_REMOVAL_REASON_UNDERCOLLATERALIZED;
  static constexpr RemovalReason REMOVAL_REASON_INVALID_REDUCE_ONLY =
    OrderRemoval_RemovalReason_REMOVAL_REASON_INVALID_REDUCE_ONLY;
  static constexpr RemovalReason REMOVAL_REASON_POST_ONLY_WOULD_CROSS_MAKER_ORDER =
    OrderRemoval_RemovalReason_REMOVAL_REASON_POST_ONLY_WOULD_CROSS_MAKER_ORDER;
  static constexpr RemovalReason REMOVAL_REASON_INVALID_SELF_TRADE =
    OrderRemoval_RemovalReason_REMOVAL_REASON_INVALID_SELF_TRADE;
  static constexpr RemovalReason REMOVAL_REASON_CONDITIONAL_FOK_COULD_NOT_BE_FULLY_FILLED =
    OrderRemoval_RemovalReason_REMOVAL_REASON_CONDITIONAL_FOK_COULD_NOT_BE_FULLY_FILLED;
  static constexpr RemovalReason REMOVAL_REASON_CONDITIONAL_IOC_WOULD_REST_ON_BOOK =
    OrderRemoval_RemovalReason_REMOVAL_REASON_CONDITIONAL_IOC_WOULD_REST_ON_BOOK;
  static constexpr RemovalReason REMOVAL_REASON_FULLY_FILLED =
    OrderRemoval_RemovalReason_REMOVAL_REASON_FULLY_FILLED;
  static inline bool RemovalReason_IsValid(int value) {
    return OrderRemoval_RemovalReason_IsValid(value);
  }
  static constexpr RemovalReason RemovalReason_MIN =
    OrderRemoval_RemovalReason_RemovalReason_MIN;
  static constexpr RemovalReason RemovalReason_MAX =
    OrderRemoval_RemovalReason_RemovalReason_MAX;
  static constexpr int RemovalReason_ARRAYSIZE =
    OrderRemoval_RemovalReason_RemovalReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RemovalReason_descriptor() {
    return OrderRemoval_RemovalReason_descriptor();
  }
  template<typename T>
  static inline const std::string& RemovalReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RemovalReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RemovalReason_Name.");
    return OrderRemoval_RemovalReason_Name(enum_t_value);
  }
  static inline bool RemovalReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RemovalReason* value) {
    return OrderRemoval_RemovalReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kRemovalReasonFieldNumber = 2,
  };
  // .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
  bool has_order_id() const;
  private:
  bool _internal_has_order_id() const;
  public:
  void clear_order_id();
  const ::dydxprotocol::clob::OrderId& order_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::OrderId* release_order_id();
  ::dydxprotocol::clob::OrderId* mutable_order_id();
  void set_allocated_order_id(::dydxprotocol::clob::OrderId* order_id);
  private:
  const ::dydxprotocol::clob::OrderId& _internal_order_id() const;
  ::dydxprotocol::clob::OrderId* _internal_mutable_order_id();
  public:
  void unsafe_arena_set_allocated_order_id(
      ::dydxprotocol::clob::OrderId* order_id);
  ::dydxprotocol::clob::OrderId* unsafe_arena_release_order_id();

  // .dydxprotocol.clob.OrderRemoval.RemovalReason removal_reason = 2;
  void clear_removal_reason();
  ::dydxprotocol::clob::OrderRemoval_RemovalReason removal_reason() const;
  void set_removal_reason(::dydxprotocol::clob::OrderRemoval_RemovalReason value);
  private:
  ::dydxprotocol::clob::OrderRemoval_RemovalReason _internal_removal_reason() const;
  void _internal_set_removal_reason(::dydxprotocol::clob::OrderRemoval_RemovalReason value);
  public:

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.OrderRemoval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dydxprotocol::clob::OrderId* order_id_;
    int removal_reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2forder_5fremovals_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrderRemoval

// .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
inline bool OrderRemoval::_internal_has_order_id() const {
  return this != internal_default_instance() && _impl_.order_id_ != nullptr;
}
inline bool OrderRemoval::has_order_id() const {
  return _internal_has_order_id();
}
inline const ::dydxprotocol::clob::OrderId& OrderRemoval::_internal_order_id() const {
  const ::dydxprotocol::clob::OrderId* p = _impl_.order_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::OrderId&>(
      ::dydxprotocol::clob::_OrderId_default_instance_);
}
inline const ::dydxprotocol::clob::OrderId& OrderRemoval::order_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OrderRemoval.order_id)
  return _internal_order_id();
}
inline void OrderRemoval::unsafe_arena_set_allocated_order_id(
    ::dydxprotocol::clob::OrderId* order_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_id_);
  }
  _impl_.order_id_ = order_id;
  if (order_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.OrderRemoval.order_id)
}
inline ::dydxprotocol::clob::OrderId* OrderRemoval::release_order_id() {
  
  ::dydxprotocol::clob::OrderId* temp = _impl_.order_id_;
  _impl_.order_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::OrderId* OrderRemoval::unsafe_arena_release_order_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.OrderRemoval.order_id)
  
  ::dydxprotocol::clob::OrderId* temp = _impl_.order_id_;
  _impl_.order_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::OrderId* OrderRemoval::_internal_mutable_order_id() {
  
  if (_impl_.order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::OrderId>(GetArenaForAllocation());
    _impl_.order_id_ = p;
  }
  return _impl_.order_id_;
}
inline ::dydxprotocol::clob::OrderId* OrderRemoval::mutable_order_id() {
  ::dydxprotocol::clob::OrderId* _msg = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.OrderRemoval.order_id)
  return _msg;
}
inline void OrderRemoval::set_allocated_order_id(::dydxprotocol::clob::OrderId* order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_id_);
  }
  if (order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_id));
    if (message_arena != submessage_arena) {
      order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.order_id_ = order_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.OrderRemoval.order_id)
}

// .dydxprotocol.clob.OrderRemoval.RemovalReason removal_reason = 2;
inline void OrderRemoval::clear_removal_reason() {
  _impl_.removal_reason_ = 0;
}
inline ::dydxprotocol::clob::OrderRemoval_RemovalReason OrderRemoval::_internal_removal_reason() const {
  return static_cast< ::dydxprotocol::clob::OrderRemoval_RemovalReason >(_impl_.removal_reason_);
}
inline ::dydxprotocol::clob::OrderRemoval_RemovalReason OrderRemoval::removal_reason() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OrderRemoval.removal_reason)
  return _internal_removal_reason();
}
inline void OrderRemoval::_internal_set_removal_reason(::dydxprotocol::clob::OrderRemoval_RemovalReason value) {
  
  _impl_.removal_reason_ = value;
}
inline void OrderRemoval::set_removal_reason(::dydxprotocol::clob::OrderRemoval_RemovalReason value) {
  _internal_set_removal_reason(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.OrderRemoval.removal_reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace clob
}  // namespace dydxprotocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dydxprotocol::clob::OrderRemoval_RemovalReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dydxprotocol::clob::OrderRemoval_RemovalReason>() {
  return ::dydxprotocol::clob::OrderRemoval_RemovalReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2forder_5fremovals_2eproto
