// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2ftx_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2ftx_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "dydxprotocol/clob/order.pb.h"
#include "dydxprotocol/clob/order_removals.pb.h"
#include "dydxprotocol/clob/matches.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fclob_2ftx_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fclob_2ftx_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dydxprotocol_2fclob_2ftx_2eproto;
namespace dydxprotocol {
namespace clob {
class MsgCancelOrder;
struct MsgCancelOrderDefaultTypeInternal;
extern MsgCancelOrderDefaultTypeInternal _MsgCancelOrder_default_instance_;
class MsgCancelOrderResponse;
struct MsgCancelOrderResponseDefaultTypeInternal;
extern MsgCancelOrderResponseDefaultTypeInternal _MsgCancelOrderResponse_default_instance_;
class MsgPlaceOrder;
struct MsgPlaceOrderDefaultTypeInternal;
extern MsgPlaceOrderDefaultTypeInternal _MsgPlaceOrder_default_instance_;
class MsgPlaceOrderResponse;
struct MsgPlaceOrderResponseDefaultTypeInternal;
extern MsgPlaceOrderResponseDefaultTypeInternal _MsgPlaceOrderResponse_default_instance_;
class MsgProposedOperations;
struct MsgProposedOperationsDefaultTypeInternal;
extern MsgProposedOperationsDefaultTypeInternal _MsgProposedOperations_default_instance_;
class MsgProposedOperationsResponse;
struct MsgProposedOperationsResponseDefaultTypeInternal;
extern MsgProposedOperationsResponseDefaultTypeInternal _MsgProposedOperationsResponse_default_instance_;
class OperationRaw;
struct OperationRawDefaultTypeInternal;
extern OperationRawDefaultTypeInternal _OperationRaw_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::dydxprotocol::clob::MsgCancelOrder* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgCancelOrder>(Arena*);
template<> ::dydxprotocol::clob::MsgCancelOrderResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgCancelOrderResponse>(Arena*);
template<> ::dydxprotocol::clob::MsgPlaceOrder* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgPlaceOrder>(Arena*);
template<> ::dydxprotocol::clob::MsgPlaceOrderResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgPlaceOrderResponse>(Arena*);
template<> ::dydxprotocol::clob::MsgProposedOperations* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgProposedOperations>(Arena*);
template<> ::dydxprotocol::clob::MsgProposedOperationsResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgProposedOperationsResponse>(Arena*);
template<> ::dydxprotocol::clob::OperationRaw* Arena::CreateMaybeMessage<::dydxprotocol::clob::OperationRaw>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dydxprotocol {
namespace clob {

// ===================================================================

class MsgProposedOperations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgProposedOperations) */ {
 public:
  inline MsgProposedOperations() : MsgProposedOperations(nullptr) {}
  ~MsgProposedOperations() override;
  explicit PROTOBUF_CONSTEXPR MsgProposedOperations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgProposedOperations(const MsgProposedOperations& from);
  MsgProposedOperations(MsgProposedOperations&& from) noexcept
    : MsgProposedOperations() {
    *this = ::std::move(from);
  }

  inline MsgProposedOperations& operator=(const MsgProposedOperations& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgProposedOperations& operator=(MsgProposedOperations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgProposedOperations& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgProposedOperations* internal_default_instance() {
    return reinterpret_cast<const MsgProposedOperations*>(
               &_MsgProposedOperations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgProposedOperations& a, MsgProposedOperations& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgProposedOperations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgProposedOperations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgProposedOperations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgProposedOperations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgProposedOperations& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgProposedOperations& from) {
    MsgProposedOperations::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgProposedOperations* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.MsgProposedOperations";
  }
  protected:
  explicit MsgProposedOperations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsQueueFieldNumber = 1,
  };
  // repeated .dydxprotocol.clob.OperationRaw operations_queue = 1 [(.gogoproto.nullable) = false];
  int operations_queue_size() const;
  private:
  int _internal_operations_queue_size() const;
  public:
  void clear_operations_queue();
  ::dydxprotocol::clob::OperationRaw* mutable_operations_queue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OperationRaw >*
      mutable_operations_queue();
  private:
  const ::dydxprotocol::clob::OperationRaw& _internal_operations_queue(int index) const;
  ::dydxprotocol::clob::OperationRaw* _internal_add_operations_queue();
  public:
  const ::dydxprotocol::clob::OperationRaw& operations_queue(int index) const;
  ::dydxprotocol::clob::OperationRaw* add_operations_queue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OperationRaw >&
      operations_queue() const;

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgProposedOperations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OperationRaw > operations_queue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgProposedOperationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgProposedOperationsResponse) */ {
 public:
  inline MsgProposedOperationsResponse() : MsgProposedOperationsResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MsgProposedOperationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgProposedOperationsResponse(const MsgProposedOperationsResponse& from);
  MsgProposedOperationsResponse(MsgProposedOperationsResponse&& from) noexcept
    : MsgProposedOperationsResponse() {
    *this = ::std::move(from);
  }

  inline MsgProposedOperationsResponse& operator=(const MsgProposedOperationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgProposedOperationsResponse& operator=(MsgProposedOperationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgProposedOperationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgProposedOperationsResponse* internal_default_instance() {
    return reinterpret_cast<const MsgProposedOperationsResponse*>(
               &_MsgProposedOperationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgProposedOperationsResponse& a, MsgProposedOperationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgProposedOperationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgProposedOperationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgProposedOperationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgProposedOperationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgProposedOperationsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgProposedOperationsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.MsgProposedOperationsResponse";
  }
  protected:
  explicit MsgProposedOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgProposedOperationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgPlaceOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgPlaceOrder) */ {
 public:
  inline MsgPlaceOrder() : MsgPlaceOrder(nullptr) {}
  ~MsgPlaceOrder() override;
  explicit PROTOBUF_CONSTEXPR MsgPlaceOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgPlaceOrder(const MsgPlaceOrder& from);
  MsgPlaceOrder(MsgPlaceOrder&& from) noexcept
    : MsgPlaceOrder() {
    *this = ::std::move(from);
  }

  inline MsgPlaceOrder& operator=(const MsgPlaceOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPlaceOrder& operator=(MsgPlaceOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgPlaceOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgPlaceOrder* internal_default_instance() {
    return reinterpret_cast<const MsgPlaceOrder*>(
               &_MsgPlaceOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgPlaceOrder& a, MsgPlaceOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPlaceOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPlaceOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgPlaceOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgPlaceOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgPlaceOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgPlaceOrder& from) {
    MsgPlaceOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPlaceOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.MsgPlaceOrder";
  }
  protected:
  explicit MsgPlaceOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::dydxprotocol::clob::Order& order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::Order* release_order();
  ::dydxprotocol::clob::Order* mutable_order();
  void set_allocated_order(::dydxprotocol::clob::Order* order);
  private:
  const ::dydxprotocol::clob::Order& _internal_order() const;
  ::dydxprotocol::clob::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::dydxprotocol::clob::Order* order);
  ::dydxprotocol::clob::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgPlaceOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dydxprotocol::clob::Order* order_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgPlaceOrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgPlaceOrderResponse) */ {
 public:
  inline MsgPlaceOrderResponse() : MsgPlaceOrderResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MsgPlaceOrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgPlaceOrderResponse(const MsgPlaceOrderResponse& from);
  MsgPlaceOrderResponse(MsgPlaceOrderResponse&& from) noexcept
    : MsgPlaceOrderResponse() {
    *this = ::std::move(from);
  }

  inline MsgPlaceOrderResponse& operator=(const MsgPlaceOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPlaceOrderResponse& operator=(MsgPlaceOrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgPlaceOrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgPlaceOrderResponse* internal_default_instance() {
    return reinterpret_cast<const MsgPlaceOrderResponse*>(
               &_MsgPlaceOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgPlaceOrderResponse& a, MsgPlaceOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPlaceOrderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPlaceOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgPlaceOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgPlaceOrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgPlaceOrderResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgPlaceOrderResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.MsgPlaceOrderResponse";
  }
  protected:
  explicit MsgPlaceOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgPlaceOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgCancelOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgCancelOrder) */ {
 public:
  inline MsgCancelOrder() : MsgCancelOrder(nullptr) {}
  ~MsgCancelOrder() override;
  explicit PROTOBUF_CONSTEXPR MsgCancelOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCancelOrder(const MsgCancelOrder& from);
  MsgCancelOrder(MsgCancelOrder&& from) noexcept
    : MsgCancelOrder() {
    *this = ::std::move(from);
  }

  inline MsgCancelOrder& operator=(const MsgCancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCancelOrder& operator=(MsgCancelOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCancelOrder& default_instance() {
    return *internal_default_instance();
  }
  enum GoodTilOneofCase {
    kGoodTilBlock = 2,
    kGoodTilBlockTime = 3,
    GOOD_TIL_ONEOF_NOT_SET = 0,
  };

  static inline const MsgCancelOrder* internal_default_instance() {
    return reinterpret_cast<const MsgCancelOrder*>(
               &_MsgCancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgCancelOrder& a, MsgCancelOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCancelOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCancelOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCancelOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCancelOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCancelOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCancelOrder& from) {
    MsgCancelOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCancelOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.MsgCancelOrder";
  }
  protected:
  explicit MsgCancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kGoodTilBlockFieldNumber = 2,
    kGoodTilBlockTimeFieldNumber = 3,
  };
  // .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
  bool has_order_id() const;
  private:
  bool _internal_has_order_id() const;
  public:
  void clear_order_id();
  const ::dydxprotocol::clob::OrderId& order_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::OrderId* release_order_id();
  ::dydxprotocol::clob::OrderId* mutable_order_id();
  void set_allocated_order_id(::dydxprotocol::clob::OrderId* order_id);
  private:
  const ::dydxprotocol::clob::OrderId& _internal_order_id() const;
  ::dydxprotocol::clob::OrderId* _internal_mutable_order_id();
  public:
  void unsafe_arena_set_allocated_order_id(
      ::dydxprotocol::clob::OrderId* order_id);
  ::dydxprotocol::clob::OrderId* unsafe_arena_release_order_id();

  // uint32 good_til_block = 2;
  bool has_good_til_block() const;
  private:
  bool _internal_has_good_til_block() const;
  public:
  void clear_good_til_block();
  uint32_t good_til_block() const;
  void set_good_til_block(uint32_t value);
  private:
  uint32_t _internal_good_til_block() const;
  void _internal_set_good_til_block(uint32_t value);
  public:

  // fixed32 good_til_block_time = 3;
  bool has_good_til_block_time() const;
  private:
  bool _internal_has_good_til_block_time() const;
  public:
  void clear_good_til_block_time();
  uint32_t good_til_block_time() const;
  void set_good_til_block_time(uint32_t value);
  private:
  uint32_t _internal_good_til_block_time() const;
  void _internal_set_good_til_block_time(uint32_t value);
  public:

  void clear_good_til_oneof();
  GoodTilOneofCase good_til_oneof_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgCancelOrder)
 private:
  class _Internal;
  void set_has_good_til_block();
  void set_has_good_til_block_time();

  inline bool has_good_til_oneof() const;
  inline void clear_has_good_til_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dydxprotocol::clob::OrderId* order_id_;
    union GoodTilOneofUnion {
      constexpr GoodTilOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t good_til_block_;
      uint32_t good_til_block_time_;
    } good_til_oneof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgCancelOrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgCancelOrderResponse) */ {
 public:
  inline MsgCancelOrderResponse() : MsgCancelOrderResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MsgCancelOrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCancelOrderResponse(const MsgCancelOrderResponse& from);
  MsgCancelOrderResponse(MsgCancelOrderResponse&& from) noexcept
    : MsgCancelOrderResponse() {
    *this = ::std::move(from);
  }

  inline MsgCancelOrderResponse& operator=(const MsgCancelOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCancelOrderResponse& operator=(MsgCancelOrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCancelOrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCancelOrderResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCancelOrderResponse*>(
               &_MsgCancelOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgCancelOrderResponse& a, MsgCancelOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCancelOrderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCancelOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCancelOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCancelOrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgCancelOrderResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgCancelOrderResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.MsgCancelOrderResponse";
  }
  protected:
  explicit MsgCancelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgCancelOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};
// -------------------------------------------------------------------

class OperationRaw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.OperationRaw) */ {
 public:
  inline OperationRaw() : OperationRaw(nullptr) {}
  ~OperationRaw() override;
  explicit PROTOBUF_CONSTEXPR OperationRaw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationRaw(const OperationRaw& from);
  OperationRaw(OperationRaw&& from) noexcept
    : OperationRaw() {
    *this = ::std::move(from);
  }

  inline OperationRaw& operator=(const OperationRaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationRaw& operator=(OperationRaw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationRaw& default_instance() {
    return *internal_default_instance();
  }
  enum OperationCase {
    kMatch = 1,
    kShortTermOrderPlacement = 2,
    kOrderRemoval = 3,
    OPERATION_NOT_SET = 0,
  };

  static inline const OperationRaw* internal_default_instance() {
    return reinterpret_cast<const OperationRaw*>(
               &_OperationRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OperationRaw& a, OperationRaw& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationRaw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationRaw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationRaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationRaw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationRaw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationRaw& from) {
    OperationRaw::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationRaw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.OperationRaw";
  }
  protected:
  explicit OperationRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 1,
    kShortTermOrderPlacementFieldNumber = 2,
    kOrderRemovalFieldNumber = 3,
  };
  // .dydxprotocol.clob.ClobMatch match = 1;
  bool has_match() const;
  private:
  bool _internal_has_match() const;
  public:
  void clear_match();
  const ::dydxprotocol::clob::ClobMatch& match() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::ClobMatch* release_match();
  ::dydxprotocol::clob::ClobMatch* mutable_match();
  void set_allocated_match(::dydxprotocol::clob::ClobMatch* match);
  private:
  const ::dydxprotocol::clob::ClobMatch& _internal_match() const;
  ::dydxprotocol::clob::ClobMatch* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::dydxprotocol::clob::ClobMatch* match);
  ::dydxprotocol::clob::ClobMatch* unsafe_arena_release_match();

  // bytes short_term_order_placement = 2;
  bool has_short_term_order_placement() const;
  private:
  bool _internal_has_short_term_order_placement() const;
  public:
  void clear_short_term_order_placement();
  const std::string& short_term_order_placement() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_short_term_order_placement(ArgT0&& arg0, ArgT... args);
  std::string* mutable_short_term_order_placement();
  PROTOBUF_NODISCARD std::string* release_short_term_order_placement();
  void set_allocated_short_term_order_placement(std::string* short_term_order_placement);
  private:
  const std::string& _internal_short_term_order_placement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_term_order_placement(const std::string& value);
  std::string* _internal_mutable_short_term_order_placement();
  public:

  // .dydxprotocol.clob.OrderRemoval order_removal = 3;
  bool has_order_removal() const;
  private:
  bool _internal_has_order_removal() const;
  public:
  void clear_order_removal();
  const ::dydxprotocol::clob::OrderRemoval& order_removal() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::OrderRemoval* release_order_removal();
  ::dydxprotocol::clob::OrderRemoval* mutable_order_removal();
  void set_allocated_order_removal(::dydxprotocol::clob::OrderRemoval* order_removal);
  private:
  const ::dydxprotocol::clob::OrderRemoval& _internal_order_removal() const;
  ::dydxprotocol::clob::OrderRemoval* _internal_mutable_order_removal();
  public:
  void unsafe_arena_set_allocated_order_removal(
      ::dydxprotocol::clob::OrderRemoval* order_removal);
  ::dydxprotocol::clob::OrderRemoval* unsafe_arena_release_order_removal();

  void clear_operation();
  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.OperationRaw)
 private:
  class _Internal;
  void set_has_match();
  void set_has_short_term_order_placement();
  void set_has_order_removal();

  inline bool has_operation() const;
  inline void clear_has_operation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OperationUnion {
      constexpr OperationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::dydxprotocol::clob::ClobMatch* match_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_term_order_placement_;
      ::dydxprotocol::clob::OrderRemoval* order_removal_;
    } operation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgProposedOperations

// repeated .dydxprotocol.clob.OperationRaw operations_queue = 1 [(.gogoproto.nullable) = false];
inline int MsgProposedOperations::_internal_operations_queue_size() const {
  return _impl_.operations_queue_.size();
}
inline int MsgProposedOperations::operations_queue_size() const {
  return _internal_operations_queue_size();
}
inline void MsgProposedOperations::clear_operations_queue() {
  _impl_.operations_queue_.Clear();
}
inline ::dydxprotocol::clob::OperationRaw* MsgProposedOperations::mutable_operations_queue(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgProposedOperations.operations_queue)
  return _impl_.operations_queue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OperationRaw >*
MsgProposedOperations::mutable_operations_queue() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.MsgProposedOperations.operations_queue)
  return &_impl_.operations_queue_;
}
inline const ::dydxprotocol::clob::OperationRaw& MsgProposedOperations::_internal_operations_queue(int index) const {
  return _impl_.operations_queue_.Get(index);
}
inline const ::dydxprotocol::clob::OperationRaw& MsgProposedOperations::operations_queue(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgProposedOperations.operations_queue)
  return _internal_operations_queue(index);
}
inline ::dydxprotocol::clob::OperationRaw* MsgProposedOperations::_internal_add_operations_queue() {
  return _impl_.operations_queue_.Add();
}
inline ::dydxprotocol::clob::OperationRaw* MsgProposedOperations::add_operations_queue() {
  ::dydxprotocol::clob::OperationRaw* _add = _internal_add_operations_queue();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.MsgProposedOperations.operations_queue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OperationRaw >&
MsgProposedOperations::operations_queue() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.MsgProposedOperations.operations_queue)
  return _impl_.operations_queue_;
}

// -------------------------------------------------------------------

// MsgProposedOperationsResponse

// -------------------------------------------------------------------

// MsgPlaceOrder

// .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
inline bool MsgPlaceOrder::_internal_has_order() const {
  return this != internal_default_instance() && _impl_.order_ != nullptr;
}
inline bool MsgPlaceOrder::has_order() const {
  return _internal_has_order();
}
inline const ::dydxprotocol::clob::Order& MsgPlaceOrder::_internal_order() const {
  const ::dydxprotocol::clob::Order* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::Order&>(
      ::dydxprotocol::clob::_Order_default_instance_);
}
inline const ::dydxprotocol::clob::Order& MsgPlaceOrder::order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgPlaceOrder.order)
  return _internal_order();
}
inline void MsgPlaceOrder::unsafe_arena_set_allocated_order(
    ::dydxprotocol::clob::Order* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MsgPlaceOrder.order)
}
inline ::dydxprotocol::clob::Order* MsgPlaceOrder::release_order() {
  
  ::dydxprotocol::clob::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::Order* MsgPlaceOrder::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgPlaceOrder.order)
  
  ::dydxprotocol::clob::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::Order* MsgPlaceOrder::_internal_mutable_order() {
  
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::Order>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::dydxprotocol::clob::Order* MsgPlaceOrder::mutable_order() {
  ::dydxprotocol::clob::Order* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgPlaceOrder.order)
  return _msg;
}
inline void MsgPlaceOrder::set_allocated_order(::dydxprotocol::clob::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order));
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgPlaceOrder.order)
}

// -------------------------------------------------------------------

// MsgPlaceOrderResponse

// -------------------------------------------------------------------

// MsgCancelOrder

// .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
inline bool MsgCancelOrder::_internal_has_order_id() const {
  return this != internal_default_instance() && _impl_.order_id_ != nullptr;
}
inline bool MsgCancelOrder::has_order_id() const {
  return _internal_has_order_id();
}
inline const ::dydxprotocol::clob::OrderId& MsgCancelOrder::_internal_order_id() const {
  const ::dydxprotocol::clob::OrderId* p = _impl_.order_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::OrderId&>(
      ::dydxprotocol::clob::_OrderId_default_instance_);
}
inline const ::dydxprotocol::clob::OrderId& MsgCancelOrder::order_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgCancelOrder.order_id)
  return _internal_order_id();
}
inline void MsgCancelOrder::unsafe_arena_set_allocated_order_id(
    ::dydxprotocol::clob::OrderId* order_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_id_);
  }
  _impl_.order_id_ = order_id;
  if (order_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MsgCancelOrder.order_id)
}
inline ::dydxprotocol::clob::OrderId* MsgCancelOrder::release_order_id() {
  
  ::dydxprotocol::clob::OrderId* temp = _impl_.order_id_;
  _impl_.order_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::OrderId* MsgCancelOrder::unsafe_arena_release_order_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgCancelOrder.order_id)
  
  ::dydxprotocol::clob::OrderId* temp = _impl_.order_id_;
  _impl_.order_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::OrderId* MsgCancelOrder::_internal_mutable_order_id() {
  
  if (_impl_.order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::OrderId>(GetArenaForAllocation());
    _impl_.order_id_ = p;
  }
  return _impl_.order_id_;
}
inline ::dydxprotocol::clob::OrderId* MsgCancelOrder::mutable_order_id() {
  ::dydxprotocol::clob::OrderId* _msg = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgCancelOrder.order_id)
  return _msg;
}
inline void MsgCancelOrder::set_allocated_order_id(::dydxprotocol::clob::OrderId* order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_id_);
  }
  if (order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_id));
    if (message_arena != submessage_arena) {
      order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.order_id_ = order_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgCancelOrder.order_id)
}

// uint32 good_til_block = 2;
inline bool MsgCancelOrder::_internal_has_good_til_block() const {
  return good_til_oneof_case() == kGoodTilBlock;
}
inline bool MsgCancelOrder::has_good_til_block() const {
  return _internal_has_good_til_block();
}
inline void MsgCancelOrder::set_has_good_til_block() {
  _impl_._oneof_case_[0] = kGoodTilBlock;
}
inline void MsgCancelOrder::clear_good_til_block() {
  if (_internal_has_good_til_block()) {
    _impl_.good_til_oneof_.good_til_block_ = 0u;
    clear_has_good_til_oneof();
  }
}
inline uint32_t MsgCancelOrder::_internal_good_til_block() const {
  if (_internal_has_good_til_block()) {
    return _impl_.good_til_oneof_.good_til_block_;
  }
  return 0u;
}
inline void MsgCancelOrder::_internal_set_good_til_block(uint32_t value) {
  if (!_internal_has_good_til_block()) {
    clear_good_til_oneof();
    set_has_good_til_block();
  }
  _impl_.good_til_oneof_.good_til_block_ = value;
}
inline uint32_t MsgCancelOrder::good_til_block() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgCancelOrder.good_til_block)
  return _internal_good_til_block();
}
inline void MsgCancelOrder::set_good_til_block(uint32_t value) {
  _internal_set_good_til_block(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MsgCancelOrder.good_til_block)
}

// fixed32 good_til_block_time = 3;
inline bool MsgCancelOrder::_internal_has_good_til_block_time() const {
  return good_til_oneof_case() == kGoodTilBlockTime;
}
inline bool MsgCancelOrder::has_good_til_block_time() const {
  return _internal_has_good_til_block_time();
}
inline void MsgCancelOrder::set_has_good_til_block_time() {
  _impl_._oneof_case_[0] = kGoodTilBlockTime;
}
inline void MsgCancelOrder::clear_good_til_block_time() {
  if (_internal_has_good_til_block_time()) {
    _impl_.good_til_oneof_.good_til_block_time_ = 0u;
    clear_has_good_til_oneof();
  }
}
inline uint32_t MsgCancelOrder::_internal_good_til_block_time() const {
  if (_internal_has_good_til_block_time()) {
    return _impl_.good_til_oneof_.good_til_block_time_;
  }
  return 0u;
}
inline void MsgCancelOrder::_internal_set_good_til_block_time(uint32_t value) {
  if (!_internal_has_good_til_block_time()) {
    clear_good_til_oneof();
    set_has_good_til_block_time();
  }
  _impl_.good_til_oneof_.good_til_block_time_ = value;
}
inline uint32_t MsgCancelOrder::good_til_block_time() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgCancelOrder.good_til_block_time)
  return _internal_good_til_block_time();
}
inline void MsgCancelOrder::set_good_til_block_time(uint32_t value) {
  _internal_set_good_til_block_time(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MsgCancelOrder.good_til_block_time)
}

inline bool MsgCancelOrder::has_good_til_oneof() const {
  return good_til_oneof_case() != GOOD_TIL_ONEOF_NOT_SET;
}
inline void MsgCancelOrder::clear_has_good_til_oneof() {
  _impl_._oneof_case_[0] = GOOD_TIL_ONEOF_NOT_SET;
}
inline MsgCancelOrder::GoodTilOneofCase MsgCancelOrder::good_til_oneof_case() const {
  return MsgCancelOrder::GoodTilOneofCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MsgCancelOrderResponse

// -------------------------------------------------------------------

// OperationRaw

// .dydxprotocol.clob.ClobMatch match = 1;
inline bool OperationRaw::_internal_has_match() const {
  return operation_case() == kMatch;
}
inline bool OperationRaw::has_match() const {
  return _internal_has_match();
}
inline void OperationRaw::set_has_match() {
  _impl_._oneof_case_[0] = kMatch;
}
inline ::dydxprotocol::clob::ClobMatch* OperationRaw::release_match() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.OperationRaw.match)
  if (_internal_has_match()) {
    clear_has_operation();
    ::dydxprotocol::clob::ClobMatch* temp = _impl_.operation_.match_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operation_.match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::ClobMatch& OperationRaw::_internal_match() const {
  return _internal_has_match()
      ? *_impl_.operation_.match_
      : reinterpret_cast< ::dydxprotocol::clob::ClobMatch&>(::dydxprotocol::clob::_ClobMatch_default_instance_);
}
inline const ::dydxprotocol::clob::ClobMatch& OperationRaw::match() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OperationRaw.match)
  return _internal_match();
}
inline ::dydxprotocol::clob::ClobMatch* OperationRaw::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.OperationRaw.match)
  if (_internal_has_match()) {
    clear_has_operation();
    ::dydxprotocol::clob::ClobMatch* temp = _impl_.operation_.match_;
    _impl_.operation_.match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationRaw::unsafe_arena_set_allocated_match(::dydxprotocol::clob::ClobMatch* match) {
  clear_operation();
  if (match) {
    set_has_match();
    _impl_.operation_.match_ = match;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.OperationRaw.match)
}
inline ::dydxprotocol::clob::ClobMatch* OperationRaw::_internal_mutable_match() {
  if (!_internal_has_match()) {
    clear_operation();
    set_has_match();
    _impl_.operation_.match_ = CreateMaybeMessage< ::dydxprotocol::clob::ClobMatch >(GetArenaForAllocation());
  }
  return _impl_.operation_.match_;
}
inline ::dydxprotocol::clob::ClobMatch* OperationRaw::mutable_match() {
  ::dydxprotocol::clob::ClobMatch* _msg = _internal_mutable_match();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.OperationRaw.match)
  return _msg;
}

// bytes short_term_order_placement = 2;
inline bool OperationRaw::_internal_has_short_term_order_placement() const {
  return operation_case() == kShortTermOrderPlacement;
}
inline bool OperationRaw::has_short_term_order_placement() const {
  return _internal_has_short_term_order_placement();
}
inline void OperationRaw::set_has_short_term_order_placement() {
  _impl_._oneof_case_[0] = kShortTermOrderPlacement;
}
inline void OperationRaw::clear_short_term_order_placement() {
  if (_internal_has_short_term_order_placement()) {
    _impl_.operation_.short_term_order_placement_.Destroy();
    clear_has_operation();
  }
}
inline const std::string& OperationRaw::short_term_order_placement() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OperationRaw.short_term_order_placement)
  return _internal_short_term_order_placement();
}
template <typename ArgT0, typename... ArgT>
inline void OperationRaw::set_short_term_order_placement(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_short_term_order_placement()) {
    clear_operation();
    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_.InitDefault();
  }
  _impl_.operation_.short_term_order_placement_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.OperationRaw.short_term_order_placement)
}
inline std::string* OperationRaw::mutable_short_term_order_placement() {
  std::string* _s = _internal_mutable_short_term_order_placement();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.OperationRaw.short_term_order_placement)
  return _s;
}
inline const std::string& OperationRaw::_internal_short_term_order_placement() const {
  if (_internal_has_short_term_order_placement()) {
    return _impl_.operation_.short_term_order_placement_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void OperationRaw::_internal_set_short_term_order_placement(const std::string& value) {
  if (!_internal_has_short_term_order_placement()) {
    clear_operation();
    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_.InitDefault();
  }
  _impl_.operation_.short_term_order_placement_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationRaw::_internal_mutable_short_term_order_placement() {
  if (!_internal_has_short_term_order_placement()) {
    clear_operation();
    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_.InitDefault();
  }
  return _impl_.operation_.short_term_order_placement_.Mutable(      GetArenaForAllocation());
}
inline std::string* OperationRaw::release_short_term_order_placement() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.OperationRaw.short_term_order_placement)
  if (_internal_has_short_term_order_placement()) {
    clear_has_operation();
    return _impl_.operation_.short_term_order_placement_.Release();
  } else {
    return nullptr;
  }
}
inline void OperationRaw::set_allocated_short_term_order_placement(std::string* short_term_order_placement) {
  if (has_operation()) {
    clear_operation();
  }
  if (short_term_order_placement != nullptr) {
    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_.InitAllocated(short_term_order_placement, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.OperationRaw.short_term_order_placement)
}

// .dydxprotocol.clob.OrderRemoval order_removal = 3;
inline bool OperationRaw::_internal_has_order_removal() const {
  return operation_case() == kOrderRemoval;
}
inline bool OperationRaw::has_order_removal() const {
  return _internal_has_order_removal();
}
inline void OperationRaw::set_has_order_removal() {
  _impl_._oneof_case_[0] = kOrderRemoval;
}
inline ::dydxprotocol::clob::OrderRemoval* OperationRaw::release_order_removal() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.OperationRaw.order_removal)
  if (_internal_has_order_removal()) {
    clear_has_operation();
    ::dydxprotocol::clob::OrderRemoval* temp = _impl_.operation_.order_removal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operation_.order_removal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::OrderRemoval& OperationRaw::_internal_order_removal() const {
  return _internal_has_order_removal()
      ? *_impl_.operation_.order_removal_
      : reinterpret_cast< ::dydxprotocol::clob::OrderRemoval&>(::dydxprotocol::clob::_OrderRemoval_default_instance_);
}
inline const ::dydxprotocol::clob::OrderRemoval& OperationRaw::order_removal() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OperationRaw.order_removal)
  return _internal_order_removal();
}
inline ::dydxprotocol::clob::OrderRemoval* OperationRaw::unsafe_arena_release_order_removal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.OperationRaw.order_removal)
  if (_internal_has_order_removal()) {
    clear_has_operation();
    ::dydxprotocol::clob::OrderRemoval* temp = _impl_.operation_.order_removal_;
    _impl_.operation_.order_removal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationRaw::unsafe_arena_set_allocated_order_removal(::dydxprotocol::clob::OrderRemoval* order_removal) {
  clear_operation();
  if (order_removal) {
    set_has_order_removal();
    _impl_.operation_.order_removal_ = order_removal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.OperationRaw.order_removal)
}
inline ::dydxprotocol::clob::OrderRemoval* OperationRaw::_internal_mutable_order_removal() {
  if (!_internal_has_order_removal()) {
    clear_operation();
    set_has_order_removal();
    _impl_.operation_.order_removal_ = CreateMaybeMessage< ::dydxprotocol::clob::OrderRemoval >(GetArenaForAllocation());
  }
  return _impl_.operation_.order_removal_;
}
inline ::dydxprotocol::clob::OrderRemoval* OperationRaw::mutable_order_removal() {
  ::dydxprotocol::clob::OrderRemoval* _msg = _internal_mutable_order_removal();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.OperationRaw.order_removal)
  return _msg;
}

inline bool OperationRaw::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void OperationRaw::clear_has_operation() {
  _impl_._oneof_case_[0] = OPERATION_NOT_SET;
}
inline OperationRaw::OperationCase OperationRaw::operation_case() const {
  return OperationRaw::OperationCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace clob
}  // namespace dydxprotocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2ftx_2eproto
