// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/matches.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fmatches_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fmatches_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "dydxprotocol/subaccounts/subaccount.pb.h"
#include "dydxprotocol/clob/order.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fclob_2fmatches_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fclob_2fmatches_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto;
namespace dydxprotocol {
namespace clob {
class ClobMatch;
struct ClobMatchDefaultTypeInternal;
extern ClobMatchDefaultTypeInternal _ClobMatch_default_instance_;
class MakerFill;
struct MakerFillDefaultTypeInternal;
extern MakerFillDefaultTypeInternal _MakerFill_default_instance_;
class MatchOrders;
struct MatchOrdersDefaultTypeInternal;
extern MatchOrdersDefaultTypeInternal _MatchOrders_default_instance_;
class MatchPerpetualDeleveraging;
struct MatchPerpetualDeleveragingDefaultTypeInternal;
extern MatchPerpetualDeleveragingDefaultTypeInternal _MatchPerpetualDeleveraging_default_instance_;
class MatchPerpetualDeleveraging_Fill;
struct MatchPerpetualDeleveraging_FillDefaultTypeInternal;
extern MatchPerpetualDeleveraging_FillDefaultTypeInternal _MatchPerpetualDeleveraging_Fill_default_instance_;
class MatchPerpetualLiquidation;
struct MatchPerpetualLiquidationDefaultTypeInternal;
extern MatchPerpetualLiquidationDefaultTypeInternal _MatchPerpetualLiquidation_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::dydxprotocol::clob::ClobMatch* Arena::CreateMaybeMessage<::dydxprotocol::clob::ClobMatch>(Arena*);
template<> ::dydxprotocol::clob::MakerFill* Arena::CreateMaybeMessage<::dydxprotocol::clob::MakerFill>(Arena*);
template<> ::dydxprotocol::clob::MatchOrders* Arena::CreateMaybeMessage<::dydxprotocol::clob::MatchOrders>(Arena*);
template<> ::dydxprotocol::clob::MatchPerpetualDeleveraging* Arena::CreateMaybeMessage<::dydxprotocol::clob::MatchPerpetualDeleveraging>(Arena*);
template<> ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill* Arena::CreateMaybeMessage<::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill>(Arena*);
template<> ::dydxprotocol::clob::MatchPerpetualLiquidation* Arena::CreateMaybeMessage<::dydxprotocol::clob::MatchPerpetualLiquidation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dydxprotocol {
namespace clob {

// ===================================================================

class ClobMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.ClobMatch) */ {
 public:
  inline ClobMatch() : ClobMatch(nullptr) {}
  ~ClobMatch() override;
  explicit PROTOBUF_CONSTEXPR ClobMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClobMatch(const ClobMatch& from);
  ClobMatch(ClobMatch&& from) noexcept
    : ClobMatch() {
    *this = ::std::move(from);
  }

  inline ClobMatch& operator=(const ClobMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClobMatch& operator=(ClobMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClobMatch& default_instance() {
    return *internal_default_instance();
  }
  enum MatchCase {
    kMatchOrders = 1,
    kMatchPerpetualLiquidation = 2,
    kMatchPerpetualDeleveraging = 3,
    MATCH_NOT_SET = 0,
  };

  static inline const ClobMatch* internal_default_instance() {
    return reinterpret_cast<const ClobMatch*>(
               &_ClobMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClobMatch& a, ClobMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(ClobMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClobMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClobMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClobMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClobMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClobMatch& from) {
    ClobMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClobMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.ClobMatch";
  }
  protected:
  explicit ClobMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchOrdersFieldNumber = 1,
    kMatchPerpetualLiquidationFieldNumber = 2,
    kMatchPerpetualDeleveragingFieldNumber = 3,
  };
  // .dydxprotocol.clob.MatchOrders match_orders = 1;
  bool has_match_orders() const;
  private:
  bool _internal_has_match_orders() const;
  public:
  void clear_match_orders();
  const ::dydxprotocol::clob::MatchOrders& match_orders() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::MatchOrders* release_match_orders();
  ::dydxprotocol::clob::MatchOrders* mutable_match_orders();
  void set_allocated_match_orders(::dydxprotocol::clob::MatchOrders* match_orders);
  private:
  const ::dydxprotocol::clob::MatchOrders& _internal_match_orders() const;
  ::dydxprotocol::clob::MatchOrders* _internal_mutable_match_orders();
  public:
  void unsafe_arena_set_allocated_match_orders(
      ::dydxprotocol::clob::MatchOrders* match_orders);
  ::dydxprotocol::clob::MatchOrders* unsafe_arena_release_match_orders();

  // .dydxprotocol.clob.MatchPerpetualLiquidation match_perpetual_liquidation = 2;
  bool has_match_perpetual_liquidation() const;
  private:
  bool _internal_has_match_perpetual_liquidation() const;
  public:
  void clear_match_perpetual_liquidation();
  const ::dydxprotocol::clob::MatchPerpetualLiquidation& match_perpetual_liquidation() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::MatchPerpetualLiquidation* release_match_perpetual_liquidation();
  ::dydxprotocol::clob::MatchPerpetualLiquidation* mutable_match_perpetual_liquidation();
  void set_allocated_match_perpetual_liquidation(::dydxprotocol::clob::MatchPerpetualLiquidation* match_perpetual_liquidation);
  private:
  const ::dydxprotocol::clob::MatchPerpetualLiquidation& _internal_match_perpetual_liquidation() const;
  ::dydxprotocol::clob::MatchPerpetualLiquidation* _internal_mutable_match_perpetual_liquidation();
  public:
  void unsafe_arena_set_allocated_match_perpetual_liquidation(
      ::dydxprotocol::clob::MatchPerpetualLiquidation* match_perpetual_liquidation);
  ::dydxprotocol::clob::MatchPerpetualLiquidation* unsafe_arena_release_match_perpetual_liquidation();

  // .dydxprotocol.clob.MatchPerpetualDeleveraging match_perpetual_deleveraging = 3;
  bool has_match_perpetual_deleveraging() const;
  private:
  bool _internal_has_match_perpetual_deleveraging() const;
  public:
  void clear_match_perpetual_deleveraging();
  const ::dydxprotocol::clob::MatchPerpetualDeleveraging& match_perpetual_deleveraging() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::MatchPerpetualDeleveraging* release_match_perpetual_deleveraging();
  ::dydxprotocol::clob::MatchPerpetualDeleveraging* mutable_match_perpetual_deleveraging();
  void set_allocated_match_perpetual_deleveraging(::dydxprotocol::clob::MatchPerpetualDeleveraging* match_perpetual_deleveraging);
  private:
  const ::dydxprotocol::clob::MatchPerpetualDeleveraging& _internal_match_perpetual_deleveraging() const;
  ::dydxprotocol::clob::MatchPerpetualDeleveraging* _internal_mutable_match_perpetual_deleveraging();
  public:
  void unsafe_arena_set_allocated_match_perpetual_deleveraging(
      ::dydxprotocol::clob::MatchPerpetualDeleveraging* match_perpetual_deleveraging);
  ::dydxprotocol::clob::MatchPerpetualDeleveraging* unsafe_arena_release_match_perpetual_deleveraging();

  void clear_match();
  MatchCase match_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.ClobMatch)
 private:
  class _Internal;
  void set_has_match_orders();
  void set_has_match_perpetual_liquidation();
  void set_has_match_perpetual_deleveraging();

  inline bool has_match() const;
  inline void clear_has_match();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MatchUnion {
      constexpr MatchUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::dydxprotocol::clob::MatchOrders* match_orders_;
      ::dydxprotocol::clob::MatchPerpetualLiquidation* match_perpetual_liquidation_;
      ::dydxprotocol::clob::MatchPerpetualDeleveraging* match_perpetual_deleveraging_;
    } match_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fmatches_2eproto;
};
// -------------------------------------------------------------------

class MakerFill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MakerFill) */ {
 public:
  inline MakerFill() : MakerFill(nullptr) {}
  ~MakerFill() override;
  explicit PROTOBUF_CONSTEXPR MakerFill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MakerFill(const MakerFill& from);
  MakerFill(MakerFill&& from) noexcept
    : MakerFill() {
    *this = ::std::move(from);
  }

  inline MakerFill& operator=(const MakerFill& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakerFill& operator=(MakerFill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MakerFill& default_instance() {
    return *internal_default_instance();
  }
  static inline const MakerFill* internal_default_instance() {
    return reinterpret_cast<const MakerFill*>(
               &_MakerFill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MakerFill& a, MakerFill& b) {
    a.Swap(&b);
  }
  inline void Swap(MakerFill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MakerFill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MakerFill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MakerFill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MakerFill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MakerFill& from) {
    MakerFill::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MakerFill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.MakerFill";
  }
  protected:
  explicit MakerFill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMakerOrderIdFieldNumber = 2,
    kFillAmountFieldNumber = 1,
  };
  // .dydxprotocol.clob.OrderId maker_order_id = 2 [(.gogoproto.nullable) = false];
  bool has_maker_order_id() const;
  private:
  bool _internal_has_maker_order_id() const;
  public:
  void clear_maker_order_id();
  const ::dydxprotocol::clob::OrderId& maker_order_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::OrderId* release_maker_order_id();
  ::dydxprotocol::clob::OrderId* mutable_maker_order_id();
  void set_allocated_maker_order_id(::dydxprotocol::clob::OrderId* maker_order_id);
  private:
  const ::dydxprotocol::clob::OrderId& _internal_maker_order_id() const;
  ::dydxprotocol::clob::OrderId* _internal_mutable_maker_order_id();
  public:
  void unsafe_arena_set_allocated_maker_order_id(
      ::dydxprotocol::clob::OrderId* maker_order_id);
  ::dydxprotocol::clob::OrderId* unsafe_arena_release_maker_order_id();

  // uint64 fill_amount = 1;
  void clear_fill_amount();
  uint64_t fill_amount() const;
  void set_fill_amount(uint64_t value);
  private:
  uint64_t _internal_fill_amount() const;
  void _internal_set_fill_amount(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MakerFill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dydxprotocol::clob::OrderId* maker_order_id_;
    uint64_t fill_amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fmatches_2eproto;
};
// -------------------------------------------------------------------

class MatchOrders final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MatchOrders) */ {
 public:
  inline MatchOrders() : MatchOrders(nullptr) {}
  ~MatchOrders() override;
  explicit PROTOBUF_CONSTEXPR MatchOrders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchOrders(const MatchOrders& from);
  MatchOrders(MatchOrders&& from) noexcept
    : MatchOrders() {
    *this = ::std::move(from);
  }

  inline MatchOrders& operator=(const MatchOrders& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchOrders& operator=(MatchOrders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchOrders& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchOrders* internal_default_instance() {
    return reinterpret_cast<const MatchOrders*>(
               &_MatchOrders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MatchOrders& a, MatchOrders& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchOrders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchOrders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchOrders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchOrders>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchOrders& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatchOrders& from) {
    MatchOrders::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchOrders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.MatchOrders";
  }
  protected:
  explicit MatchOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillsFieldNumber = 2,
    kTakerOrderIdFieldNumber = 1,
  };
  // repeated .dydxprotocol.clob.MakerFill fills = 2 [(.gogoproto.nullable) = false];
  int fills_size() const;
  private:
  int _internal_fills_size() const;
  public:
  void clear_fills();
  ::dydxprotocol::clob::MakerFill* mutable_fills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MakerFill >*
      mutable_fills();
  private:
  const ::dydxprotocol::clob::MakerFill& _internal_fills(int index) const;
  ::dydxprotocol::clob::MakerFill* _internal_add_fills();
  public:
  const ::dydxprotocol::clob::MakerFill& fills(int index) const;
  ::dydxprotocol::clob::MakerFill* add_fills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MakerFill >&
      fills() const;

  // .dydxprotocol.clob.OrderId taker_order_id = 1 [(.gogoproto.nullable) = false];
  bool has_taker_order_id() const;
  private:
  bool _internal_has_taker_order_id() const;
  public:
  void clear_taker_order_id();
  const ::dydxprotocol::clob::OrderId& taker_order_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::OrderId* release_taker_order_id();
  ::dydxprotocol::clob::OrderId* mutable_taker_order_id();
  void set_allocated_taker_order_id(::dydxprotocol::clob::OrderId* taker_order_id);
  private:
  const ::dydxprotocol::clob::OrderId& _internal_taker_order_id() const;
  ::dydxprotocol::clob::OrderId* _internal_mutable_taker_order_id();
  public:
  void unsafe_arena_set_allocated_taker_order_id(
      ::dydxprotocol::clob::OrderId* taker_order_id);
  ::dydxprotocol::clob::OrderId* unsafe_arena_release_taker_order_id();

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MatchOrders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MakerFill > fills_;
    ::dydxprotocol::clob::OrderId* taker_order_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fmatches_2eproto;
};
// -------------------------------------------------------------------

class MatchPerpetualLiquidation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MatchPerpetualLiquidation) */ {
 public:
  inline MatchPerpetualLiquidation() : MatchPerpetualLiquidation(nullptr) {}
  ~MatchPerpetualLiquidation() override;
  explicit PROTOBUF_CONSTEXPR MatchPerpetualLiquidation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchPerpetualLiquidation(const MatchPerpetualLiquidation& from);
  MatchPerpetualLiquidation(MatchPerpetualLiquidation&& from) noexcept
    : MatchPerpetualLiquidation() {
    *this = ::std::move(from);
  }

  inline MatchPerpetualLiquidation& operator=(const MatchPerpetualLiquidation& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchPerpetualLiquidation& operator=(MatchPerpetualLiquidation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchPerpetualLiquidation& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchPerpetualLiquidation* internal_default_instance() {
    return reinterpret_cast<const MatchPerpetualLiquidation*>(
               &_MatchPerpetualLiquidation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MatchPerpetualLiquidation& a, MatchPerpetualLiquidation& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchPerpetualLiquidation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchPerpetualLiquidation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchPerpetualLiquidation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchPerpetualLiquidation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchPerpetualLiquidation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatchPerpetualLiquidation& from) {
    MatchPerpetualLiquidation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchPerpetualLiquidation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.MatchPerpetualLiquidation";
  }
  protected:
  explicit MatchPerpetualLiquidation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillsFieldNumber = 6,
    kLiquidatedFieldNumber = 1,
    kClobPairIdFieldNumber = 2,
    kPerpetualIdFieldNumber = 3,
    kTotalSizeFieldNumber = 4,
    kIsBuyFieldNumber = 5,
  };
  // repeated .dydxprotocol.clob.MakerFill fills = 6 [(.gogoproto.nullable) = false];
  int fills_size() const;
  private:
  int _internal_fills_size() const;
  public:
  void clear_fills();
  ::dydxprotocol::clob::MakerFill* mutable_fills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MakerFill >*
      mutable_fills();
  private:
  const ::dydxprotocol::clob::MakerFill& _internal_fills(int index) const;
  ::dydxprotocol::clob::MakerFill* _internal_add_fills();
  public:
  const ::dydxprotocol::clob::MakerFill& fills(int index) const;
  ::dydxprotocol::clob::MakerFill* add_fills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MakerFill >&
      fills() const;

  // .dydxprotocol.subaccounts.SubaccountId liquidated = 1 [(.gogoproto.nullable) = false];
  bool has_liquidated() const;
  private:
  bool _internal_has_liquidated() const;
  public:
  void clear_liquidated();
  const ::dydxprotocol::subaccounts::SubaccountId& liquidated() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_liquidated();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_liquidated();
  void set_allocated_liquidated(::dydxprotocol::subaccounts::SubaccountId* liquidated);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_liquidated() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_liquidated();
  public:
  void unsafe_arena_set_allocated_liquidated(
      ::dydxprotocol::subaccounts::SubaccountId* liquidated);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_liquidated();

  // uint32 clob_pair_id = 2;
  void clear_clob_pair_id();
  uint32_t clob_pair_id() const;
  void set_clob_pair_id(uint32_t value);
  private:
  uint32_t _internal_clob_pair_id() const;
  void _internal_set_clob_pair_id(uint32_t value);
  public:

  // uint32 perpetual_id = 3;
  void clear_perpetual_id();
  uint32_t perpetual_id() const;
  void set_perpetual_id(uint32_t value);
  private:
  uint32_t _internal_perpetual_id() const;
  void _internal_set_perpetual_id(uint32_t value);
  public:

  // uint64 total_size = 4;
  void clear_total_size();
  uint64_t total_size() const;
  void set_total_size(uint64_t value);
  private:
  uint64_t _internal_total_size() const;
  void _internal_set_total_size(uint64_t value);
  public:

  // bool is_buy = 5;
  void clear_is_buy();
  bool is_buy() const;
  void set_is_buy(bool value);
  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MatchPerpetualLiquidation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MakerFill > fills_;
    ::dydxprotocol::subaccounts::SubaccountId* liquidated_;
    uint32_t clob_pair_id_;
    uint32_t perpetual_id_;
    uint64_t total_size_;
    bool is_buy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fmatches_2eproto;
};
// -------------------------------------------------------------------

class MatchPerpetualDeleveraging_Fill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill) */ {
 public:
  inline MatchPerpetualDeleveraging_Fill() : MatchPerpetualDeleveraging_Fill(nullptr) {}
  ~MatchPerpetualDeleveraging_Fill() override;
  explicit PROTOBUF_CONSTEXPR MatchPerpetualDeleveraging_Fill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchPerpetualDeleveraging_Fill(const MatchPerpetualDeleveraging_Fill& from);
  MatchPerpetualDeleveraging_Fill(MatchPerpetualDeleveraging_Fill&& from) noexcept
    : MatchPerpetualDeleveraging_Fill() {
    *this = ::std::move(from);
  }

  inline MatchPerpetualDeleveraging_Fill& operator=(const MatchPerpetualDeleveraging_Fill& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchPerpetualDeleveraging_Fill& operator=(MatchPerpetualDeleveraging_Fill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchPerpetualDeleveraging_Fill& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchPerpetualDeleveraging_Fill* internal_default_instance() {
    return reinterpret_cast<const MatchPerpetualDeleveraging_Fill*>(
               &_MatchPerpetualDeleveraging_Fill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MatchPerpetualDeleveraging_Fill& a, MatchPerpetualDeleveraging_Fill& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchPerpetualDeleveraging_Fill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchPerpetualDeleveraging_Fill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchPerpetualDeleveraging_Fill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchPerpetualDeleveraging_Fill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchPerpetualDeleveraging_Fill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatchPerpetualDeleveraging_Fill& from) {
    MatchPerpetualDeleveraging_Fill::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchPerpetualDeleveraging_Fill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.MatchPerpetualDeleveraging.Fill";
  }
  protected:
  explicit MatchPerpetualDeleveraging_Fill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsettingSubaccountIdFieldNumber = 1,
    kFillAmountFieldNumber = 2,
  };
  // .dydxprotocol.subaccounts.SubaccountId offsetting_subaccount_id = 1 [(.gogoproto.nullable) = false];
  bool has_offsetting_subaccount_id() const;
  private:
  bool _internal_has_offsetting_subaccount_id() const;
  public:
  void clear_offsetting_subaccount_id();
  const ::dydxprotocol::subaccounts::SubaccountId& offsetting_subaccount_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_offsetting_subaccount_id();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_offsetting_subaccount_id();
  void set_allocated_offsetting_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* offsetting_subaccount_id);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_offsetting_subaccount_id() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_offsetting_subaccount_id();
  public:
  void unsafe_arena_set_allocated_offsetting_subaccount_id(
      ::dydxprotocol::subaccounts::SubaccountId* offsetting_subaccount_id);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_offsetting_subaccount_id();

  // uint64 fill_amount = 2;
  void clear_fill_amount();
  uint64_t fill_amount() const;
  void set_fill_amount(uint64_t value);
  private:
  uint64_t _internal_fill_amount() const;
  void _internal_set_fill_amount(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dydxprotocol::subaccounts::SubaccountId* offsetting_subaccount_id_;
    uint64_t fill_amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fmatches_2eproto;
};
// -------------------------------------------------------------------

class MatchPerpetualDeleveraging final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MatchPerpetualDeleveraging) */ {
 public:
  inline MatchPerpetualDeleveraging() : MatchPerpetualDeleveraging(nullptr) {}
  ~MatchPerpetualDeleveraging() override;
  explicit PROTOBUF_CONSTEXPR MatchPerpetualDeleveraging(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchPerpetualDeleveraging(const MatchPerpetualDeleveraging& from);
  MatchPerpetualDeleveraging(MatchPerpetualDeleveraging&& from) noexcept
    : MatchPerpetualDeleveraging() {
    *this = ::std::move(from);
  }

  inline MatchPerpetualDeleveraging& operator=(const MatchPerpetualDeleveraging& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchPerpetualDeleveraging& operator=(MatchPerpetualDeleveraging&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchPerpetualDeleveraging& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchPerpetualDeleveraging* internal_default_instance() {
    return reinterpret_cast<const MatchPerpetualDeleveraging*>(
               &_MatchPerpetualDeleveraging_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MatchPerpetualDeleveraging& a, MatchPerpetualDeleveraging& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchPerpetualDeleveraging* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchPerpetualDeleveraging* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchPerpetualDeleveraging* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchPerpetualDeleveraging>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchPerpetualDeleveraging& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatchPerpetualDeleveraging& from) {
    MatchPerpetualDeleveraging::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchPerpetualDeleveraging* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.MatchPerpetualDeleveraging";
  }
  protected:
  explicit MatchPerpetualDeleveraging(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MatchPerpetualDeleveraging_Fill Fill;

  // accessors -------------------------------------------------------

  enum : int {
    kFillsFieldNumber = 3,
    kLiquidatedFieldNumber = 1,
    kPerpetualIdFieldNumber = 2,
  };
  // repeated .dydxprotocol.clob.MatchPerpetualDeleveraging.Fill fills = 3 [(.gogoproto.nullable) = false];
  int fills_size() const;
  private:
  int _internal_fills_size() const;
  public:
  void clear_fills();
  ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill* mutable_fills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill >*
      mutable_fills();
  private:
  const ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill& _internal_fills(int index) const;
  ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill* _internal_add_fills();
  public:
  const ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill& fills(int index) const;
  ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill* add_fills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill >&
      fills() const;

  // .dydxprotocol.subaccounts.SubaccountId liquidated = 1 [(.gogoproto.nullable) = false];
  bool has_liquidated() const;
  private:
  bool _internal_has_liquidated() const;
  public:
  void clear_liquidated();
  const ::dydxprotocol::subaccounts::SubaccountId& liquidated() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_liquidated();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_liquidated();
  void set_allocated_liquidated(::dydxprotocol::subaccounts::SubaccountId* liquidated);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_liquidated() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_liquidated();
  public:
  void unsafe_arena_set_allocated_liquidated(
      ::dydxprotocol::subaccounts::SubaccountId* liquidated);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_liquidated();

  // uint32 perpetual_id = 2;
  void clear_perpetual_id();
  uint32_t perpetual_id() const;
  void set_perpetual_id(uint32_t value);
  private:
  uint32_t _internal_perpetual_id() const;
  void _internal_set_perpetual_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MatchPerpetualDeleveraging)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill > fills_;
    ::dydxprotocol::subaccounts::SubaccountId* liquidated_;
    uint32_t perpetual_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fmatches_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClobMatch

// .dydxprotocol.clob.MatchOrders match_orders = 1;
inline bool ClobMatch::_internal_has_match_orders() const {
  return match_case() == kMatchOrders;
}
inline bool ClobMatch::has_match_orders() const {
  return _internal_has_match_orders();
}
inline void ClobMatch::set_has_match_orders() {
  _impl_._oneof_case_[0] = kMatchOrders;
}
inline void ClobMatch::clear_match_orders() {
  if (_internal_has_match_orders()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.match_.match_orders_;
    }
    clear_has_match();
  }
}
inline ::dydxprotocol::clob::MatchOrders* ClobMatch::release_match_orders() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.ClobMatch.match_orders)
  if (_internal_has_match_orders()) {
    clear_has_match();
    ::dydxprotocol::clob::MatchOrders* temp = _impl_.match_.match_orders_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.match_.match_orders_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::MatchOrders& ClobMatch::_internal_match_orders() const {
  return _internal_has_match_orders()
      ? *_impl_.match_.match_orders_
      : reinterpret_cast< ::dydxprotocol::clob::MatchOrders&>(::dydxprotocol::clob::_MatchOrders_default_instance_);
}
inline const ::dydxprotocol::clob::MatchOrders& ClobMatch::match_orders() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ClobMatch.match_orders)
  return _internal_match_orders();
}
inline ::dydxprotocol::clob::MatchOrders* ClobMatch::unsafe_arena_release_match_orders() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.ClobMatch.match_orders)
  if (_internal_has_match_orders()) {
    clear_has_match();
    ::dydxprotocol::clob::MatchOrders* temp = _impl_.match_.match_orders_;
    _impl_.match_.match_orders_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClobMatch::unsafe_arena_set_allocated_match_orders(::dydxprotocol::clob::MatchOrders* match_orders) {
  clear_match();
  if (match_orders) {
    set_has_match_orders();
    _impl_.match_.match_orders_ = match_orders;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.ClobMatch.match_orders)
}
inline ::dydxprotocol::clob::MatchOrders* ClobMatch::_internal_mutable_match_orders() {
  if (!_internal_has_match_orders()) {
    clear_match();
    set_has_match_orders();
    _impl_.match_.match_orders_ = CreateMaybeMessage< ::dydxprotocol::clob::MatchOrders >(GetArenaForAllocation());
  }
  return _impl_.match_.match_orders_;
}
inline ::dydxprotocol::clob::MatchOrders* ClobMatch::mutable_match_orders() {
  ::dydxprotocol::clob::MatchOrders* _msg = _internal_mutable_match_orders();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.ClobMatch.match_orders)
  return _msg;
}

// .dydxprotocol.clob.MatchPerpetualLiquidation match_perpetual_liquidation = 2;
inline bool ClobMatch::_internal_has_match_perpetual_liquidation() const {
  return match_case() == kMatchPerpetualLiquidation;
}
inline bool ClobMatch::has_match_perpetual_liquidation() const {
  return _internal_has_match_perpetual_liquidation();
}
inline void ClobMatch::set_has_match_perpetual_liquidation() {
  _impl_._oneof_case_[0] = kMatchPerpetualLiquidation;
}
inline void ClobMatch::clear_match_perpetual_liquidation() {
  if (_internal_has_match_perpetual_liquidation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.match_.match_perpetual_liquidation_;
    }
    clear_has_match();
  }
}
inline ::dydxprotocol::clob::MatchPerpetualLiquidation* ClobMatch::release_match_perpetual_liquidation() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.ClobMatch.match_perpetual_liquidation)
  if (_internal_has_match_perpetual_liquidation()) {
    clear_has_match();
    ::dydxprotocol::clob::MatchPerpetualLiquidation* temp = _impl_.match_.match_perpetual_liquidation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.match_.match_perpetual_liquidation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::MatchPerpetualLiquidation& ClobMatch::_internal_match_perpetual_liquidation() const {
  return _internal_has_match_perpetual_liquidation()
      ? *_impl_.match_.match_perpetual_liquidation_
      : reinterpret_cast< ::dydxprotocol::clob::MatchPerpetualLiquidation&>(::dydxprotocol::clob::_MatchPerpetualLiquidation_default_instance_);
}
inline const ::dydxprotocol::clob::MatchPerpetualLiquidation& ClobMatch::match_perpetual_liquidation() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ClobMatch.match_perpetual_liquidation)
  return _internal_match_perpetual_liquidation();
}
inline ::dydxprotocol::clob::MatchPerpetualLiquidation* ClobMatch::unsafe_arena_release_match_perpetual_liquidation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.ClobMatch.match_perpetual_liquidation)
  if (_internal_has_match_perpetual_liquidation()) {
    clear_has_match();
    ::dydxprotocol::clob::MatchPerpetualLiquidation* temp = _impl_.match_.match_perpetual_liquidation_;
    _impl_.match_.match_perpetual_liquidation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClobMatch::unsafe_arena_set_allocated_match_perpetual_liquidation(::dydxprotocol::clob::MatchPerpetualLiquidation* match_perpetual_liquidation) {
  clear_match();
  if (match_perpetual_liquidation) {
    set_has_match_perpetual_liquidation();
    _impl_.match_.match_perpetual_liquidation_ = match_perpetual_liquidation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.ClobMatch.match_perpetual_liquidation)
}
inline ::dydxprotocol::clob::MatchPerpetualLiquidation* ClobMatch::_internal_mutable_match_perpetual_liquidation() {
  if (!_internal_has_match_perpetual_liquidation()) {
    clear_match();
    set_has_match_perpetual_liquidation();
    _impl_.match_.match_perpetual_liquidation_ = CreateMaybeMessage< ::dydxprotocol::clob::MatchPerpetualLiquidation >(GetArenaForAllocation());
  }
  return _impl_.match_.match_perpetual_liquidation_;
}
inline ::dydxprotocol::clob::MatchPerpetualLiquidation* ClobMatch::mutable_match_perpetual_liquidation() {
  ::dydxprotocol::clob::MatchPerpetualLiquidation* _msg = _internal_mutable_match_perpetual_liquidation();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.ClobMatch.match_perpetual_liquidation)
  return _msg;
}

// .dydxprotocol.clob.MatchPerpetualDeleveraging match_perpetual_deleveraging = 3;
inline bool ClobMatch::_internal_has_match_perpetual_deleveraging() const {
  return match_case() == kMatchPerpetualDeleveraging;
}
inline bool ClobMatch::has_match_perpetual_deleveraging() const {
  return _internal_has_match_perpetual_deleveraging();
}
inline void ClobMatch::set_has_match_perpetual_deleveraging() {
  _impl_._oneof_case_[0] = kMatchPerpetualDeleveraging;
}
inline void ClobMatch::clear_match_perpetual_deleveraging() {
  if (_internal_has_match_perpetual_deleveraging()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.match_.match_perpetual_deleveraging_;
    }
    clear_has_match();
  }
}
inline ::dydxprotocol::clob::MatchPerpetualDeleveraging* ClobMatch::release_match_perpetual_deleveraging() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.ClobMatch.match_perpetual_deleveraging)
  if (_internal_has_match_perpetual_deleveraging()) {
    clear_has_match();
    ::dydxprotocol::clob::MatchPerpetualDeleveraging* temp = _impl_.match_.match_perpetual_deleveraging_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.match_.match_perpetual_deleveraging_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::MatchPerpetualDeleveraging& ClobMatch::_internal_match_perpetual_deleveraging() const {
  return _internal_has_match_perpetual_deleveraging()
      ? *_impl_.match_.match_perpetual_deleveraging_
      : reinterpret_cast< ::dydxprotocol::clob::MatchPerpetualDeleveraging&>(::dydxprotocol::clob::_MatchPerpetualDeleveraging_default_instance_);
}
inline const ::dydxprotocol::clob::MatchPerpetualDeleveraging& ClobMatch::match_perpetual_deleveraging() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ClobMatch.match_perpetual_deleveraging)
  return _internal_match_perpetual_deleveraging();
}
inline ::dydxprotocol::clob::MatchPerpetualDeleveraging* ClobMatch::unsafe_arena_release_match_perpetual_deleveraging() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.ClobMatch.match_perpetual_deleveraging)
  if (_internal_has_match_perpetual_deleveraging()) {
    clear_has_match();
    ::dydxprotocol::clob::MatchPerpetualDeleveraging* temp = _impl_.match_.match_perpetual_deleveraging_;
    _impl_.match_.match_perpetual_deleveraging_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClobMatch::unsafe_arena_set_allocated_match_perpetual_deleveraging(::dydxprotocol::clob::MatchPerpetualDeleveraging* match_perpetual_deleveraging) {
  clear_match();
  if (match_perpetual_deleveraging) {
    set_has_match_perpetual_deleveraging();
    _impl_.match_.match_perpetual_deleveraging_ = match_perpetual_deleveraging;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.ClobMatch.match_perpetual_deleveraging)
}
inline ::dydxprotocol::clob::MatchPerpetualDeleveraging* ClobMatch::_internal_mutable_match_perpetual_deleveraging() {
  if (!_internal_has_match_perpetual_deleveraging()) {
    clear_match();
    set_has_match_perpetual_deleveraging();
    _impl_.match_.match_perpetual_deleveraging_ = CreateMaybeMessage< ::dydxprotocol::clob::MatchPerpetualDeleveraging >(GetArenaForAllocation());
  }
  return _impl_.match_.match_perpetual_deleveraging_;
}
inline ::dydxprotocol::clob::MatchPerpetualDeleveraging* ClobMatch::mutable_match_perpetual_deleveraging() {
  ::dydxprotocol::clob::MatchPerpetualDeleveraging* _msg = _internal_mutable_match_perpetual_deleveraging();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.ClobMatch.match_perpetual_deleveraging)
  return _msg;
}

inline bool ClobMatch::has_match() const {
  return match_case() != MATCH_NOT_SET;
}
inline void ClobMatch::clear_has_match() {
  _impl_._oneof_case_[0] = MATCH_NOT_SET;
}
inline ClobMatch::MatchCase ClobMatch::match_case() const {
  return ClobMatch::MatchCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MakerFill

// uint64 fill_amount = 1;
inline void MakerFill::clear_fill_amount() {
  _impl_.fill_amount_ = uint64_t{0u};
}
inline uint64_t MakerFill::_internal_fill_amount() const {
  return _impl_.fill_amount_;
}
inline uint64_t MakerFill::fill_amount() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MakerFill.fill_amount)
  return _internal_fill_amount();
}
inline void MakerFill::_internal_set_fill_amount(uint64_t value) {
  
  _impl_.fill_amount_ = value;
}
inline void MakerFill::set_fill_amount(uint64_t value) {
  _internal_set_fill_amount(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MakerFill.fill_amount)
}

// .dydxprotocol.clob.OrderId maker_order_id = 2 [(.gogoproto.nullable) = false];
inline bool MakerFill::_internal_has_maker_order_id() const {
  return this != internal_default_instance() && _impl_.maker_order_id_ != nullptr;
}
inline bool MakerFill::has_maker_order_id() const {
  return _internal_has_maker_order_id();
}
inline const ::dydxprotocol::clob::OrderId& MakerFill::_internal_maker_order_id() const {
  const ::dydxprotocol::clob::OrderId* p = _impl_.maker_order_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::OrderId&>(
      ::dydxprotocol::clob::_OrderId_default_instance_);
}
inline const ::dydxprotocol::clob::OrderId& MakerFill::maker_order_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MakerFill.maker_order_id)
  return _internal_maker_order_id();
}
inline void MakerFill::unsafe_arena_set_allocated_maker_order_id(
    ::dydxprotocol::clob::OrderId* maker_order_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maker_order_id_);
  }
  _impl_.maker_order_id_ = maker_order_id;
  if (maker_order_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MakerFill.maker_order_id)
}
inline ::dydxprotocol::clob::OrderId* MakerFill::release_maker_order_id() {
  
  ::dydxprotocol::clob::OrderId* temp = _impl_.maker_order_id_;
  _impl_.maker_order_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::OrderId* MakerFill::unsafe_arena_release_maker_order_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MakerFill.maker_order_id)
  
  ::dydxprotocol::clob::OrderId* temp = _impl_.maker_order_id_;
  _impl_.maker_order_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::OrderId* MakerFill::_internal_mutable_maker_order_id() {
  
  if (_impl_.maker_order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::OrderId>(GetArenaForAllocation());
    _impl_.maker_order_id_ = p;
  }
  return _impl_.maker_order_id_;
}
inline ::dydxprotocol::clob::OrderId* MakerFill::mutable_maker_order_id() {
  ::dydxprotocol::clob::OrderId* _msg = _internal_mutable_maker_order_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MakerFill.maker_order_id)
  return _msg;
}
inline void MakerFill::set_allocated_maker_order_id(::dydxprotocol::clob::OrderId* maker_order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maker_order_id_);
  }
  if (maker_order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maker_order_id));
    if (message_arena != submessage_arena) {
      maker_order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maker_order_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.maker_order_id_ = maker_order_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MakerFill.maker_order_id)
}

// -------------------------------------------------------------------

// MatchOrders

// .dydxprotocol.clob.OrderId taker_order_id = 1 [(.gogoproto.nullable) = false];
inline bool MatchOrders::_internal_has_taker_order_id() const {
  return this != internal_default_instance() && _impl_.taker_order_id_ != nullptr;
}
inline bool MatchOrders::has_taker_order_id() const {
  return _internal_has_taker_order_id();
}
inline const ::dydxprotocol::clob::OrderId& MatchOrders::_internal_taker_order_id() const {
  const ::dydxprotocol::clob::OrderId* p = _impl_.taker_order_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::OrderId&>(
      ::dydxprotocol::clob::_OrderId_default_instance_);
}
inline const ::dydxprotocol::clob::OrderId& MatchOrders::taker_order_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MatchOrders.taker_order_id)
  return _internal_taker_order_id();
}
inline void MatchOrders::unsafe_arena_set_allocated_taker_order_id(
    ::dydxprotocol::clob::OrderId* taker_order_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.taker_order_id_);
  }
  _impl_.taker_order_id_ = taker_order_id;
  if (taker_order_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MatchOrders.taker_order_id)
}
inline ::dydxprotocol::clob::OrderId* MatchOrders::release_taker_order_id() {
  
  ::dydxprotocol::clob::OrderId* temp = _impl_.taker_order_id_;
  _impl_.taker_order_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::OrderId* MatchOrders::unsafe_arena_release_taker_order_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MatchOrders.taker_order_id)
  
  ::dydxprotocol::clob::OrderId* temp = _impl_.taker_order_id_;
  _impl_.taker_order_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::OrderId* MatchOrders::_internal_mutable_taker_order_id() {
  
  if (_impl_.taker_order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::OrderId>(GetArenaForAllocation());
    _impl_.taker_order_id_ = p;
  }
  return _impl_.taker_order_id_;
}
inline ::dydxprotocol::clob::OrderId* MatchOrders::mutable_taker_order_id() {
  ::dydxprotocol::clob::OrderId* _msg = _internal_mutable_taker_order_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MatchOrders.taker_order_id)
  return _msg;
}
inline void MatchOrders::set_allocated_taker_order_id(::dydxprotocol::clob::OrderId* taker_order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.taker_order_id_);
  }
  if (taker_order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(taker_order_id));
    if (message_arena != submessage_arena) {
      taker_order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taker_order_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.taker_order_id_ = taker_order_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MatchOrders.taker_order_id)
}

// repeated .dydxprotocol.clob.MakerFill fills = 2 [(.gogoproto.nullable) = false];
inline int MatchOrders::_internal_fills_size() const {
  return _impl_.fills_.size();
}
inline int MatchOrders::fills_size() const {
  return _internal_fills_size();
}
inline void MatchOrders::clear_fills() {
  _impl_.fills_.Clear();
}
inline ::dydxprotocol::clob::MakerFill* MatchOrders::mutable_fills(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MatchOrders.fills)
  return _impl_.fills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MakerFill >*
MatchOrders::mutable_fills() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.MatchOrders.fills)
  return &_impl_.fills_;
}
inline const ::dydxprotocol::clob::MakerFill& MatchOrders::_internal_fills(int index) const {
  return _impl_.fills_.Get(index);
}
inline const ::dydxprotocol::clob::MakerFill& MatchOrders::fills(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MatchOrders.fills)
  return _internal_fills(index);
}
inline ::dydxprotocol::clob::MakerFill* MatchOrders::_internal_add_fills() {
  return _impl_.fills_.Add();
}
inline ::dydxprotocol::clob::MakerFill* MatchOrders::add_fills() {
  ::dydxprotocol::clob::MakerFill* _add = _internal_add_fills();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.MatchOrders.fills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MakerFill >&
MatchOrders::fills() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.MatchOrders.fills)
  return _impl_.fills_;
}

// -------------------------------------------------------------------

// MatchPerpetualLiquidation

// .dydxprotocol.subaccounts.SubaccountId liquidated = 1 [(.gogoproto.nullable) = false];
inline bool MatchPerpetualLiquidation::_internal_has_liquidated() const {
  return this != internal_default_instance() && _impl_.liquidated_ != nullptr;
}
inline bool MatchPerpetualLiquidation::has_liquidated() const {
  return _internal_has_liquidated();
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MatchPerpetualLiquidation::_internal_liquidated() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.liquidated_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MatchPerpetualLiquidation::liquidated() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MatchPerpetualLiquidation.liquidated)
  return _internal_liquidated();
}
inline void MatchPerpetualLiquidation::unsafe_arena_set_allocated_liquidated(
    ::dydxprotocol::subaccounts::SubaccountId* liquidated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.liquidated_);
  }
  _impl_.liquidated_ = liquidated;
  if (liquidated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MatchPerpetualLiquidation.liquidated)
}
inline ::dydxprotocol::subaccounts::SubaccountId* MatchPerpetualLiquidation::release_liquidated() {
  
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.liquidated_;
  _impl_.liquidated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MatchPerpetualLiquidation::unsafe_arena_release_liquidated() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MatchPerpetualLiquidation.liquidated)
  
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.liquidated_;
  _impl_.liquidated_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MatchPerpetualLiquidation::_internal_mutable_liquidated() {
  
  if (_impl_.liquidated_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.liquidated_ = p;
  }
  return _impl_.liquidated_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MatchPerpetualLiquidation::mutable_liquidated() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_liquidated();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MatchPerpetualLiquidation.liquidated)
  return _msg;
}
inline void MatchPerpetualLiquidation::set_allocated_liquidated(::dydxprotocol::subaccounts::SubaccountId* liquidated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.liquidated_);
  }
  if (liquidated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(liquidated));
    if (message_arena != submessage_arena) {
      liquidated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liquidated, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.liquidated_ = liquidated;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MatchPerpetualLiquidation.liquidated)
}

// uint32 clob_pair_id = 2;
inline void MatchPerpetualLiquidation::clear_clob_pair_id() {
  _impl_.clob_pair_id_ = 0u;
}
inline uint32_t MatchPerpetualLiquidation::_internal_clob_pair_id() const {
  return _impl_.clob_pair_id_;
}
inline uint32_t MatchPerpetualLiquidation::clob_pair_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MatchPerpetualLiquidation.clob_pair_id)
  return _internal_clob_pair_id();
}
inline void MatchPerpetualLiquidation::_internal_set_clob_pair_id(uint32_t value) {
  
  _impl_.clob_pair_id_ = value;
}
inline void MatchPerpetualLiquidation::set_clob_pair_id(uint32_t value) {
  _internal_set_clob_pair_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MatchPerpetualLiquidation.clob_pair_id)
}

// uint32 perpetual_id = 3;
inline void MatchPerpetualLiquidation::clear_perpetual_id() {
  _impl_.perpetual_id_ = 0u;
}
inline uint32_t MatchPerpetualLiquidation::_internal_perpetual_id() const {
  return _impl_.perpetual_id_;
}
inline uint32_t MatchPerpetualLiquidation::perpetual_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MatchPerpetualLiquidation.perpetual_id)
  return _internal_perpetual_id();
}
inline void MatchPerpetualLiquidation::_internal_set_perpetual_id(uint32_t value) {
  
  _impl_.perpetual_id_ = value;
}
inline void MatchPerpetualLiquidation::set_perpetual_id(uint32_t value) {
  _internal_set_perpetual_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MatchPerpetualLiquidation.perpetual_id)
}

// uint64 total_size = 4;
inline void MatchPerpetualLiquidation::clear_total_size() {
  _impl_.total_size_ = uint64_t{0u};
}
inline uint64_t MatchPerpetualLiquidation::_internal_total_size() const {
  return _impl_.total_size_;
}
inline uint64_t MatchPerpetualLiquidation::total_size() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MatchPerpetualLiquidation.total_size)
  return _internal_total_size();
}
inline void MatchPerpetualLiquidation::_internal_set_total_size(uint64_t value) {
  
  _impl_.total_size_ = value;
}
inline void MatchPerpetualLiquidation::set_total_size(uint64_t value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MatchPerpetualLiquidation.total_size)
}

// bool is_buy = 5;
inline void MatchPerpetualLiquidation::clear_is_buy() {
  _impl_.is_buy_ = false;
}
inline bool MatchPerpetualLiquidation::_internal_is_buy() const {
  return _impl_.is_buy_;
}
inline bool MatchPerpetualLiquidation::is_buy() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MatchPerpetualLiquidation.is_buy)
  return _internal_is_buy();
}
inline void MatchPerpetualLiquidation::_internal_set_is_buy(bool value) {
  
  _impl_.is_buy_ = value;
}
inline void MatchPerpetualLiquidation::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MatchPerpetualLiquidation.is_buy)
}

// repeated .dydxprotocol.clob.MakerFill fills = 6 [(.gogoproto.nullable) = false];
inline int MatchPerpetualLiquidation::_internal_fills_size() const {
  return _impl_.fills_.size();
}
inline int MatchPerpetualLiquidation::fills_size() const {
  return _internal_fills_size();
}
inline void MatchPerpetualLiquidation::clear_fills() {
  _impl_.fills_.Clear();
}
inline ::dydxprotocol::clob::MakerFill* MatchPerpetualLiquidation::mutable_fills(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MatchPerpetualLiquidation.fills)
  return _impl_.fills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MakerFill >*
MatchPerpetualLiquidation::mutable_fills() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.MatchPerpetualLiquidation.fills)
  return &_impl_.fills_;
}
inline const ::dydxprotocol::clob::MakerFill& MatchPerpetualLiquidation::_internal_fills(int index) const {
  return _impl_.fills_.Get(index);
}
inline const ::dydxprotocol::clob::MakerFill& MatchPerpetualLiquidation::fills(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MatchPerpetualLiquidation.fills)
  return _internal_fills(index);
}
inline ::dydxprotocol::clob::MakerFill* MatchPerpetualLiquidation::_internal_add_fills() {
  return _impl_.fills_.Add();
}
inline ::dydxprotocol::clob::MakerFill* MatchPerpetualLiquidation::add_fills() {
  ::dydxprotocol::clob::MakerFill* _add = _internal_add_fills();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.MatchPerpetualLiquidation.fills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MakerFill >&
MatchPerpetualLiquidation::fills() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.MatchPerpetualLiquidation.fills)
  return _impl_.fills_;
}

// -------------------------------------------------------------------

// MatchPerpetualDeleveraging_Fill

// .dydxprotocol.subaccounts.SubaccountId offsetting_subaccount_id = 1 [(.gogoproto.nullable) = false];
inline bool MatchPerpetualDeleveraging_Fill::_internal_has_offsetting_subaccount_id() const {
  return this != internal_default_instance() && _impl_.offsetting_subaccount_id_ != nullptr;
}
inline bool MatchPerpetualDeleveraging_Fill::has_offsetting_subaccount_id() const {
  return _internal_has_offsetting_subaccount_id();
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MatchPerpetualDeleveraging_Fill::_internal_offsetting_subaccount_id() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.offsetting_subaccount_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MatchPerpetualDeleveraging_Fill::offsetting_subaccount_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill.offsetting_subaccount_id)
  return _internal_offsetting_subaccount_id();
}
inline void MatchPerpetualDeleveraging_Fill::unsafe_arena_set_allocated_offsetting_subaccount_id(
    ::dydxprotocol::subaccounts::SubaccountId* offsetting_subaccount_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offsetting_subaccount_id_);
  }
  _impl_.offsetting_subaccount_id_ = offsetting_subaccount_id;
  if (offsetting_subaccount_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill.offsetting_subaccount_id)
}
inline ::dydxprotocol::subaccounts::SubaccountId* MatchPerpetualDeleveraging_Fill::release_offsetting_subaccount_id() {
  
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.offsetting_subaccount_id_;
  _impl_.offsetting_subaccount_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MatchPerpetualDeleveraging_Fill::unsafe_arena_release_offsetting_subaccount_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill.offsetting_subaccount_id)
  
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.offsetting_subaccount_id_;
  _impl_.offsetting_subaccount_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MatchPerpetualDeleveraging_Fill::_internal_mutable_offsetting_subaccount_id() {
  
  if (_impl_.offsetting_subaccount_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.offsetting_subaccount_id_ = p;
  }
  return _impl_.offsetting_subaccount_id_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MatchPerpetualDeleveraging_Fill::mutable_offsetting_subaccount_id() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_offsetting_subaccount_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill.offsetting_subaccount_id)
  return _msg;
}
inline void MatchPerpetualDeleveraging_Fill::set_allocated_offsetting_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* offsetting_subaccount_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offsetting_subaccount_id_);
  }
  if (offsetting_subaccount_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offsetting_subaccount_id));
    if (message_arena != submessage_arena) {
      offsetting_subaccount_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offsetting_subaccount_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offsetting_subaccount_id_ = offsetting_subaccount_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill.offsetting_subaccount_id)
}

// uint64 fill_amount = 2;
inline void MatchPerpetualDeleveraging_Fill::clear_fill_amount() {
  _impl_.fill_amount_ = uint64_t{0u};
}
inline uint64_t MatchPerpetualDeleveraging_Fill::_internal_fill_amount() const {
  return _impl_.fill_amount_;
}
inline uint64_t MatchPerpetualDeleveraging_Fill::fill_amount() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill.fill_amount)
  return _internal_fill_amount();
}
inline void MatchPerpetualDeleveraging_Fill::_internal_set_fill_amount(uint64_t value) {
  
  _impl_.fill_amount_ = value;
}
inline void MatchPerpetualDeleveraging_Fill::set_fill_amount(uint64_t value) {
  _internal_set_fill_amount(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill.fill_amount)
}

// -------------------------------------------------------------------

// MatchPerpetualDeleveraging

// .dydxprotocol.subaccounts.SubaccountId liquidated = 1 [(.gogoproto.nullable) = false];
inline bool MatchPerpetualDeleveraging::_internal_has_liquidated() const {
  return this != internal_default_instance() && _impl_.liquidated_ != nullptr;
}
inline bool MatchPerpetualDeleveraging::has_liquidated() const {
  return _internal_has_liquidated();
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MatchPerpetualDeleveraging::_internal_liquidated() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.liquidated_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MatchPerpetualDeleveraging::liquidated() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MatchPerpetualDeleveraging.liquidated)
  return _internal_liquidated();
}
inline void MatchPerpetualDeleveraging::unsafe_arena_set_allocated_liquidated(
    ::dydxprotocol::subaccounts::SubaccountId* liquidated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.liquidated_);
  }
  _impl_.liquidated_ = liquidated;
  if (liquidated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MatchPerpetualDeleveraging.liquidated)
}
inline ::dydxprotocol::subaccounts::SubaccountId* MatchPerpetualDeleveraging::release_liquidated() {
  
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.liquidated_;
  _impl_.liquidated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MatchPerpetualDeleveraging::unsafe_arena_release_liquidated() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MatchPerpetualDeleveraging.liquidated)
  
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.liquidated_;
  _impl_.liquidated_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MatchPerpetualDeleveraging::_internal_mutable_liquidated() {
  
  if (_impl_.liquidated_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.liquidated_ = p;
  }
  return _impl_.liquidated_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MatchPerpetualDeleveraging::mutable_liquidated() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_liquidated();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MatchPerpetualDeleveraging.liquidated)
  return _msg;
}
inline void MatchPerpetualDeleveraging::set_allocated_liquidated(::dydxprotocol::subaccounts::SubaccountId* liquidated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.liquidated_);
  }
  if (liquidated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(liquidated));
    if (message_arena != submessage_arena) {
      liquidated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liquidated, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.liquidated_ = liquidated;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MatchPerpetualDeleveraging.liquidated)
}

// uint32 perpetual_id = 2;
inline void MatchPerpetualDeleveraging::clear_perpetual_id() {
  _impl_.perpetual_id_ = 0u;
}
inline uint32_t MatchPerpetualDeleveraging::_internal_perpetual_id() const {
  return _impl_.perpetual_id_;
}
inline uint32_t MatchPerpetualDeleveraging::perpetual_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MatchPerpetualDeleveraging.perpetual_id)
  return _internal_perpetual_id();
}
inline void MatchPerpetualDeleveraging::_internal_set_perpetual_id(uint32_t value) {
  
  _impl_.perpetual_id_ = value;
}
inline void MatchPerpetualDeleveraging::set_perpetual_id(uint32_t value) {
  _internal_set_perpetual_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MatchPerpetualDeleveraging.perpetual_id)
}

// repeated .dydxprotocol.clob.MatchPerpetualDeleveraging.Fill fills = 3 [(.gogoproto.nullable) = false];
inline int MatchPerpetualDeleveraging::_internal_fills_size() const {
  return _impl_.fills_.size();
}
inline int MatchPerpetualDeleveraging::fills_size() const {
  return _internal_fills_size();
}
inline void MatchPerpetualDeleveraging::clear_fills() {
  _impl_.fills_.Clear();
}
inline ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill* MatchPerpetualDeleveraging::mutable_fills(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MatchPerpetualDeleveraging.fills)
  return _impl_.fills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill >*
MatchPerpetualDeleveraging::mutable_fills() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.MatchPerpetualDeleveraging.fills)
  return &_impl_.fills_;
}
inline const ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill& MatchPerpetualDeleveraging::_internal_fills(int index) const {
  return _impl_.fills_.Get(index);
}
inline const ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill& MatchPerpetualDeleveraging::fills(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MatchPerpetualDeleveraging.fills)
  return _internal_fills(index);
}
inline ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill* MatchPerpetualDeleveraging::_internal_add_fills() {
  return _impl_.fills_.Add();
}
inline ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill* MatchPerpetualDeleveraging::add_fills() {
  ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill* _add = _internal_add_fills();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.MatchPerpetualDeleveraging.fills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill >&
MatchPerpetualDeleveraging::fills() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.MatchPerpetualDeleveraging.fills)
  return _impl_.fills_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace clob
}  // namespace dydxprotocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fmatches_2eproto
