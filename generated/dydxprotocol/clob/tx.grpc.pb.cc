// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dydxprotocol/clob/tx.proto

#include "dydxprotocol/clob/tx.pb.h"
#include "dydxprotocol/clob/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dydxprotocol {
namespace clob {

static const char* Msg_method_names[] = {
  "/dydxprotocol.clob.Msg/ProposedOperations",
  "/dydxprotocol.clob.Msg/PlaceOrder",
  "/dydxprotocol.clob.Msg/CancelOrder",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ProposedOperations_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlaceOrder_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOrder_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::ProposedOperations(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgProposedOperations& request, ::dydxprotocol::clob::MsgProposedOperationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dydxprotocol::clob::MsgProposedOperations, ::dydxprotocol::clob::MsgProposedOperationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProposedOperations_, context, request, response);
}

void Msg::Stub::async::ProposedOperations(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgProposedOperations* request, ::dydxprotocol::clob::MsgProposedOperationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dydxprotocol::clob::MsgProposedOperations, ::dydxprotocol::clob::MsgProposedOperationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProposedOperations_, context, request, response, std::move(f));
}

void Msg::Stub::async::ProposedOperations(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgProposedOperations* request, ::dydxprotocol::clob::MsgProposedOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProposedOperations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dydxprotocol::clob::MsgProposedOperationsResponse>* Msg::Stub::PrepareAsyncProposedOperationsRaw(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgProposedOperations& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dydxprotocol::clob::MsgProposedOperationsResponse, ::dydxprotocol::clob::MsgProposedOperations, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProposedOperations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dydxprotocol::clob::MsgProposedOperationsResponse>* Msg::Stub::AsyncProposedOperationsRaw(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgProposedOperations& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProposedOperationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::PlaceOrder(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgPlaceOrder& request, ::dydxprotocol::clob::MsgPlaceOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dydxprotocol::clob::MsgPlaceOrder, ::dydxprotocol::clob::MsgPlaceOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlaceOrder_, context, request, response);
}

void Msg::Stub::async::PlaceOrder(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgPlaceOrder* request, ::dydxprotocol::clob::MsgPlaceOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dydxprotocol::clob::MsgPlaceOrder, ::dydxprotocol::clob::MsgPlaceOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlaceOrder_, context, request, response, std::move(f));
}

void Msg::Stub::async::PlaceOrder(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgPlaceOrder* request, ::dydxprotocol::clob::MsgPlaceOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlaceOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dydxprotocol::clob::MsgPlaceOrderResponse>* Msg::Stub::PrepareAsyncPlaceOrderRaw(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgPlaceOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dydxprotocol::clob::MsgPlaceOrderResponse, ::dydxprotocol::clob::MsgPlaceOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlaceOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dydxprotocol::clob::MsgPlaceOrderResponse>* Msg::Stub::AsyncPlaceOrderRaw(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgPlaceOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlaceOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CancelOrder(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgCancelOrder& request, ::dydxprotocol::clob::MsgCancelOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dydxprotocol::clob::MsgCancelOrder, ::dydxprotocol::clob::MsgCancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelOrder_, context, request, response);
}

void Msg::Stub::async::CancelOrder(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgCancelOrder* request, ::dydxprotocol::clob::MsgCancelOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dydxprotocol::clob::MsgCancelOrder, ::dydxprotocol::clob::MsgCancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, std::move(f));
}

void Msg::Stub::async::CancelOrder(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgCancelOrder* request, ::dydxprotocol::clob::MsgCancelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dydxprotocol::clob::MsgCancelOrderResponse>* Msg::Stub::PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgCancelOrder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dydxprotocol::clob::MsgCancelOrderResponse, ::dydxprotocol::clob::MsgCancelOrder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dydxprotocol::clob::MsgCancelOrderResponse>* Msg::Stub::AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::dydxprotocol::clob::MsgCancelOrder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::dydxprotocol::clob::MsgProposedOperations, ::dydxprotocol::clob::MsgProposedOperationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dydxprotocol::clob::MsgProposedOperations* req,
             ::dydxprotocol::clob::MsgProposedOperationsResponse* resp) {
               return service->ProposedOperations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::dydxprotocol::clob::MsgPlaceOrder, ::dydxprotocol::clob::MsgPlaceOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dydxprotocol::clob::MsgPlaceOrder* req,
             ::dydxprotocol::clob::MsgPlaceOrderResponse* resp) {
               return service->PlaceOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::dydxprotocol::clob::MsgCancelOrder, ::dydxprotocol::clob::MsgCancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dydxprotocol::clob::MsgCancelOrder* req,
             ::dydxprotocol::clob::MsgCancelOrderResponse* resp) {
               return service->CancelOrder(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::ProposedOperations(::grpc::ServerContext* context, const ::dydxprotocol::clob::MsgProposedOperations* request, ::dydxprotocol::clob::MsgProposedOperationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::PlaceOrder(::grpc::ServerContext* context, const ::dydxprotocol::clob::MsgPlaceOrder* request, ::dydxprotocol::clob::MsgPlaceOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CancelOrder(::grpc::ServerContext* context, const ::dydxprotocol::clob::MsgCancelOrder* request, ::dydxprotocol::clob::MsgCancelOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dydxprotocol
}  // namespace clob

