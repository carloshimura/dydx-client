// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/matches.proto

#include "dydxprotocol/clob/matches.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dydxprotocol {
namespace clob {
PROTOBUF_CONSTEXPR ClobMatch::ClobMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.match_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ClobMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClobMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClobMatchDefaultTypeInternal() {}
  union {
    ClobMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClobMatchDefaultTypeInternal _ClobMatch_default_instance_;
PROTOBUF_CONSTEXPR MakerFill::MakerFill(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maker_order_id_)*/nullptr
  , /*decltype(_impl_.fill_amount_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MakerFillDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MakerFillDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MakerFillDefaultTypeInternal() {}
  union {
    MakerFill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MakerFillDefaultTypeInternal _MakerFill_default_instance_;
PROTOBUF_CONSTEXPR MatchOrders::MatchOrders(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fills_)*/{}
  , /*decltype(_impl_.taker_order_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchOrdersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchOrdersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchOrdersDefaultTypeInternal() {}
  union {
    MatchOrders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchOrdersDefaultTypeInternal _MatchOrders_default_instance_;
PROTOBUF_CONSTEXPR MatchPerpetualLiquidation::MatchPerpetualLiquidation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fills_)*/{}
  , /*decltype(_impl_.liquidated_)*/nullptr
  , /*decltype(_impl_.clob_pair_id_)*/0u
  , /*decltype(_impl_.perpetual_id_)*/0u
  , /*decltype(_impl_.total_size_)*/uint64_t{0u}
  , /*decltype(_impl_.is_buy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchPerpetualLiquidationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchPerpetualLiquidationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchPerpetualLiquidationDefaultTypeInternal() {}
  union {
    MatchPerpetualLiquidation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchPerpetualLiquidationDefaultTypeInternal _MatchPerpetualLiquidation_default_instance_;
PROTOBUF_CONSTEXPR MatchPerpetualDeleveraging_Fill::MatchPerpetualDeleveraging_Fill(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.offsetting_subaccount_id_)*/nullptr
  , /*decltype(_impl_.fill_amount_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchPerpetualDeleveraging_FillDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchPerpetualDeleveraging_FillDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchPerpetualDeleveraging_FillDefaultTypeInternal() {}
  union {
    MatchPerpetualDeleveraging_Fill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchPerpetualDeleveraging_FillDefaultTypeInternal _MatchPerpetualDeleveraging_Fill_default_instance_;
PROTOBUF_CONSTEXPR MatchPerpetualDeleveraging::MatchPerpetualDeleveraging(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fills_)*/{}
  , /*decltype(_impl_.liquidated_)*/nullptr
  , /*decltype(_impl_.perpetual_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchPerpetualDeleveragingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchPerpetualDeleveragingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchPerpetualDeleveragingDefaultTypeInternal() {}
  union {
    MatchPerpetualDeleveraging _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchPerpetualDeleveragingDefaultTypeInternal _MatchPerpetualDeleveraging_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fclob_2fmatches_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dydxprotocol_2fclob_2fmatches_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dydxprotocol_2fclob_2fmatches_2eproto = nullptr;

const uint32_t TableStruct_dydxprotocol_2fclob_2fmatches_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobMatch, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobMatch, _impl_.match_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MakerFill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MakerFill, _impl_.fill_amount_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MakerFill, _impl_.maker_order_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchOrders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchOrders, _impl_.taker_order_id_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchOrders, _impl_.fills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualLiquidation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualLiquidation, _impl_.liquidated_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualLiquidation, _impl_.clob_pair_id_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualLiquidation, _impl_.perpetual_id_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualLiquidation, _impl_.total_size_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualLiquidation, _impl_.is_buy_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualLiquidation, _impl_.fills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill, _impl_.offsetting_subaccount_id_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill, _impl_.fill_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualDeleveraging, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualDeleveraging, _impl_.liquidated_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualDeleveraging, _impl_.perpetual_id_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MatchPerpetualDeleveraging, _impl_.fills_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dydxprotocol::clob::ClobMatch)},
  { 10, -1, -1, sizeof(::dydxprotocol::clob::MakerFill)},
  { 18, -1, -1, sizeof(::dydxprotocol::clob::MatchOrders)},
  { 26, -1, -1, sizeof(::dydxprotocol::clob::MatchPerpetualLiquidation)},
  { 38, -1, -1, sizeof(::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill)},
  { 46, -1, -1, sizeof(::dydxprotocol::clob::MatchPerpetualDeleveraging)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dydxprotocol::clob::_ClobMatch_default_instance_._instance,
  &::dydxprotocol::clob::_MakerFill_default_instance_._instance,
  &::dydxprotocol::clob::_MatchOrders_default_instance_._instance,
  &::dydxprotocol::clob::_MatchPerpetualLiquidation_default_instance_._instance,
  &::dydxprotocol::clob::_MatchPerpetualDeleveraging_Fill_default_instance_._instance,
  &::dydxprotocol::clob::_MatchPerpetualDeleveraging_default_instance_._instance,
};

const char descriptor_table_protodef_dydxprotocol_2fclob_2fmatches_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037dydxprotocol/clob/matches.proto\022\021dydxp"
  "rotocol.clob\032\024gogoproto/gogo.proto\032)dydx"
  "protocol/subaccounts/subaccount.proto\032\035d"
  "ydxprotocol/clob/order.proto\"\370\001\n\tClobMat"
  "ch\0226\n\014match_orders\030\001 \001(\0132\036.dydxprotocol."
  "clob.MatchOrdersH\000\022S\n\033match_perpetual_li"
  "quidation\030\002 \001(\0132,.dydxprotocol.clob.Matc"
  "hPerpetualLiquidationH\000\022U\n\034match_perpetu"
  "al_deleveraging\030\003 \001(\0132-.dydxprotocol.clo"
  "b.MatchPerpetualDeleveragingH\000B\007\n\005match\""
  "Z\n\tMakerFill\022\023\n\013fill_amount\030\001 \001(\004\0228\n\016mak"
  "er_order_id\030\002 \001(\0132\032.dydxprotocol.clob.Or"
  "derIdB\004\310\336\037\000\"z\n\013MatchOrders\0228\n\016taker_orde"
  "r_id\030\001 \001(\0132\032.dydxprotocol.clob.OrderIdB\004"
  "\310\336\037\000\0221\n\005fills\030\002 \003(\0132\034.dydxprotocol.clob."
  "MakerFillB\004\310\336\037\000\"\340\001\n\031MatchPerpetualLiquid"
  "ation\022@\n\nliquidated\030\001 \001(\0132&.dydxprotocol"
  ".subaccounts.SubaccountIdB\004\310\336\037\000\022\024\n\014clob_"
  "pair_id\030\002 \001(\r\022\024\n\014perpetual_id\030\003 \001(\r\022\022\n\nt"
  "otal_size\030\004 \001(\004\022\016\n\006is_buy\030\005 \001(\010\0221\n\005fills"
  "\030\006 \003(\0132\034.dydxprotocol.clob.MakerFillB\004\310\336"
  "\037\000\"\252\002\n\032MatchPerpetualDeleveraging\022@\n\nliq"
  "uidated\030\001 \001(\0132&.dydxprotocol.subaccounts"
  ".SubaccountIdB\004\310\336\037\000\022\024\n\014perpetual_id\030\002 \001("
  "\r\022G\n\005fills\030\003 \003(\01322.dydxprotocol.clob.Mat"
  "chPerpetualDeleveraging.FillB\004\310\336\037\000\032k\n\004Fi"
  "ll\022N\n\030offsetting_subaccount_id\030\001 \001(\0132&.d"
  "ydxprotocol.subaccounts.SubaccountIdB\004\310\336"
  "\037\000\022\023\n\013fill_amount\030\002 \001(\004B8Z6github.com/dy"
  "dxprotocol/v4-chain/protocol/x/clob/type"
  "sb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_deps[3] = {
  &::descriptor_table_dydxprotocol_2fclob_2forder_2eproto,
  &::descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto,
  &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::_pbi::once_flag descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto = {
    false, false, 1209, descriptor_table_protodef_dydxprotocol_2fclob_2fmatches_2eproto,
    "dydxprotocol/clob/matches.proto",
    &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_once, descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_deps, 3, 6,
    schemas, file_default_instances, TableStruct_dydxprotocol_2fclob_2fmatches_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fclob_2fmatches_2eproto, file_level_enum_descriptors_dydxprotocol_2fclob_2fmatches_2eproto,
    file_level_service_descriptors_dydxprotocol_2fclob_2fmatches_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fclob_2fmatches_2eproto(&descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto);
namespace dydxprotocol {
namespace clob {

// ===================================================================

class ClobMatch::_Internal {
 public:
  static const ::dydxprotocol::clob::MatchOrders& match_orders(const ClobMatch* msg);
  static const ::dydxprotocol::clob::MatchPerpetualLiquidation& match_perpetual_liquidation(const ClobMatch* msg);
  static const ::dydxprotocol::clob::MatchPerpetualDeleveraging& match_perpetual_deleveraging(const ClobMatch* msg);
};

const ::dydxprotocol::clob::MatchOrders&
ClobMatch::_Internal::match_orders(const ClobMatch* msg) {
  return *msg->_impl_.match_.match_orders_;
}
const ::dydxprotocol::clob::MatchPerpetualLiquidation&
ClobMatch::_Internal::match_perpetual_liquidation(const ClobMatch* msg) {
  return *msg->_impl_.match_.match_perpetual_liquidation_;
}
const ::dydxprotocol::clob::MatchPerpetualDeleveraging&
ClobMatch::_Internal::match_perpetual_deleveraging(const ClobMatch* msg) {
  return *msg->_impl_.match_.match_perpetual_deleveraging_;
}
void ClobMatch::set_allocated_match_orders(::dydxprotocol::clob::MatchOrders* match_orders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_match();
  if (match_orders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(match_orders);
    if (message_arena != submessage_arena) {
      match_orders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_orders, submessage_arena);
    }
    set_has_match_orders();
    _impl_.match_.match_orders_ = match_orders;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.ClobMatch.match_orders)
}
void ClobMatch::set_allocated_match_perpetual_liquidation(::dydxprotocol::clob::MatchPerpetualLiquidation* match_perpetual_liquidation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_match();
  if (match_perpetual_liquidation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(match_perpetual_liquidation);
    if (message_arena != submessage_arena) {
      match_perpetual_liquidation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_perpetual_liquidation, submessage_arena);
    }
    set_has_match_perpetual_liquidation();
    _impl_.match_.match_perpetual_liquidation_ = match_perpetual_liquidation;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.ClobMatch.match_perpetual_liquidation)
}
void ClobMatch::set_allocated_match_perpetual_deleveraging(::dydxprotocol::clob::MatchPerpetualDeleveraging* match_perpetual_deleveraging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_match();
  if (match_perpetual_deleveraging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(match_perpetual_deleveraging);
    if (message_arena != submessage_arena) {
      match_perpetual_deleveraging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_perpetual_deleveraging, submessage_arena);
    }
    set_has_match_perpetual_deleveraging();
    _impl_.match_.match_perpetual_deleveraging_ = match_perpetual_deleveraging;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.ClobMatch.match_perpetual_deleveraging)
}
ClobMatch::ClobMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.ClobMatch)
}
ClobMatch::ClobMatch(const ClobMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClobMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.match_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_match();
  switch (from.match_case()) {
    case kMatchOrders: {
      _this->_internal_mutable_match_orders()->::dydxprotocol::clob::MatchOrders::MergeFrom(
          from._internal_match_orders());
      break;
    }
    case kMatchPerpetualLiquidation: {
      _this->_internal_mutable_match_perpetual_liquidation()->::dydxprotocol::clob::MatchPerpetualLiquidation::MergeFrom(
          from._internal_match_perpetual_liquidation());
      break;
    }
    case kMatchPerpetualDeleveraging: {
      _this->_internal_mutable_match_perpetual_deleveraging()->::dydxprotocol::clob::MatchPerpetualDeleveraging::MergeFrom(
          from._internal_match_perpetual_deleveraging());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.ClobMatch)
}

inline void ClobMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.match_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_match();
}

ClobMatch::~ClobMatch() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.ClobMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClobMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_match()) {
    clear_match();
  }
}

void ClobMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClobMatch::clear_match() {
// @@protoc_insertion_point(one_of_clear_start:dydxprotocol.clob.ClobMatch)
  switch (match_case()) {
    case kMatchOrders: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.match_.match_orders_;
      }
      break;
    }
    case kMatchPerpetualLiquidation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.match_.match_perpetual_liquidation_;
      }
      break;
    }
    case kMatchPerpetualDeleveraging: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.match_.match_perpetual_deleveraging_;
      }
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MATCH_NOT_SET;
}


void ClobMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.ClobMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_match();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClobMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.MatchOrders match_orders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_orders(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dydxprotocol.clob.MatchPerpetualLiquidation match_perpetual_liquidation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_perpetual_liquidation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dydxprotocol.clob.MatchPerpetualDeleveraging match_perpetual_deleveraging = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_perpetual_deleveraging(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClobMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.ClobMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dydxprotocol.clob.MatchOrders match_orders = 1;
  if (_internal_has_match_orders()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::match_orders(this),
        _Internal::match_orders(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.clob.MatchPerpetualLiquidation match_perpetual_liquidation = 2;
  if (_internal_has_match_perpetual_liquidation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::match_perpetual_liquidation(this),
        _Internal::match_perpetual_liquidation(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.clob.MatchPerpetualDeleveraging match_perpetual_deleveraging = 3;
  if (_internal_has_match_perpetual_deleveraging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::match_perpetual_deleveraging(this),
        _Internal::match_perpetual_deleveraging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.ClobMatch)
  return target;
}

size_t ClobMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.ClobMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (match_case()) {
    // .dydxprotocol.clob.MatchOrders match_orders = 1;
    case kMatchOrders: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.match_.match_orders_);
      break;
    }
    // .dydxprotocol.clob.MatchPerpetualLiquidation match_perpetual_liquidation = 2;
    case kMatchPerpetualLiquidation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.match_.match_perpetual_liquidation_);
      break;
    }
    // .dydxprotocol.clob.MatchPerpetualDeleveraging match_perpetual_deleveraging = 3;
    case kMatchPerpetualDeleveraging: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.match_.match_perpetual_deleveraging_);
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClobMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClobMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClobMatch::GetClassData() const { return &_class_data_; }


void ClobMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClobMatch*>(&to_msg);
  auto& from = static_cast<const ClobMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.ClobMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.match_case()) {
    case kMatchOrders: {
      _this->_internal_mutable_match_orders()->::dydxprotocol::clob::MatchOrders::MergeFrom(
          from._internal_match_orders());
      break;
    }
    case kMatchPerpetualLiquidation: {
      _this->_internal_mutable_match_perpetual_liquidation()->::dydxprotocol::clob::MatchPerpetualLiquidation::MergeFrom(
          from._internal_match_perpetual_liquidation());
      break;
    }
    case kMatchPerpetualDeleveraging: {
      _this->_internal_mutable_match_perpetual_deleveraging()->::dydxprotocol::clob::MatchPerpetualDeleveraging::MergeFrom(
          from._internal_match_perpetual_deleveraging());
      break;
    }
    case MATCH_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClobMatch::CopyFrom(const ClobMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.ClobMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClobMatch::IsInitialized() const {
  return true;
}

void ClobMatch::InternalSwap(ClobMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.match_, other->_impl_.match_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClobMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fmatches_2eproto[0]);
}

// ===================================================================

class MakerFill::_Internal {
 public:
  static const ::dydxprotocol::clob::OrderId& maker_order_id(const MakerFill* msg);
};

const ::dydxprotocol::clob::OrderId&
MakerFill::_Internal::maker_order_id(const MakerFill* msg) {
  return *msg->_impl_.maker_order_id_;
}
void MakerFill::clear_maker_order_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.maker_order_id_ != nullptr) {
    delete _impl_.maker_order_id_;
  }
  _impl_.maker_order_id_ = nullptr;
}
MakerFill::MakerFill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MakerFill)
}
MakerFill::MakerFill(const MakerFill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MakerFill* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.maker_order_id_){nullptr}
    , decltype(_impl_.fill_amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_maker_order_id()) {
    _this->_impl_.maker_order_id_ = new ::dydxprotocol::clob::OrderId(*from._impl_.maker_order_id_);
  }
  _this->_impl_.fill_amount_ = from._impl_.fill_amount_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MakerFill)
}

inline void MakerFill::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.maker_order_id_){nullptr}
    , decltype(_impl_.fill_amount_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MakerFill::~MakerFill() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MakerFill)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MakerFill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.maker_order_id_;
}

void MakerFill::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MakerFill::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MakerFill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.maker_order_id_ != nullptr) {
    delete _impl_.maker_order_id_;
  }
  _impl_.maker_order_id_ = nullptr;
  _impl_.fill_amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MakerFill::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 fill_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fill_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dydxprotocol.clob.OrderId maker_order_id = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_maker_order_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MakerFill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MakerFill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 fill_amount = 1;
  if (this->_internal_fill_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_fill_amount(), target);
  }

  // .dydxprotocol.clob.OrderId maker_order_id = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_maker_order_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::maker_order_id(this),
        _Internal::maker_order_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MakerFill)
  return target;
}

size_t MakerFill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MakerFill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.clob.OrderId maker_order_id = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_maker_order_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maker_order_id_);
  }

  // uint64 fill_amount = 1;
  if (this->_internal_fill_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fill_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MakerFill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MakerFill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MakerFill::GetClassData() const { return &_class_data_; }


void MakerFill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MakerFill*>(&to_msg);
  auto& from = static_cast<const MakerFill&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MakerFill)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_maker_order_id()) {
    _this->_internal_mutable_maker_order_id()->::dydxprotocol::clob::OrderId::MergeFrom(
        from._internal_maker_order_id());
  }
  if (from._internal_fill_amount() != 0) {
    _this->_internal_set_fill_amount(from._internal_fill_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MakerFill::CopyFrom(const MakerFill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MakerFill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakerFill::IsInitialized() const {
  return true;
}

void MakerFill::InternalSwap(MakerFill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MakerFill, _impl_.fill_amount_)
      + sizeof(MakerFill::_impl_.fill_amount_)
      - PROTOBUF_FIELD_OFFSET(MakerFill, _impl_.maker_order_id_)>(
          reinterpret_cast<char*>(&_impl_.maker_order_id_),
          reinterpret_cast<char*>(&other->_impl_.maker_order_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MakerFill::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fmatches_2eproto[1]);
}

// ===================================================================

class MatchOrders::_Internal {
 public:
  static const ::dydxprotocol::clob::OrderId& taker_order_id(const MatchOrders* msg);
};

const ::dydxprotocol::clob::OrderId&
MatchOrders::_Internal::taker_order_id(const MatchOrders* msg) {
  return *msg->_impl_.taker_order_id_;
}
void MatchOrders::clear_taker_order_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.taker_order_id_ != nullptr) {
    delete _impl_.taker_order_id_;
  }
  _impl_.taker_order_id_ = nullptr;
}
MatchOrders::MatchOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MatchOrders)
}
MatchOrders::MatchOrders(const MatchOrders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchOrders* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fills_){from._impl_.fills_}
    , decltype(_impl_.taker_order_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_taker_order_id()) {
    _this->_impl_.taker_order_id_ = new ::dydxprotocol::clob::OrderId(*from._impl_.taker_order_id_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MatchOrders)
}

inline void MatchOrders::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fills_){arena}
    , decltype(_impl_.taker_order_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MatchOrders::~MatchOrders() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MatchOrders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchOrders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fills_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.taker_order_id_;
}

void MatchOrders::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MatchOrders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fills_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.taker_order_id_ != nullptr) {
    delete _impl_.taker_order_id_;
  }
  _impl_.taker_order_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchOrders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.OrderId taker_order_id = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_taker_order_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dydxprotocol.clob.MakerFill fills = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchOrders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MatchOrders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dydxprotocol.clob.OrderId taker_order_id = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_taker_order_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::taker_order_id(this),
        _Internal::taker_order_id(this).GetCachedSize(), target, stream);
  }

  // repeated .dydxprotocol.clob.MakerFill fills = 2 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fills_size()); i < n; i++) {
    const auto& repfield = this->_internal_fills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MatchOrders)
  return target;
}

size_t MatchOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MatchOrders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.MakerFill fills = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_fills_size();
  for (const auto& msg : this->_impl_.fills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dydxprotocol.clob.OrderId taker_order_id = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_taker_order_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.taker_order_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchOrders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchOrders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchOrders::GetClassData() const { return &_class_data_; }


void MatchOrders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchOrders*>(&to_msg);
  auto& from = static_cast<const MatchOrders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MatchOrders)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fills_.MergeFrom(from._impl_.fills_);
  if (from._internal_has_taker_order_id()) {
    _this->_internal_mutable_taker_order_id()->::dydxprotocol::clob::OrderId::MergeFrom(
        from._internal_taker_order_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchOrders::CopyFrom(const MatchOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MatchOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchOrders::IsInitialized() const {
  return true;
}

void MatchOrders::InternalSwap(MatchOrders* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fills_.InternalSwap(&other->_impl_.fills_);
  swap(_impl_.taker_order_id_, other->_impl_.taker_order_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchOrders::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fmatches_2eproto[2]);
}

// ===================================================================

class MatchPerpetualLiquidation::_Internal {
 public:
  static const ::dydxprotocol::subaccounts::SubaccountId& liquidated(const MatchPerpetualLiquidation* msg);
};

const ::dydxprotocol::subaccounts::SubaccountId&
MatchPerpetualLiquidation::_Internal::liquidated(const MatchPerpetualLiquidation* msg) {
  return *msg->_impl_.liquidated_;
}
void MatchPerpetualLiquidation::clear_liquidated() {
  if (GetArenaForAllocation() == nullptr && _impl_.liquidated_ != nullptr) {
    delete _impl_.liquidated_;
  }
  _impl_.liquidated_ = nullptr;
}
MatchPerpetualLiquidation::MatchPerpetualLiquidation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MatchPerpetualLiquidation)
}
MatchPerpetualLiquidation::MatchPerpetualLiquidation(const MatchPerpetualLiquidation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchPerpetualLiquidation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fills_){from._impl_.fills_}
    , decltype(_impl_.liquidated_){nullptr}
    , decltype(_impl_.clob_pair_id_){}
    , decltype(_impl_.perpetual_id_){}
    , decltype(_impl_.total_size_){}
    , decltype(_impl_.is_buy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_liquidated()) {
    _this->_impl_.liquidated_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.liquidated_);
  }
  ::memcpy(&_impl_.clob_pair_id_, &from._impl_.clob_pair_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_buy_) -
    reinterpret_cast<char*>(&_impl_.clob_pair_id_)) + sizeof(_impl_.is_buy_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MatchPerpetualLiquidation)
}

inline void MatchPerpetualLiquidation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fills_){arena}
    , decltype(_impl_.liquidated_){nullptr}
    , decltype(_impl_.clob_pair_id_){0u}
    , decltype(_impl_.perpetual_id_){0u}
    , decltype(_impl_.total_size_){uint64_t{0u}}
    , decltype(_impl_.is_buy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MatchPerpetualLiquidation::~MatchPerpetualLiquidation() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MatchPerpetualLiquidation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchPerpetualLiquidation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fills_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.liquidated_;
}

void MatchPerpetualLiquidation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchPerpetualLiquidation::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MatchPerpetualLiquidation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fills_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.liquidated_ != nullptr) {
    delete _impl_.liquidated_;
  }
  _impl_.liquidated_ = nullptr;
  ::memset(&_impl_.clob_pair_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_buy_) -
      reinterpret_cast<char*>(&_impl_.clob_pair_id_)) + sizeof(_impl_.is_buy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchPerpetualLiquidation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.subaccounts.SubaccountId liquidated = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquidated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 clob_pair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.clob_pair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 perpetual_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.perpetual_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.total_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_buy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dydxprotocol.clob.MakerFill fills = 6 [(.gogoproto.nullable) = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchPerpetualLiquidation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MatchPerpetualLiquidation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dydxprotocol.subaccounts.SubaccountId liquidated = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_liquidated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::liquidated(this),
        _Internal::liquidated(this).GetCachedSize(), target, stream);
  }

  // uint32 clob_pair_id = 2;
  if (this->_internal_clob_pair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_clob_pair_id(), target);
  }

  // uint32 perpetual_id = 3;
  if (this->_internal_perpetual_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_perpetual_id(), target);
  }

  // uint64 total_size = 4;
  if (this->_internal_total_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_total_size(), target);
  }

  // bool is_buy = 5;
  if (this->_internal_is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_buy(), target);
  }

  // repeated .dydxprotocol.clob.MakerFill fills = 6 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fills_size()); i < n; i++) {
    const auto& repfield = this->_internal_fills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MatchPerpetualLiquidation)
  return target;
}

size_t MatchPerpetualLiquidation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MatchPerpetualLiquidation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.MakerFill fills = 6 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_fills_size();
  for (const auto& msg : this->_impl_.fills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dydxprotocol.subaccounts.SubaccountId liquidated = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_liquidated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.liquidated_);
  }

  // uint32 clob_pair_id = 2;
  if (this->_internal_clob_pair_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clob_pair_id());
  }

  // uint32 perpetual_id = 3;
  if (this->_internal_perpetual_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_perpetual_id());
  }

  // uint64 total_size = 4;
  if (this->_internal_total_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_size());
  }

  // bool is_buy = 5;
  if (this->_internal_is_buy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchPerpetualLiquidation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchPerpetualLiquidation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchPerpetualLiquidation::GetClassData() const { return &_class_data_; }


void MatchPerpetualLiquidation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchPerpetualLiquidation*>(&to_msg);
  auto& from = static_cast<const MatchPerpetualLiquidation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MatchPerpetualLiquidation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fills_.MergeFrom(from._impl_.fills_);
  if (from._internal_has_liquidated()) {
    _this->_internal_mutable_liquidated()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
        from._internal_liquidated());
  }
  if (from._internal_clob_pair_id() != 0) {
    _this->_internal_set_clob_pair_id(from._internal_clob_pair_id());
  }
  if (from._internal_perpetual_id() != 0) {
    _this->_internal_set_perpetual_id(from._internal_perpetual_id());
  }
  if (from._internal_total_size() != 0) {
    _this->_internal_set_total_size(from._internal_total_size());
  }
  if (from._internal_is_buy() != 0) {
    _this->_internal_set_is_buy(from._internal_is_buy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchPerpetualLiquidation::CopyFrom(const MatchPerpetualLiquidation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MatchPerpetualLiquidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPerpetualLiquidation::IsInitialized() const {
  return true;
}

void MatchPerpetualLiquidation::InternalSwap(MatchPerpetualLiquidation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fills_.InternalSwap(&other->_impl_.fills_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchPerpetualLiquidation, _impl_.is_buy_)
      + sizeof(MatchPerpetualLiquidation::_impl_.is_buy_)
      - PROTOBUF_FIELD_OFFSET(MatchPerpetualLiquidation, _impl_.liquidated_)>(
          reinterpret_cast<char*>(&_impl_.liquidated_),
          reinterpret_cast<char*>(&other->_impl_.liquidated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchPerpetualLiquidation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fmatches_2eproto[3]);
}

// ===================================================================

class MatchPerpetualDeleveraging_Fill::_Internal {
 public:
  static const ::dydxprotocol::subaccounts::SubaccountId& offsetting_subaccount_id(const MatchPerpetualDeleveraging_Fill* msg);
};

const ::dydxprotocol::subaccounts::SubaccountId&
MatchPerpetualDeleveraging_Fill::_Internal::offsetting_subaccount_id(const MatchPerpetualDeleveraging_Fill* msg) {
  return *msg->_impl_.offsetting_subaccount_id_;
}
void MatchPerpetualDeleveraging_Fill::clear_offsetting_subaccount_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.offsetting_subaccount_id_ != nullptr) {
    delete _impl_.offsetting_subaccount_id_;
  }
  _impl_.offsetting_subaccount_id_ = nullptr;
}
MatchPerpetualDeleveraging_Fill::MatchPerpetualDeleveraging_Fill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill)
}
MatchPerpetualDeleveraging_Fill::MatchPerpetualDeleveraging_Fill(const MatchPerpetualDeleveraging_Fill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchPerpetualDeleveraging_Fill* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.offsetting_subaccount_id_){nullptr}
    , decltype(_impl_.fill_amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offsetting_subaccount_id()) {
    _this->_impl_.offsetting_subaccount_id_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.offsetting_subaccount_id_);
  }
  _this->_impl_.fill_amount_ = from._impl_.fill_amount_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill)
}

inline void MatchPerpetualDeleveraging_Fill::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.offsetting_subaccount_id_){nullptr}
    , decltype(_impl_.fill_amount_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MatchPerpetualDeleveraging_Fill::~MatchPerpetualDeleveraging_Fill() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchPerpetualDeleveraging_Fill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.offsetting_subaccount_id_;
}

void MatchPerpetualDeleveraging_Fill::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchPerpetualDeleveraging_Fill::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.offsetting_subaccount_id_ != nullptr) {
    delete _impl_.offsetting_subaccount_id_;
  }
  _impl_.offsetting_subaccount_id_ = nullptr;
  _impl_.fill_amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchPerpetualDeleveraging_Fill::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.subaccounts.SubaccountId offsetting_subaccount_id = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offsetting_subaccount_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fill_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.fill_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchPerpetualDeleveraging_Fill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dydxprotocol.subaccounts.SubaccountId offsetting_subaccount_id = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_offsetting_subaccount_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::offsetting_subaccount_id(this),
        _Internal::offsetting_subaccount_id(this).GetCachedSize(), target, stream);
  }

  // uint64 fill_amount = 2;
  if (this->_internal_fill_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_fill_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill)
  return target;
}

size_t MatchPerpetualDeleveraging_Fill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.subaccounts.SubaccountId offsetting_subaccount_id = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_offsetting_subaccount_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.offsetting_subaccount_id_);
  }

  // uint64 fill_amount = 2;
  if (this->_internal_fill_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fill_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchPerpetualDeleveraging_Fill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchPerpetualDeleveraging_Fill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchPerpetualDeleveraging_Fill::GetClassData() const { return &_class_data_; }


void MatchPerpetualDeleveraging_Fill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchPerpetualDeleveraging_Fill*>(&to_msg);
  auto& from = static_cast<const MatchPerpetualDeleveraging_Fill&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_offsetting_subaccount_id()) {
    _this->_internal_mutable_offsetting_subaccount_id()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
        from._internal_offsetting_subaccount_id());
  }
  if (from._internal_fill_amount() != 0) {
    _this->_internal_set_fill_amount(from._internal_fill_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchPerpetualDeleveraging_Fill::CopyFrom(const MatchPerpetualDeleveraging_Fill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MatchPerpetualDeleveraging.Fill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPerpetualDeleveraging_Fill::IsInitialized() const {
  return true;
}

void MatchPerpetualDeleveraging_Fill::InternalSwap(MatchPerpetualDeleveraging_Fill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchPerpetualDeleveraging_Fill, _impl_.fill_amount_)
      + sizeof(MatchPerpetualDeleveraging_Fill::_impl_.fill_amount_)
      - PROTOBUF_FIELD_OFFSET(MatchPerpetualDeleveraging_Fill, _impl_.offsetting_subaccount_id_)>(
          reinterpret_cast<char*>(&_impl_.offsetting_subaccount_id_),
          reinterpret_cast<char*>(&other->_impl_.offsetting_subaccount_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchPerpetualDeleveraging_Fill::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fmatches_2eproto[4]);
}

// ===================================================================

class MatchPerpetualDeleveraging::_Internal {
 public:
  static const ::dydxprotocol::subaccounts::SubaccountId& liquidated(const MatchPerpetualDeleveraging* msg);
};

const ::dydxprotocol::subaccounts::SubaccountId&
MatchPerpetualDeleveraging::_Internal::liquidated(const MatchPerpetualDeleveraging* msg) {
  return *msg->_impl_.liquidated_;
}
void MatchPerpetualDeleveraging::clear_liquidated() {
  if (GetArenaForAllocation() == nullptr && _impl_.liquidated_ != nullptr) {
    delete _impl_.liquidated_;
  }
  _impl_.liquidated_ = nullptr;
}
MatchPerpetualDeleveraging::MatchPerpetualDeleveraging(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MatchPerpetualDeleveraging)
}
MatchPerpetualDeleveraging::MatchPerpetualDeleveraging(const MatchPerpetualDeleveraging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchPerpetualDeleveraging* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fills_){from._impl_.fills_}
    , decltype(_impl_.liquidated_){nullptr}
    , decltype(_impl_.perpetual_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_liquidated()) {
    _this->_impl_.liquidated_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.liquidated_);
  }
  _this->_impl_.perpetual_id_ = from._impl_.perpetual_id_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MatchPerpetualDeleveraging)
}

inline void MatchPerpetualDeleveraging::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fills_){arena}
    , decltype(_impl_.liquidated_){nullptr}
    , decltype(_impl_.perpetual_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MatchPerpetualDeleveraging::~MatchPerpetualDeleveraging() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MatchPerpetualDeleveraging)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchPerpetualDeleveraging::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fills_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.liquidated_;
}

void MatchPerpetualDeleveraging::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchPerpetualDeleveraging::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MatchPerpetualDeleveraging)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fills_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.liquidated_ != nullptr) {
    delete _impl_.liquidated_;
  }
  _impl_.liquidated_ = nullptr;
  _impl_.perpetual_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchPerpetualDeleveraging::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.subaccounts.SubaccountId liquidated = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquidated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 perpetual_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.perpetual_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dydxprotocol.clob.MatchPerpetualDeleveraging.Fill fills = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchPerpetualDeleveraging::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MatchPerpetualDeleveraging)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dydxprotocol.subaccounts.SubaccountId liquidated = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_liquidated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::liquidated(this),
        _Internal::liquidated(this).GetCachedSize(), target, stream);
  }

  // uint32 perpetual_id = 2;
  if (this->_internal_perpetual_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_perpetual_id(), target);
  }

  // repeated .dydxprotocol.clob.MatchPerpetualDeleveraging.Fill fills = 3 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fills_size()); i < n; i++) {
    const auto& repfield = this->_internal_fills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MatchPerpetualDeleveraging)
  return target;
}

size_t MatchPerpetualDeleveraging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MatchPerpetualDeleveraging)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.MatchPerpetualDeleveraging.Fill fills = 3 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_fills_size();
  for (const auto& msg : this->_impl_.fills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dydxprotocol.subaccounts.SubaccountId liquidated = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_liquidated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.liquidated_);
  }

  // uint32 perpetual_id = 2;
  if (this->_internal_perpetual_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_perpetual_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchPerpetualDeleveraging::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchPerpetualDeleveraging::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchPerpetualDeleveraging::GetClassData() const { return &_class_data_; }


void MatchPerpetualDeleveraging::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchPerpetualDeleveraging*>(&to_msg);
  auto& from = static_cast<const MatchPerpetualDeleveraging&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MatchPerpetualDeleveraging)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fills_.MergeFrom(from._impl_.fills_);
  if (from._internal_has_liquidated()) {
    _this->_internal_mutable_liquidated()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
        from._internal_liquidated());
  }
  if (from._internal_perpetual_id() != 0) {
    _this->_internal_set_perpetual_id(from._internal_perpetual_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchPerpetualDeleveraging::CopyFrom(const MatchPerpetualDeleveraging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MatchPerpetualDeleveraging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPerpetualDeleveraging::IsInitialized() const {
  return true;
}

void MatchPerpetualDeleveraging::InternalSwap(MatchPerpetualDeleveraging* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fills_.InternalSwap(&other->_impl_.fills_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchPerpetualDeleveraging, _impl_.perpetual_id_)
      + sizeof(MatchPerpetualDeleveraging::_impl_.perpetual_id_)
      - PROTOBUF_FIELD_OFFSET(MatchPerpetualDeleveraging, _impl_.liquidated_)>(
          reinterpret_cast<char*>(&_impl_.liquidated_),
          reinterpret_cast<char*>(&other->_impl_.liquidated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchPerpetualDeleveraging::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fmatches_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::ClobMatch*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::ClobMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::ClobMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MakerFill*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MakerFill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MakerFill >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MatchOrders*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MatchOrders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MatchOrders >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MatchPerpetualLiquidation*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MatchPerpetualLiquidation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MatchPerpetualLiquidation >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MatchPerpetualDeleveraging_Fill >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MatchPerpetualDeleveraging*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MatchPerpetualDeleveraging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MatchPerpetualDeleveraging >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
