// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/order.proto

#include "dydxprotocol/clob/order.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dydxprotocol {
namespace clob {
PROTOBUF_CONSTEXPR OrderId::OrderId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccount_id_)*/nullptr
  , /*decltype(_impl_.client_id_)*/0u
  , /*decltype(_impl_.order_flags_)*/0u
  , /*decltype(_impl_.clob_pair_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderIdDefaultTypeInternal() {}
  union {
    OrderId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderIdDefaultTypeInternal _OrderId_default_instance_;
PROTOBUF_CONSTEXPR OrdersFilledDuringLatestBlock::OrdersFilledDuringLatestBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrdersFilledDuringLatestBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrdersFilledDuringLatestBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrdersFilledDuringLatestBlockDefaultTypeInternal() {}
  union {
    OrdersFilledDuringLatestBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrdersFilledDuringLatestBlockDefaultTypeInternal _OrdersFilledDuringLatestBlock_default_instance_;
PROTOBUF_CONSTEXPR PotentiallyPrunableOrders::PotentiallyPrunableOrders(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PotentiallyPrunableOrdersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PotentiallyPrunableOrdersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PotentiallyPrunableOrdersDefaultTypeInternal() {}
  union {
    PotentiallyPrunableOrders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PotentiallyPrunableOrdersDefaultTypeInternal _PotentiallyPrunableOrders_default_instance_;
PROTOBUF_CONSTEXPR OrderFillState::OrderFillState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fill_amount_)*/uint64_t{0u}
  , /*decltype(_impl_.prunable_block_height_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderFillStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderFillStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderFillStateDefaultTypeInternal() {}
  union {
    OrderFillState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderFillStateDefaultTypeInternal _OrderFillState_default_instance_;
PROTOBUF_CONSTEXPR StatefulOrderTimeSliceValue::StatefulOrderTimeSliceValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatefulOrderTimeSliceValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatefulOrderTimeSliceValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatefulOrderTimeSliceValueDefaultTypeInternal() {}
  union {
    StatefulOrderTimeSliceValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatefulOrderTimeSliceValueDefaultTypeInternal _StatefulOrderTimeSliceValue_default_instance_;
PROTOBUF_CONSTEXPR LongTermOrderPlacement::LongTermOrderPlacement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_)*/nullptr
  , /*decltype(_impl_.placement_index_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LongTermOrderPlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LongTermOrderPlacementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LongTermOrderPlacementDefaultTypeInternal() {}
  union {
    LongTermOrderPlacement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LongTermOrderPlacementDefaultTypeInternal _LongTermOrderPlacement_default_instance_;
PROTOBUF_CONSTEXPR ConditionalOrderPlacement::ConditionalOrderPlacement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_)*/nullptr
  , /*decltype(_impl_.placement_index_)*/nullptr
  , /*decltype(_impl_.trigger_index_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConditionalOrderPlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionalOrderPlacementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionalOrderPlacementDefaultTypeInternal() {}
  union {
    ConditionalOrderPlacement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionalOrderPlacementDefaultTypeInternal _ConditionalOrderPlacement_default_instance_;
PROTOBUF_CONSTEXPR Order::Order(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_id_)*/nullptr
  , /*decltype(_impl_.quantums_)*/uint64_t{0u}
  , /*decltype(_impl_.subticks_)*/uint64_t{0u}
  , /*decltype(_impl_.side_)*/0
  , /*decltype(_impl_.time_in_force_)*/0
  , /*decltype(_impl_.reduce_only_)*/false
  , /*decltype(_impl_.client_metadata_)*/0u
  , /*decltype(_impl_.conditional_order_trigger_subticks_)*/uint64_t{0u}
  , /*decltype(_impl_.condition_type_)*/0
  , /*decltype(_impl_.good_til_oneof_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderDefaultTypeInternal() {}
  union {
    Order _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderDefaultTypeInternal _Order_default_instance_;
PROTOBUF_CONSTEXPR TransactionOrdering::TransactionOrdering(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_height_)*/0u
  , /*decltype(_impl_.transaction_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionOrderingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionOrderingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionOrderingDefaultTypeInternal() {}
  union {
    TransactionOrdering _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionOrderingDefaultTypeInternal _TransactionOrdering_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fclob_2forder_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dydxprotocol_2fclob_2forder_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dydxprotocol_2fclob_2forder_2eproto = nullptr;

const uint32_t TableStruct_dydxprotocol_2fclob_2forder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OrderId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OrderId, _impl_.subaccount_id_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OrderId, _impl_.client_id_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OrderId, _impl_.order_flags_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OrderId, _impl_.clob_pair_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OrdersFilledDuringLatestBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OrdersFilledDuringLatestBlock, _impl_.order_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::PotentiallyPrunableOrders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::PotentiallyPrunableOrders, _impl_.order_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OrderFillState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OrderFillState, _impl_.fill_amount_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OrderFillState, _impl_.prunable_block_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::StatefulOrderTimeSliceValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::StatefulOrderTimeSliceValue, _impl_.order_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::LongTermOrderPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::LongTermOrderPlacement, _impl_.order_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::LongTermOrderPlacement, _impl_.placement_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ConditionalOrderPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ConditionalOrderPlacement, _impl_.order_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ConditionalOrderPlacement, _impl_.placement_index_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ConditionalOrderPlacement, _impl_.trigger_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Order, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Order, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Order, _impl_.side_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Order, _impl_.quantums_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Order, _impl_.subticks_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Order, _impl_.time_in_force_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Order, _impl_.reduce_only_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Order, _impl_.client_metadata_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Order, _impl_.condition_type_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Order, _impl_.conditional_order_trigger_subticks_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Order, _impl_.good_til_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::TransactionOrdering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::TransactionOrdering, _impl_.block_height_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::TransactionOrdering, _impl_.transaction_index_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dydxprotocol::clob::OrderId)},
  { 10, -1, -1, sizeof(::dydxprotocol::clob::OrdersFilledDuringLatestBlock)},
  { 17, -1, -1, sizeof(::dydxprotocol::clob::PotentiallyPrunableOrders)},
  { 24, -1, -1, sizeof(::dydxprotocol::clob::OrderFillState)},
  { 32, -1, -1, sizeof(::dydxprotocol::clob::StatefulOrderTimeSliceValue)},
  { 39, -1, -1, sizeof(::dydxprotocol::clob::LongTermOrderPlacement)},
  { 47, -1, -1, sizeof(::dydxprotocol::clob::ConditionalOrderPlacement)},
  { 56, -1, -1, sizeof(::dydxprotocol::clob::Order)},
  { 74, -1, -1, sizeof(::dydxprotocol::clob::TransactionOrdering)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dydxprotocol::clob::_OrderId_default_instance_._instance,
  &::dydxprotocol::clob::_OrdersFilledDuringLatestBlock_default_instance_._instance,
  &::dydxprotocol::clob::_PotentiallyPrunableOrders_default_instance_._instance,
  &::dydxprotocol::clob::_OrderFillState_default_instance_._instance,
  &::dydxprotocol::clob::_StatefulOrderTimeSliceValue_default_instance_._instance,
  &::dydxprotocol::clob::_LongTermOrderPlacement_default_instance_._instance,
  &::dydxprotocol::clob::_ConditionalOrderPlacement_default_instance_._instance,
  &::dydxprotocol::clob::_Order_default_instance_._instance,
  &::dydxprotocol::clob::_TransactionOrdering_default_instance_._instance,
};

const char descriptor_table_protodef_dydxprotocol_2fclob_2forder_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035dydxprotocol/clob/order.proto\022\021dydxpro"
  "tocol.clob\032\024gogoproto/gogo.proto\032)dydxpr"
  "otocol/subaccounts/subaccount.proto\"\214\001\n\007"
  "OrderId\022C\n\rsubaccount_id\030\001 \001(\0132&.dydxpro"
  "tocol.subaccounts.SubaccountIdB\004\310\336\037\000\022\021\n\t"
  "client_id\030\002 \001(\007\022\023\n\013order_flags\030\003 \001(\r\022\024\n\014"
  "clob_pair_id\030\004 \001(\r\"T\n\035OrdersFilledDuring"
  "LatestBlock\0223\n\torder_ids\030\001 \003(\0132\032.dydxpro"
  "tocol.clob.OrderIdB\004\310\336\037\000\"P\n\031PotentiallyP"
  "runableOrders\0223\n\torder_ids\030\001 \003(\0132\032.dydxp"
  "rotocol.clob.OrderIdB\004\310\336\037\000\"D\n\016OrderFillS"
  "tate\022\023\n\013fill_amount\030\001 \001(\004\022\035\n\025prunable_bl"
  "ock_height\030\002 \001(\r\"R\n\033StatefulOrderTimeSli"
  "ceValue\0223\n\torder_ids\030\001 \003(\0132\032.dydxprotoco"
  "l.clob.OrderIdB\004\310\336\037\000\"\216\001\n\026LongTermOrderPl"
  "acement\022-\n\005order\030\001 \001(\0132\030.dydxprotocol.cl"
  "ob.OrderB\004\310\336\037\000\022E\n\017placement_index\030\002 \001(\0132"
  "&.dydxprotocol.clob.TransactionOrderingB"
  "\004\310\336\037\000\"\320\001\n\031ConditionalOrderPlacement\022-\n\005o"
  "rder\030\001 \001(\0132\030.dydxprotocol.clob.OrderB\004\310\336"
  "\037\000\022E\n\017placement_index\030\002 \001(\0132&.dydxprotoc"
  "ol.clob.TransactionOrderingB\004\310\336\037\000\022=\n\rtri"
  "gger_index\030\003 \001(\0132&.dydxprotocol.clob.Tra"
  "nsactionOrdering\"\333\005\n\005Order\0222\n\010order_id\030\001"
  " \001(\0132\032.dydxprotocol.clob.OrderIdB\004\310\336\037\000\022+"
  "\n\004side\030\002 \001(\0162\035.dydxprotocol.clob.Order.S"
  "ide\022\020\n\010quantums\030\003 \001(\004\022\020\n\010subticks\030\004 \001(\004\022"
  "\030\n\016good_til_block\030\005 \001(\rH\000\022\035\n\023good_til_bl"
  "ock_time\030\006 \001(\007H\000\022;\n\rtime_in_force\030\007 \001(\0162"
  "$.dydxprotocol.clob.Order.TimeInForce\022\023\n"
  "\013reduce_only\030\010 \001(\010\022\027\n\017client_metadata\030\t "
  "\001(\r\022>\n\016condition_type\030\n \001(\0162&.dydxprotoc"
  "ol.clob.Order.ConditionType\022*\n\"condition"
  "al_order_trigger_subticks\030\013 \001(\004\"9\n\004Side\022"
  "\024\n\020SIDE_UNSPECIFIED\020\000\022\014\n\010SIDE_BUY\020\001\022\r\n\tS"
  "IDE_SELL\020\002\"\200\001\n\013TimeInForce\022\035\n\031TIME_IN_FO"
  "RCE_UNSPECIFIED\020\000\022\025\n\021TIME_IN_FORCE_IOC\020\001"
  "\022\033\n\027TIME_IN_FORCE_POST_ONLY\020\002\022\036\n\032TIME_IN"
  "_FORCE_FILL_OR_KILL\020\003\"m\n\rConditionType\022\036"
  "\n\032CONDITION_TYPE_UNSPECIFIED\020\000\022\034\n\030CONDIT"
  "ION_TYPE_STOP_LOSS\020\001\022\036\n\032CONDITION_TYPE_T"
  "AKE_PROFIT\020\002B\020\n\016good_til_oneof\"F\n\023Transa"
  "ctionOrdering\022\024\n\014block_height\030\001 \001(\r\022\031\n\021t"
  "ransaction_index\030\002 \001(\rB8Z6github.com/dyd"
  "xprotocol/v4-chain/protocol/x/clob/types"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fclob_2forder_2eproto_deps[2] = {
  &::descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto,
  &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::_pbi::once_flag descriptor_table_dydxprotocol_2fclob_2forder_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fclob_2forder_2eproto = {
    false, false, 1808, descriptor_table_protodef_dydxprotocol_2fclob_2forder_2eproto,
    "dydxprotocol/clob/order.proto",
    &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_once, descriptor_table_dydxprotocol_2fclob_2forder_2eproto_deps, 2, 9,
    schemas, file_default_instances, TableStruct_dydxprotocol_2fclob_2forder_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fclob_2forder_2eproto, file_level_enum_descriptors_dydxprotocol_2fclob_2forder_2eproto,
    file_level_service_descriptors_dydxprotocol_2fclob_2forder_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fclob_2forder_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fclob_2forder_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fclob_2forder_2eproto(&descriptor_table_dydxprotocol_2fclob_2forder_2eproto);
namespace dydxprotocol {
namespace clob {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Side_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dydxprotocol_2fclob_2forder_2eproto);
  return file_level_enum_descriptors_dydxprotocol_2fclob_2forder_2eproto[0];
}
bool Order_Side_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Order_Side Order::SIDE_UNSPECIFIED;
constexpr Order_Side Order::SIDE_BUY;
constexpr Order_Side Order::SIDE_SELL;
constexpr Order_Side Order::Side_MIN;
constexpr Order_Side Order::Side_MAX;
constexpr int Order::Side_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_TimeInForce_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dydxprotocol_2fclob_2forder_2eproto);
  return file_level_enum_descriptors_dydxprotocol_2fclob_2forder_2eproto[1];
}
bool Order_TimeInForce_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Order_TimeInForce Order::TIME_IN_FORCE_UNSPECIFIED;
constexpr Order_TimeInForce Order::TIME_IN_FORCE_IOC;
constexpr Order_TimeInForce Order::TIME_IN_FORCE_POST_ONLY;
constexpr Order_TimeInForce Order::TIME_IN_FORCE_FILL_OR_KILL;
constexpr Order_TimeInForce Order::TimeInForce_MIN;
constexpr Order_TimeInForce Order::TimeInForce_MAX;
constexpr int Order::TimeInForce_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_ConditionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dydxprotocol_2fclob_2forder_2eproto);
  return file_level_enum_descriptors_dydxprotocol_2fclob_2forder_2eproto[2];
}
bool Order_ConditionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Order_ConditionType Order::CONDITION_TYPE_UNSPECIFIED;
constexpr Order_ConditionType Order::CONDITION_TYPE_STOP_LOSS;
constexpr Order_ConditionType Order::CONDITION_TYPE_TAKE_PROFIT;
constexpr Order_ConditionType Order::ConditionType_MIN;
constexpr Order_ConditionType Order::ConditionType_MAX;
constexpr int Order::ConditionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class OrderId::_Internal {
 public:
  static const ::dydxprotocol::subaccounts::SubaccountId& subaccount_id(const OrderId* msg);
};

const ::dydxprotocol::subaccounts::SubaccountId&
OrderId::_Internal::subaccount_id(const OrderId* msg) {
  return *msg->_impl_.subaccount_id_;
}
void OrderId::clear_subaccount_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.subaccount_id_ != nullptr) {
    delete _impl_.subaccount_id_;
  }
  _impl_.subaccount_id_ = nullptr;
}
OrderId::OrderId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.OrderId)
}
OrderId::OrderId(const OrderId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_){nullptr}
    , decltype(_impl_.client_id_){}
    , decltype(_impl_.order_flags_){}
    , decltype(_impl_.clob_pair_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subaccount_id()) {
    _this->_impl_.subaccount_id_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.subaccount_id_);
  }
  ::memcpy(&_impl_.client_id_, &from._impl_.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clob_pair_id_) -
    reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.clob_pair_id_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.OrderId)
}

inline void OrderId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_){nullptr}
    , decltype(_impl_.client_id_){0u}
    , decltype(_impl_.order_flags_){0u}
    , decltype(_impl_.clob_pair_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrderId::~OrderId() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.OrderId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.subaccount_id_;
}

void OrderId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderId::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.OrderId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.subaccount_id_ != nullptr) {
    delete _impl_.subaccount_id_;
  }
  _impl_.subaccount_id_ = nullptr;
  ::memset(&_impl_.client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clob_pair_id_) -
      reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.clob_pair_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.subaccounts.SubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subaccount_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // uint32 order_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.order_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 clob_pair_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.clob_pair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.OrderId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dydxprotocol.subaccounts.SubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_subaccount_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::subaccount_id(this),
        _Internal::subaccount_id(this).GetCachedSize(), target, stream);
  }

  // fixed32 client_id = 2;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(2, this->_internal_client_id(), target);
  }

  // uint32 order_flags = 3;
  if (this->_internal_order_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_order_flags(), target);
  }

  // uint32 clob_pair_id = 4;
  if (this->_internal_clob_pair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_clob_pair_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.OrderId)
  return target;
}

size_t OrderId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.OrderId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.subaccounts.SubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_subaccount_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subaccount_id_);
  }

  // fixed32 client_id = 2;
  if (this->_internal_client_id() != 0) {
    total_size += 1 + 4;
  }

  // uint32 order_flags = 3;
  if (this->_internal_order_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_order_flags());
  }

  // uint32 clob_pair_id = 4;
  if (this->_internal_clob_pair_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clob_pair_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderId::GetClassData() const { return &_class_data_; }


void OrderId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderId*>(&to_msg);
  auto& from = static_cast<const OrderId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.OrderId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subaccount_id()) {
    _this->_internal_mutable_subaccount_id()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
        from._internal_subaccount_id());
  }
  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_order_flags() != 0) {
    _this->_internal_set_order_flags(from._internal_order_flags());
  }
  if (from._internal_clob_pair_id() != 0) {
    _this->_internal_set_clob_pair_id(from._internal_clob_pair_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderId::CopyFrom(const OrderId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.OrderId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderId::IsInitialized() const {
  return true;
}

void OrderId::InternalSwap(OrderId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderId, _impl_.clob_pair_id_)
      + sizeof(OrderId::_impl_.clob_pair_id_)
      - PROTOBUF_FIELD_OFFSET(OrderId, _impl_.subaccount_id_)>(
          reinterpret_cast<char*>(&_impl_.subaccount_id_),
          reinterpret_cast<char*>(&other->_impl_.subaccount_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2forder_2eproto[0]);
}

// ===================================================================

class OrdersFilledDuringLatestBlock::_Internal {
 public:
};

OrdersFilledDuringLatestBlock::OrdersFilledDuringLatestBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.OrdersFilledDuringLatestBlock)
}
OrdersFilledDuringLatestBlock::OrdersFilledDuringLatestBlock(const OrdersFilledDuringLatestBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrdersFilledDuringLatestBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_ids_){from._impl_.order_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.OrdersFilledDuringLatestBlock)
}

inline void OrdersFilledDuringLatestBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrdersFilledDuringLatestBlock::~OrdersFilledDuringLatestBlock() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.OrdersFilledDuringLatestBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrdersFilledDuringLatestBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_ids_.~RepeatedPtrField();
}

void OrdersFilledDuringLatestBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrdersFilledDuringLatestBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.OrdersFilledDuringLatestBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersFilledDuringLatestBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_order_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrdersFilledDuringLatestBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.OrdersFilledDuringLatestBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_order_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_order_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.OrdersFilledDuringLatestBlock)
  return target;
}

size_t OrdersFilledDuringLatestBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.OrdersFilledDuringLatestBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_order_ids_size();
  for (const auto& msg : this->_impl_.order_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrdersFilledDuringLatestBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrdersFilledDuringLatestBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrdersFilledDuringLatestBlock::GetClassData() const { return &_class_data_; }


void OrdersFilledDuringLatestBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrdersFilledDuringLatestBlock*>(&to_msg);
  auto& from = static_cast<const OrdersFilledDuringLatestBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.OrdersFilledDuringLatestBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.order_ids_.MergeFrom(from._impl_.order_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrdersFilledDuringLatestBlock::CopyFrom(const OrdersFilledDuringLatestBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.OrdersFilledDuringLatestBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersFilledDuringLatestBlock::IsInitialized() const {
  return true;
}

void OrdersFilledDuringLatestBlock::InternalSwap(OrdersFilledDuringLatestBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.order_ids_.InternalSwap(&other->_impl_.order_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersFilledDuringLatestBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2forder_2eproto[1]);
}

// ===================================================================

class PotentiallyPrunableOrders::_Internal {
 public:
};

PotentiallyPrunableOrders::PotentiallyPrunableOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.PotentiallyPrunableOrders)
}
PotentiallyPrunableOrders::PotentiallyPrunableOrders(const PotentiallyPrunableOrders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PotentiallyPrunableOrders* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_ids_){from._impl_.order_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.PotentiallyPrunableOrders)
}

inline void PotentiallyPrunableOrders::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PotentiallyPrunableOrders::~PotentiallyPrunableOrders() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.PotentiallyPrunableOrders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PotentiallyPrunableOrders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_ids_.~RepeatedPtrField();
}

void PotentiallyPrunableOrders::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PotentiallyPrunableOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.PotentiallyPrunableOrders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PotentiallyPrunableOrders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_order_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PotentiallyPrunableOrders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.PotentiallyPrunableOrders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_order_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_order_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.PotentiallyPrunableOrders)
  return target;
}

size_t PotentiallyPrunableOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.PotentiallyPrunableOrders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_order_ids_size();
  for (const auto& msg : this->_impl_.order_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PotentiallyPrunableOrders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PotentiallyPrunableOrders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PotentiallyPrunableOrders::GetClassData() const { return &_class_data_; }


void PotentiallyPrunableOrders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PotentiallyPrunableOrders*>(&to_msg);
  auto& from = static_cast<const PotentiallyPrunableOrders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.PotentiallyPrunableOrders)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.order_ids_.MergeFrom(from._impl_.order_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PotentiallyPrunableOrders::CopyFrom(const PotentiallyPrunableOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.PotentiallyPrunableOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PotentiallyPrunableOrders::IsInitialized() const {
  return true;
}

void PotentiallyPrunableOrders::InternalSwap(PotentiallyPrunableOrders* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.order_ids_.InternalSwap(&other->_impl_.order_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PotentiallyPrunableOrders::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2forder_2eproto[2]);
}

// ===================================================================

class OrderFillState::_Internal {
 public:
};

OrderFillState::OrderFillState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.OrderFillState)
}
OrderFillState::OrderFillState(const OrderFillState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderFillState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fill_amount_){}
    , decltype(_impl_.prunable_block_height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fill_amount_, &from._impl_.fill_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prunable_block_height_) -
    reinterpret_cast<char*>(&_impl_.fill_amount_)) + sizeof(_impl_.prunable_block_height_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.OrderFillState)
}

inline void OrderFillState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fill_amount_){uint64_t{0u}}
    , decltype(_impl_.prunable_block_height_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrderFillState::~OrderFillState() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.OrderFillState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderFillState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OrderFillState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderFillState::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.OrderFillState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fill_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.prunable_block_height_) -
      reinterpret_cast<char*>(&_impl_.fill_amount_)) + sizeof(_impl_.prunable_block_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderFillState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 fill_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fill_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 prunable_block_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.prunable_block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderFillState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.OrderFillState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 fill_amount = 1;
  if (this->_internal_fill_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_fill_amount(), target);
  }

  // uint32 prunable_block_height = 2;
  if (this->_internal_prunable_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prunable_block_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.OrderFillState)
  return target;
}

size_t OrderFillState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.OrderFillState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 fill_amount = 1;
  if (this->_internal_fill_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fill_amount());
  }

  // uint32 prunable_block_height = 2;
  if (this->_internal_prunable_block_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prunable_block_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderFillState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderFillState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderFillState::GetClassData() const { return &_class_data_; }


void OrderFillState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderFillState*>(&to_msg);
  auto& from = static_cast<const OrderFillState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.OrderFillState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fill_amount() != 0) {
    _this->_internal_set_fill_amount(from._internal_fill_amount());
  }
  if (from._internal_prunable_block_height() != 0) {
    _this->_internal_set_prunable_block_height(from._internal_prunable_block_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderFillState::CopyFrom(const OrderFillState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.OrderFillState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderFillState::IsInitialized() const {
  return true;
}

void OrderFillState::InternalSwap(OrderFillState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderFillState, _impl_.prunable_block_height_)
      + sizeof(OrderFillState::_impl_.prunable_block_height_)
      - PROTOBUF_FIELD_OFFSET(OrderFillState, _impl_.fill_amount_)>(
          reinterpret_cast<char*>(&_impl_.fill_amount_),
          reinterpret_cast<char*>(&other->_impl_.fill_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderFillState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2forder_2eproto[3]);
}

// ===================================================================

class StatefulOrderTimeSliceValue::_Internal {
 public:
};

StatefulOrderTimeSliceValue::StatefulOrderTimeSliceValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.StatefulOrderTimeSliceValue)
}
StatefulOrderTimeSliceValue::StatefulOrderTimeSliceValue(const StatefulOrderTimeSliceValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatefulOrderTimeSliceValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_ids_){from._impl_.order_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.StatefulOrderTimeSliceValue)
}

inline void StatefulOrderTimeSliceValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatefulOrderTimeSliceValue::~StatefulOrderTimeSliceValue() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.StatefulOrderTimeSliceValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatefulOrderTimeSliceValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_ids_.~RepeatedPtrField();
}

void StatefulOrderTimeSliceValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatefulOrderTimeSliceValue::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.StatefulOrderTimeSliceValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatefulOrderTimeSliceValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_order_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatefulOrderTimeSliceValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.StatefulOrderTimeSliceValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_order_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_order_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.StatefulOrderTimeSliceValue)
  return target;
}

size_t StatefulOrderTimeSliceValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.StatefulOrderTimeSliceValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_order_ids_size();
  for (const auto& msg : this->_impl_.order_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatefulOrderTimeSliceValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatefulOrderTimeSliceValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatefulOrderTimeSliceValue::GetClassData() const { return &_class_data_; }


void StatefulOrderTimeSliceValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatefulOrderTimeSliceValue*>(&to_msg);
  auto& from = static_cast<const StatefulOrderTimeSliceValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.StatefulOrderTimeSliceValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.order_ids_.MergeFrom(from._impl_.order_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatefulOrderTimeSliceValue::CopyFrom(const StatefulOrderTimeSliceValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.StatefulOrderTimeSliceValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatefulOrderTimeSliceValue::IsInitialized() const {
  return true;
}

void StatefulOrderTimeSliceValue::InternalSwap(StatefulOrderTimeSliceValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.order_ids_.InternalSwap(&other->_impl_.order_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatefulOrderTimeSliceValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2forder_2eproto[4]);
}

// ===================================================================

class LongTermOrderPlacement::_Internal {
 public:
  static const ::dydxprotocol::clob::Order& order(const LongTermOrderPlacement* msg);
  static const ::dydxprotocol::clob::TransactionOrdering& placement_index(const LongTermOrderPlacement* msg);
};

const ::dydxprotocol::clob::Order&
LongTermOrderPlacement::_Internal::order(const LongTermOrderPlacement* msg) {
  return *msg->_impl_.order_;
}
const ::dydxprotocol::clob::TransactionOrdering&
LongTermOrderPlacement::_Internal::placement_index(const LongTermOrderPlacement* msg) {
  return *msg->_impl_.placement_index_;
}
LongTermOrderPlacement::LongTermOrderPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.LongTermOrderPlacement)
}
LongTermOrderPlacement::LongTermOrderPlacement(const LongTermOrderPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LongTermOrderPlacement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_){nullptr}
    , decltype(_impl_.placement_index_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    _this->_impl_.order_ = new ::dydxprotocol::clob::Order(*from._impl_.order_);
  }
  if (from._internal_has_placement_index()) {
    _this->_impl_.placement_index_ = new ::dydxprotocol::clob::TransactionOrdering(*from._impl_.placement_index_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.LongTermOrderPlacement)
}

inline void LongTermOrderPlacement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_){nullptr}
    , decltype(_impl_.placement_index_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LongTermOrderPlacement::~LongTermOrderPlacement() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.LongTermOrderPlacement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LongTermOrderPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.order_;
  if (this != internal_default_instance()) delete _impl_.placement_index_;
}

void LongTermOrderPlacement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LongTermOrderPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.LongTermOrderPlacement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.order_ != nullptr) {
    delete _impl_.order_;
  }
  _impl_.order_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.placement_index_ != nullptr) {
    delete _impl_.placement_index_;
  }
  _impl_.placement_index_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongTermOrderPlacement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dydxprotocol.clob.TransactionOrdering placement_index = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LongTermOrderPlacement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.LongTermOrderPlacement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_order()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.clob.TransactionOrdering placement_index = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_placement_index()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::placement_index(this),
        _Internal::placement_index(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.LongTermOrderPlacement)
  return target;
}

size_t LongTermOrderPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.LongTermOrderPlacement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  // .dydxprotocol.clob.TransactionOrdering placement_index = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_placement_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placement_index_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LongTermOrderPlacement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LongTermOrderPlacement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LongTermOrderPlacement::GetClassData() const { return &_class_data_; }


void LongTermOrderPlacement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LongTermOrderPlacement*>(&to_msg);
  auto& from = static_cast<const LongTermOrderPlacement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.LongTermOrderPlacement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_order()) {
    _this->_internal_mutable_order()->::dydxprotocol::clob::Order::MergeFrom(
        from._internal_order());
  }
  if (from._internal_has_placement_index()) {
    _this->_internal_mutable_placement_index()->::dydxprotocol::clob::TransactionOrdering::MergeFrom(
        from._internal_placement_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LongTermOrderPlacement::CopyFrom(const LongTermOrderPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.LongTermOrderPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongTermOrderPlacement::IsInitialized() const {
  return true;
}

void LongTermOrderPlacement::InternalSwap(LongTermOrderPlacement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LongTermOrderPlacement, _impl_.placement_index_)
      + sizeof(LongTermOrderPlacement::_impl_.placement_index_)
      - PROTOBUF_FIELD_OFFSET(LongTermOrderPlacement, _impl_.order_)>(
          reinterpret_cast<char*>(&_impl_.order_),
          reinterpret_cast<char*>(&other->_impl_.order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LongTermOrderPlacement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2forder_2eproto[5]);
}

// ===================================================================

class ConditionalOrderPlacement::_Internal {
 public:
  static const ::dydxprotocol::clob::Order& order(const ConditionalOrderPlacement* msg);
  static const ::dydxprotocol::clob::TransactionOrdering& placement_index(const ConditionalOrderPlacement* msg);
  static const ::dydxprotocol::clob::TransactionOrdering& trigger_index(const ConditionalOrderPlacement* msg);
};

const ::dydxprotocol::clob::Order&
ConditionalOrderPlacement::_Internal::order(const ConditionalOrderPlacement* msg) {
  return *msg->_impl_.order_;
}
const ::dydxprotocol::clob::TransactionOrdering&
ConditionalOrderPlacement::_Internal::placement_index(const ConditionalOrderPlacement* msg) {
  return *msg->_impl_.placement_index_;
}
const ::dydxprotocol::clob::TransactionOrdering&
ConditionalOrderPlacement::_Internal::trigger_index(const ConditionalOrderPlacement* msg) {
  return *msg->_impl_.trigger_index_;
}
ConditionalOrderPlacement::ConditionalOrderPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.ConditionalOrderPlacement)
}
ConditionalOrderPlacement::ConditionalOrderPlacement(const ConditionalOrderPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConditionalOrderPlacement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_){nullptr}
    , decltype(_impl_.placement_index_){nullptr}
    , decltype(_impl_.trigger_index_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    _this->_impl_.order_ = new ::dydxprotocol::clob::Order(*from._impl_.order_);
  }
  if (from._internal_has_placement_index()) {
    _this->_impl_.placement_index_ = new ::dydxprotocol::clob::TransactionOrdering(*from._impl_.placement_index_);
  }
  if (from._internal_has_trigger_index()) {
    _this->_impl_.trigger_index_ = new ::dydxprotocol::clob::TransactionOrdering(*from._impl_.trigger_index_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.ConditionalOrderPlacement)
}

inline void ConditionalOrderPlacement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_){nullptr}
    , decltype(_impl_.placement_index_){nullptr}
    , decltype(_impl_.trigger_index_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConditionalOrderPlacement::~ConditionalOrderPlacement() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.ConditionalOrderPlacement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConditionalOrderPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.order_;
  if (this != internal_default_instance()) delete _impl_.placement_index_;
  if (this != internal_default_instance()) delete _impl_.trigger_index_;
}

void ConditionalOrderPlacement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConditionalOrderPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.ConditionalOrderPlacement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.order_ != nullptr) {
    delete _impl_.order_;
  }
  _impl_.order_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.placement_index_ != nullptr) {
    delete _impl_.placement_index_;
  }
  _impl_.placement_index_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trigger_index_ != nullptr) {
    delete _impl_.trigger_index_;
  }
  _impl_.trigger_index_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionalOrderPlacement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dydxprotocol.clob.TransactionOrdering placement_index = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dydxprotocol.clob.TransactionOrdering trigger_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConditionalOrderPlacement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.ConditionalOrderPlacement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_order()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.clob.TransactionOrdering placement_index = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_placement_index()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::placement_index(this),
        _Internal::placement_index(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.clob.TransactionOrdering trigger_index = 3;
  if (this->_internal_has_trigger_index()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::trigger_index(this),
        _Internal::trigger_index(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.ConditionalOrderPlacement)
  return target;
}

size_t ConditionalOrderPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.ConditionalOrderPlacement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  // .dydxprotocol.clob.TransactionOrdering placement_index = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_placement_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.placement_index_);
  }

  // .dydxprotocol.clob.TransactionOrdering trigger_index = 3;
  if (this->_internal_has_trigger_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trigger_index_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConditionalOrderPlacement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConditionalOrderPlacement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConditionalOrderPlacement::GetClassData() const { return &_class_data_; }


void ConditionalOrderPlacement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConditionalOrderPlacement*>(&to_msg);
  auto& from = static_cast<const ConditionalOrderPlacement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.ConditionalOrderPlacement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_order()) {
    _this->_internal_mutable_order()->::dydxprotocol::clob::Order::MergeFrom(
        from._internal_order());
  }
  if (from._internal_has_placement_index()) {
    _this->_internal_mutable_placement_index()->::dydxprotocol::clob::TransactionOrdering::MergeFrom(
        from._internal_placement_index());
  }
  if (from._internal_has_trigger_index()) {
    _this->_internal_mutable_trigger_index()->::dydxprotocol::clob::TransactionOrdering::MergeFrom(
        from._internal_trigger_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionalOrderPlacement::CopyFrom(const ConditionalOrderPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.ConditionalOrderPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalOrderPlacement::IsInitialized() const {
  return true;
}

void ConditionalOrderPlacement::InternalSwap(ConditionalOrderPlacement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConditionalOrderPlacement, _impl_.trigger_index_)
      + sizeof(ConditionalOrderPlacement::_impl_.trigger_index_)
      - PROTOBUF_FIELD_OFFSET(ConditionalOrderPlacement, _impl_.order_)>(
          reinterpret_cast<char*>(&_impl_.order_),
          reinterpret_cast<char*>(&other->_impl_.order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionalOrderPlacement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2forder_2eproto[6]);
}

// ===================================================================

class Order::_Internal {
 public:
  static const ::dydxprotocol::clob::OrderId& order_id(const Order* msg);
};

const ::dydxprotocol::clob::OrderId&
Order::_Internal::order_id(const Order* msg) {
  return *msg->_impl_.order_id_;
}
Order::Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.Order)
}
Order::Order(const Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Order* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_id_){nullptr}
    , decltype(_impl_.quantums_){}
    , decltype(_impl_.subticks_){}
    , decltype(_impl_.side_){}
    , decltype(_impl_.time_in_force_){}
    , decltype(_impl_.reduce_only_){}
    , decltype(_impl_.client_metadata_){}
    , decltype(_impl_.conditional_order_trigger_subticks_){}
    , decltype(_impl_.condition_type_){}
    , decltype(_impl_.good_til_oneof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order_id()) {
    _this->_impl_.order_id_ = new ::dydxprotocol::clob::OrderId(*from._impl_.order_id_);
  }
  ::memcpy(&_impl_.quantums_, &from._impl_.quantums_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.condition_type_) -
    reinterpret_cast<char*>(&_impl_.quantums_)) + sizeof(_impl_.condition_type_));
  clear_has_good_til_oneof();
  switch (from.good_til_oneof_case()) {
    case kGoodTilBlock: {
      _this->_internal_set_good_til_block(from._internal_good_til_block());
      break;
    }
    case kGoodTilBlockTime: {
      _this->_internal_set_good_til_block_time(from._internal_good_til_block_time());
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.Order)
}

inline void Order::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_id_){nullptr}
    , decltype(_impl_.quantums_){uint64_t{0u}}
    , decltype(_impl_.subticks_){uint64_t{0u}}
    , decltype(_impl_.side_){0}
    , decltype(_impl_.time_in_force_){0}
    , decltype(_impl_.reduce_only_){false}
    , decltype(_impl_.client_metadata_){0u}
    , decltype(_impl_.conditional_order_trigger_subticks_){uint64_t{0u}}
    , decltype(_impl_.condition_type_){0}
    , decltype(_impl_.good_til_oneof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_good_til_oneof();
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.Order)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Order::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.order_id_;
  if (has_good_til_oneof()) {
    clear_good_til_oneof();
  }
}

void Order::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Order::clear_good_til_oneof() {
// @@protoc_insertion_point(one_of_clear_start:dydxprotocol.clob.Order)
  switch (good_til_oneof_case()) {
    case kGoodTilBlock: {
      // No need to clear
      break;
    }
    case kGoodTilBlockTime: {
      // No need to clear
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = GOOD_TIL_ONEOF_NOT_SET;
}


void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.Order)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.order_id_ != nullptr) {
    delete _impl_.order_id_;
  }
  _impl_.order_id_ = nullptr;
  ::memset(&_impl_.quantums_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.condition_type_) -
      reinterpret_cast<char*>(&_impl_.quantums_)) + sizeof(_impl_.condition_type_));
  clear_good_til_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Order::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dydxprotocol.clob.Order.Side side = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::dydxprotocol::clob::Order_Side>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 quantums = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.quantums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 subticks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.subticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 good_til_block = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_good_til_block(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 good_til_block_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _internal_set_good_til_block_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // .dydxprotocol.clob.Order.TimeInForce time_in_force = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_time_in_force(static_cast<::dydxprotocol::clob::Order_TimeInForce>(val));
        } else
          goto handle_unusual;
        continue;
      // bool reduce_only = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.reduce_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 client_metadata = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.client_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dydxprotocol.clob.Order.ConditionType condition_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_condition_type(static_cast<::dydxprotocol::clob::Order_ConditionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 conditional_order_trigger_subticks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.conditional_order_trigger_subticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Order::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.Order)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_order_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order_id(this),
        _Internal::order_id(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.clob.Order.Side side = 2;
  if (this->_internal_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_side(), target);
  }

  // uint64 quantums = 3;
  if (this->_internal_quantums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_quantums(), target);
  }

  // uint64 subticks = 4;
  if (this->_internal_subticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_subticks(), target);
  }

  // uint32 good_til_block = 5;
  if (_internal_has_good_til_block()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_good_til_block(), target);
  }

  // fixed32 good_til_block_time = 6;
  if (_internal_has_good_til_block_time()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(6, this->_internal_good_til_block_time(), target);
  }

  // .dydxprotocol.clob.Order.TimeInForce time_in_force = 7;
  if (this->_internal_time_in_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_time_in_force(), target);
  }

  // bool reduce_only = 8;
  if (this->_internal_reduce_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_reduce_only(), target);
  }

  // uint32 client_metadata = 9;
  if (this->_internal_client_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_client_metadata(), target);
  }

  // .dydxprotocol.clob.Order.ConditionType condition_type = 10;
  if (this->_internal_condition_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_condition_type(), target);
  }

  // uint64 conditional_order_trigger_subticks = 11;
  if (this->_internal_conditional_order_trigger_subticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_conditional_order_trigger_subticks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.Order)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_order_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_id_);
  }

  // uint64 quantums = 3;
  if (this->_internal_quantums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_quantums());
  }

  // uint64 subticks = 4;
  if (this->_internal_subticks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_subticks());
  }

  // .dydxprotocol.clob.Order.Side side = 2;
  if (this->_internal_side() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .dydxprotocol.clob.Order.TimeInForce time_in_force = 7;
  if (this->_internal_time_in_force() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_time_in_force());
  }

  // bool reduce_only = 8;
  if (this->_internal_reduce_only() != 0) {
    total_size += 1 + 1;
  }

  // uint32 client_metadata = 9;
  if (this->_internal_client_metadata() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_metadata());
  }

  // uint64 conditional_order_trigger_subticks = 11;
  if (this->_internal_conditional_order_trigger_subticks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_conditional_order_trigger_subticks());
  }

  // .dydxprotocol.clob.Order.ConditionType condition_type = 10;
  if (this->_internal_condition_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_condition_type());
  }

  switch (good_til_oneof_case()) {
    // uint32 good_til_block = 5;
    case kGoodTilBlock: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_good_til_block());
      break;
    }
    // fixed32 good_til_block_time = 6;
    case kGoodTilBlockTime: {
      total_size += 1 + 4;
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Order::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Order::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Order::GetClassData() const { return &_class_data_; }


void Order::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Order*>(&to_msg);
  auto& from = static_cast<const Order&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.Order)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_order_id()) {
    _this->_internal_mutable_order_id()->::dydxprotocol::clob::OrderId::MergeFrom(
        from._internal_order_id());
  }
  if (from._internal_quantums() != 0) {
    _this->_internal_set_quantums(from._internal_quantums());
  }
  if (from._internal_subticks() != 0) {
    _this->_internal_set_subticks(from._internal_subticks());
  }
  if (from._internal_side() != 0) {
    _this->_internal_set_side(from._internal_side());
  }
  if (from._internal_time_in_force() != 0) {
    _this->_internal_set_time_in_force(from._internal_time_in_force());
  }
  if (from._internal_reduce_only() != 0) {
    _this->_internal_set_reduce_only(from._internal_reduce_only());
  }
  if (from._internal_client_metadata() != 0) {
    _this->_internal_set_client_metadata(from._internal_client_metadata());
  }
  if (from._internal_conditional_order_trigger_subticks() != 0) {
    _this->_internal_set_conditional_order_trigger_subticks(from._internal_conditional_order_trigger_subticks());
  }
  if (from._internal_condition_type() != 0) {
    _this->_internal_set_condition_type(from._internal_condition_type());
  }
  switch (from.good_til_oneof_case()) {
    case kGoodTilBlock: {
      _this->_internal_set_good_til_block(from._internal_good_til_block());
      break;
    }
    case kGoodTilBlockTime: {
      _this->_internal_set_good_til_block_time(from._internal_good_til_block_time());
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Order, _impl_.condition_type_)
      + sizeof(Order::_impl_.condition_type_)
      - PROTOBUF_FIELD_OFFSET(Order, _impl_.order_id_)>(
          reinterpret_cast<char*>(&_impl_.order_id_),
          reinterpret_cast<char*>(&other->_impl_.order_id_));
  swap(_impl_.good_til_oneof_, other->_impl_.good_til_oneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Order::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2forder_2eproto[7]);
}

// ===================================================================

class TransactionOrdering::_Internal {
 public:
};

TransactionOrdering::TransactionOrdering(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.TransactionOrdering)
}
TransactionOrdering::TransactionOrdering(const TransactionOrdering& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionOrdering* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_height_){}
    , decltype(_impl_.transaction_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.block_height_, &from._impl_.block_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.transaction_index_) -
    reinterpret_cast<char*>(&_impl_.block_height_)) + sizeof(_impl_.transaction_index_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.TransactionOrdering)
}

inline void TransactionOrdering::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_height_){0u}
    , decltype(_impl_.transaction_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransactionOrdering::~TransactionOrdering() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.TransactionOrdering)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionOrdering::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionOrdering::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionOrdering::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.TransactionOrdering)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.block_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.transaction_index_) -
      reinterpret_cast<char*>(&_impl_.block_height_)) + sizeof(_impl_.transaction_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOrdering::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 block_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 transaction_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.transaction_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionOrdering::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.TransactionOrdering)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 block_height = 1;
  if (this->_internal_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_block_height(), target);
  }

  // uint32 transaction_index = 2;
  if (this->_internal_transaction_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_transaction_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.TransactionOrdering)
  return target;
}

size_t TransactionOrdering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.TransactionOrdering)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 block_height = 1;
  if (this->_internal_block_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_block_height());
  }

  // uint32 transaction_index = 2;
  if (this->_internal_transaction_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_transaction_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionOrdering::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionOrdering::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionOrdering::GetClassData() const { return &_class_data_; }


void TransactionOrdering::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionOrdering*>(&to_msg);
  auto& from = static_cast<const TransactionOrdering&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.TransactionOrdering)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_height() != 0) {
    _this->_internal_set_block_height(from._internal_block_height());
  }
  if (from._internal_transaction_index() != 0) {
    _this->_internal_set_transaction_index(from._internal_transaction_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionOrdering::CopyFrom(const TransactionOrdering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.TransactionOrdering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOrdering::IsInitialized() const {
  return true;
}

void TransactionOrdering::InternalSwap(TransactionOrdering* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionOrdering, _impl_.transaction_index_)
      + sizeof(TransactionOrdering::_impl_.transaction_index_)
      - PROTOBUF_FIELD_OFFSET(TransactionOrdering, _impl_.block_height_)>(
          reinterpret_cast<char*>(&_impl_.block_height_),
          reinterpret_cast<char*>(&other->_impl_.block_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOrdering::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2forder_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2forder_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::OrderId*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::OrderId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::OrderId >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::OrdersFilledDuringLatestBlock*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::OrdersFilledDuringLatestBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::OrdersFilledDuringLatestBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::PotentiallyPrunableOrders*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::PotentiallyPrunableOrders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::PotentiallyPrunableOrders >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::OrderFillState*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::OrderFillState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::OrderFillState >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::StatefulOrderTimeSliceValue*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::StatefulOrderTimeSliceValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::StatefulOrderTimeSliceValue >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::LongTermOrderPlacement*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::LongTermOrderPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::LongTermOrderPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::ConditionalOrderPlacement*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::ConditionalOrderPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::ConditionalOrderPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::Order*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::Order >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::TransactionOrdering*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::TransactionOrdering >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::TransactionOrdering >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
