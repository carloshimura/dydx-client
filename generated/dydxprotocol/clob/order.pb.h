// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/order.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2forder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2forder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "dydxprotocol/subaccounts/subaccount.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fclob_2forder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fclob_2forder_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dydxprotocol_2fclob_2forder_2eproto;
namespace dydxprotocol {
namespace clob {
class ConditionalOrderPlacement;
struct ConditionalOrderPlacementDefaultTypeInternal;
extern ConditionalOrderPlacementDefaultTypeInternal _ConditionalOrderPlacement_default_instance_;
class LongTermOrderPlacement;
struct LongTermOrderPlacementDefaultTypeInternal;
extern LongTermOrderPlacementDefaultTypeInternal _LongTermOrderPlacement_default_instance_;
class Order;
struct OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class OrderFillState;
struct OrderFillStateDefaultTypeInternal;
extern OrderFillStateDefaultTypeInternal _OrderFillState_default_instance_;
class OrderId;
struct OrderIdDefaultTypeInternal;
extern OrderIdDefaultTypeInternal _OrderId_default_instance_;
class OrdersFilledDuringLatestBlock;
struct OrdersFilledDuringLatestBlockDefaultTypeInternal;
extern OrdersFilledDuringLatestBlockDefaultTypeInternal _OrdersFilledDuringLatestBlock_default_instance_;
class PotentiallyPrunableOrders;
struct PotentiallyPrunableOrdersDefaultTypeInternal;
extern PotentiallyPrunableOrdersDefaultTypeInternal _PotentiallyPrunableOrders_default_instance_;
class StatefulOrderTimeSliceValue;
struct StatefulOrderTimeSliceValueDefaultTypeInternal;
extern StatefulOrderTimeSliceValueDefaultTypeInternal _StatefulOrderTimeSliceValue_default_instance_;
class TransactionOrdering;
struct TransactionOrderingDefaultTypeInternal;
extern TransactionOrderingDefaultTypeInternal _TransactionOrdering_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::dydxprotocol::clob::ConditionalOrderPlacement* Arena::CreateMaybeMessage<::dydxprotocol::clob::ConditionalOrderPlacement>(Arena*);
template<> ::dydxprotocol::clob::LongTermOrderPlacement* Arena::CreateMaybeMessage<::dydxprotocol::clob::LongTermOrderPlacement>(Arena*);
template<> ::dydxprotocol::clob::Order* Arena::CreateMaybeMessage<::dydxprotocol::clob::Order>(Arena*);
template<> ::dydxprotocol::clob::OrderFillState* Arena::CreateMaybeMessage<::dydxprotocol::clob::OrderFillState>(Arena*);
template<> ::dydxprotocol::clob::OrderId* Arena::CreateMaybeMessage<::dydxprotocol::clob::OrderId>(Arena*);
template<> ::dydxprotocol::clob::OrdersFilledDuringLatestBlock* Arena::CreateMaybeMessage<::dydxprotocol::clob::OrdersFilledDuringLatestBlock>(Arena*);
template<> ::dydxprotocol::clob::PotentiallyPrunableOrders* Arena::CreateMaybeMessage<::dydxprotocol::clob::PotentiallyPrunableOrders>(Arena*);
template<> ::dydxprotocol::clob::StatefulOrderTimeSliceValue* Arena::CreateMaybeMessage<::dydxprotocol::clob::StatefulOrderTimeSliceValue>(Arena*);
template<> ::dydxprotocol::clob::TransactionOrdering* Arena::CreateMaybeMessage<::dydxprotocol::clob::TransactionOrdering>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dydxprotocol {
namespace clob {

enum Order_Side : int {
  Order_Side_SIDE_UNSPECIFIED = 0,
  Order_Side_SIDE_BUY = 1,
  Order_Side_SIDE_SELL = 2,
  Order_Side_Order_Side_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Order_Side_Order_Side_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Order_Side_IsValid(int value);
constexpr Order_Side Order_Side_Side_MIN = Order_Side_SIDE_UNSPECIFIED;
constexpr Order_Side Order_Side_Side_MAX = Order_Side_SIDE_SELL;
constexpr int Order_Side_Side_ARRAYSIZE = Order_Side_Side_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Side_descriptor();
template<typename T>
inline const std::string& Order_Side_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order_Side>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_Side_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_Side_descriptor(), enum_t_value);
}
inline bool Order_Side_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order_Side* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order_Side>(
    Order_Side_descriptor(), name, value);
}
enum Order_TimeInForce : int {
  Order_TimeInForce_TIME_IN_FORCE_UNSPECIFIED = 0,
  Order_TimeInForce_TIME_IN_FORCE_IOC = 1,
  Order_TimeInForce_TIME_IN_FORCE_POST_ONLY = 2,
  Order_TimeInForce_TIME_IN_FORCE_FILL_OR_KILL = 3,
  Order_TimeInForce_Order_TimeInForce_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Order_TimeInForce_Order_TimeInForce_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Order_TimeInForce_IsValid(int value);
constexpr Order_TimeInForce Order_TimeInForce_TimeInForce_MIN = Order_TimeInForce_TIME_IN_FORCE_UNSPECIFIED;
constexpr Order_TimeInForce Order_TimeInForce_TimeInForce_MAX = Order_TimeInForce_TIME_IN_FORCE_FILL_OR_KILL;
constexpr int Order_TimeInForce_TimeInForce_ARRAYSIZE = Order_TimeInForce_TimeInForce_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_TimeInForce_descriptor();
template<typename T>
inline const std::string& Order_TimeInForce_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order_TimeInForce>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_TimeInForce_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_TimeInForce_descriptor(), enum_t_value);
}
inline bool Order_TimeInForce_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order_TimeInForce* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order_TimeInForce>(
    Order_TimeInForce_descriptor(), name, value);
}
enum Order_ConditionType : int {
  Order_ConditionType_CONDITION_TYPE_UNSPECIFIED = 0,
  Order_ConditionType_CONDITION_TYPE_STOP_LOSS = 1,
  Order_ConditionType_CONDITION_TYPE_TAKE_PROFIT = 2,
  Order_ConditionType_Order_ConditionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Order_ConditionType_Order_ConditionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Order_ConditionType_IsValid(int value);
constexpr Order_ConditionType Order_ConditionType_ConditionType_MIN = Order_ConditionType_CONDITION_TYPE_UNSPECIFIED;
constexpr Order_ConditionType Order_ConditionType_ConditionType_MAX = Order_ConditionType_CONDITION_TYPE_TAKE_PROFIT;
constexpr int Order_ConditionType_ConditionType_ARRAYSIZE = Order_ConditionType_ConditionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_ConditionType_descriptor();
template<typename T>
inline const std::string& Order_ConditionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order_ConditionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_ConditionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_ConditionType_descriptor(), enum_t_value);
}
inline bool Order_ConditionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order_ConditionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order_ConditionType>(
    Order_ConditionType_descriptor(), name, value);
}
// ===================================================================

class OrderId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.OrderId) */ {
 public:
  inline OrderId() : OrderId(nullptr) {}
  ~OrderId() override;
  explicit PROTOBUF_CONSTEXPR OrderId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderId(const OrderId& from);
  OrderId(OrderId&& from) noexcept
    : OrderId() {
    *this = ::std::move(from);
  }

  inline OrderId& operator=(const OrderId& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderId& operator=(OrderId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderId& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderId* internal_default_instance() {
    return reinterpret_cast<const OrderId*>(
               &_OrderId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrderId& a, OrderId& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderId& from) {
    OrderId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.OrderId";
  }
  protected:
  explicit OrderId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubaccountIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kOrderFlagsFieldNumber = 3,
    kClobPairIdFieldNumber = 4,
  };
  // .dydxprotocol.subaccounts.SubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
  bool has_subaccount_id() const;
  private:
  bool _internal_has_subaccount_id() const;
  public:
  void clear_subaccount_id();
  const ::dydxprotocol::subaccounts::SubaccountId& subaccount_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_subaccount_id();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_subaccount_id();
  void set_allocated_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* subaccount_id);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_subaccount_id() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_subaccount_id();
  public:
  void unsafe_arena_set_allocated_subaccount_id(
      ::dydxprotocol::subaccounts::SubaccountId* subaccount_id);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_subaccount_id();

  // fixed32 client_id = 2;
  void clear_client_id();
  uint32_t client_id() const;
  void set_client_id(uint32_t value);
  private:
  uint32_t _internal_client_id() const;
  void _internal_set_client_id(uint32_t value);
  public:

  // uint32 order_flags = 3;
  void clear_order_flags();
  uint32_t order_flags() const;
  void set_order_flags(uint32_t value);
  private:
  uint32_t _internal_order_flags() const;
  void _internal_set_order_flags(uint32_t value);
  public:

  // uint32 clob_pair_id = 4;
  void clear_clob_pair_id();
  uint32_t clob_pair_id() const;
  void set_clob_pair_id(uint32_t value);
  private:
  uint32_t _internal_clob_pair_id() const;
  void _internal_set_clob_pair_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.OrderId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dydxprotocol::subaccounts::SubaccountId* subaccount_id_;
    uint32_t client_id_;
    uint32_t order_flags_;
    uint32_t clob_pair_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2forder_2eproto;
};
// -------------------------------------------------------------------

class OrdersFilledDuringLatestBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.OrdersFilledDuringLatestBlock) */ {
 public:
  inline OrdersFilledDuringLatestBlock() : OrdersFilledDuringLatestBlock(nullptr) {}
  ~OrdersFilledDuringLatestBlock() override;
  explicit PROTOBUF_CONSTEXPR OrdersFilledDuringLatestBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrdersFilledDuringLatestBlock(const OrdersFilledDuringLatestBlock& from);
  OrdersFilledDuringLatestBlock(OrdersFilledDuringLatestBlock&& from) noexcept
    : OrdersFilledDuringLatestBlock() {
    *this = ::std::move(from);
  }

  inline OrdersFilledDuringLatestBlock& operator=(const OrdersFilledDuringLatestBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrdersFilledDuringLatestBlock& operator=(OrdersFilledDuringLatestBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrdersFilledDuringLatestBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrdersFilledDuringLatestBlock* internal_default_instance() {
    return reinterpret_cast<const OrdersFilledDuringLatestBlock*>(
               &_OrdersFilledDuringLatestBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OrdersFilledDuringLatestBlock& a, OrdersFilledDuringLatestBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(OrdersFilledDuringLatestBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrdersFilledDuringLatestBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrdersFilledDuringLatestBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrdersFilledDuringLatestBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrdersFilledDuringLatestBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrdersFilledDuringLatestBlock& from) {
    OrdersFilledDuringLatestBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrdersFilledDuringLatestBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.OrdersFilledDuringLatestBlock";
  }
  protected:
  explicit OrdersFilledDuringLatestBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdsFieldNumber = 1,
  };
  // repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
  int order_ids_size() const;
  private:
  int _internal_order_ids_size() const;
  public:
  void clear_order_ids();
  ::dydxprotocol::clob::OrderId* mutable_order_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId >*
      mutable_order_ids();
  private:
  const ::dydxprotocol::clob::OrderId& _internal_order_ids(int index) const;
  ::dydxprotocol::clob::OrderId* _internal_add_order_ids();
  public:
  const ::dydxprotocol::clob::OrderId& order_ids(int index) const;
  ::dydxprotocol::clob::OrderId* add_order_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId >&
      order_ids() const;

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.OrdersFilledDuringLatestBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId > order_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2forder_2eproto;
};
// -------------------------------------------------------------------

class PotentiallyPrunableOrders final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.PotentiallyPrunableOrders) */ {
 public:
  inline PotentiallyPrunableOrders() : PotentiallyPrunableOrders(nullptr) {}
  ~PotentiallyPrunableOrders() override;
  explicit PROTOBUF_CONSTEXPR PotentiallyPrunableOrders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PotentiallyPrunableOrders(const PotentiallyPrunableOrders& from);
  PotentiallyPrunableOrders(PotentiallyPrunableOrders&& from) noexcept
    : PotentiallyPrunableOrders() {
    *this = ::std::move(from);
  }

  inline PotentiallyPrunableOrders& operator=(const PotentiallyPrunableOrders& from) {
    CopyFrom(from);
    return *this;
  }
  inline PotentiallyPrunableOrders& operator=(PotentiallyPrunableOrders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PotentiallyPrunableOrders& default_instance() {
    return *internal_default_instance();
  }
  static inline const PotentiallyPrunableOrders* internal_default_instance() {
    return reinterpret_cast<const PotentiallyPrunableOrders*>(
               &_PotentiallyPrunableOrders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PotentiallyPrunableOrders& a, PotentiallyPrunableOrders& b) {
    a.Swap(&b);
  }
  inline void Swap(PotentiallyPrunableOrders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PotentiallyPrunableOrders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PotentiallyPrunableOrders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PotentiallyPrunableOrders>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PotentiallyPrunableOrders& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PotentiallyPrunableOrders& from) {
    PotentiallyPrunableOrders::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PotentiallyPrunableOrders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.PotentiallyPrunableOrders";
  }
  protected:
  explicit PotentiallyPrunableOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdsFieldNumber = 1,
  };
  // repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
  int order_ids_size() const;
  private:
  int _internal_order_ids_size() const;
  public:
  void clear_order_ids();
  ::dydxprotocol::clob::OrderId* mutable_order_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId >*
      mutable_order_ids();
  private:
  const ::dydxprotocol::clob::OrderId& _internal_order_ids(int index) const;
  ::dydxprotocol::clob::OrderId* _internal_add_order_ids();
  public:
  const ::dydxprotocol::clob::OrderId& order_ids(int index) const;
  ::dydxprotocol::clob::OrderId* add_order_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId >&
      order_ids() const;

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.PotentiallyPrunableOrders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId > order_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2forder_2eproto;
};
// -------------------------------------------------------------------

class OrderFillState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.OrderFillState) */ {
 public:
  inline OrderFillState() : OrderFillState(nullptr) {}
  ~OrderFillState() override;
  explicit PROTOBUF_CONSTEXPR OrderFillState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderFillState(const OrderFillState& from);
  OrderFillState(OrderFillState&& from) noexcept
    : OrderFillState() {
    *this = ::std::move(from);
  }

  inline OrderFillState& operator=(const OrderFillState& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderFillState& operator=(OrderFillState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderFillState& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderFillState* internal_default_instance() {
    return reinterpret_cast<const OrderFillState*>(
               &_OrderFillState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OrderFillState& a, OrderFillState& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderFillState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderFillState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderFillState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderFillState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderFillState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderFillState& from) {
    OrderFillState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderFillState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.OrderFillState";
  }
  protected:
  explicit OrderFillState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillAmountFieldNumber = 1,
    kPrunableBlockHeightFieldNumber = 2,
  };
  // uint64 fill_amount = 1;
  void clear_fill_amount();
  uint64_t fill_amount() const;
  void set_fill_amount(uint64_t value);
  private:
  uint64_t _internal_fill_amount() const;
  void _internal_set_fill_amount(uint64_t value);
  public:

  // uint32 prunable_block_height = 2;
  void clear_prunable_block_height();
  uint32_t prunable_block_height() const;
  void set_prunable_block_height(uint32_t value);
  private:
  uint32_t _internal_prunable_block_height() const;
  void _internal_set_prunable_block_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.OrderFillState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t fill_amount_;
    uint32_t prunable_block_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2forder_2eproto;
};
// -------------------------------------------------------------------

class StatefulOrderTimeSliceValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.StatefulOrderTimeSliceValue) */ {
 public:
  inline StatefulOrderTimeSliceValue() : StatefulOrderTimeSliceValue(nullptr) {}
  ~StatefulOrderTimeSliceValue() override;
  explicit PROTOBUF_CONSTEXPR StatefulOrderTimeSliceValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatefulOrderTimeSliceValue(const StatefulOrderTimeSliceValue& from);
  StatefulOrderTimeSliceValue(StatefulOrderTimeSliceValue&& from) noexcept
    : StatefulOrderTimeSliceValue() {
    *this = ::std::move(from);
  }

  inline StatefulOrderTimeSliceValue& operator=(const StatefulOrderTimeSliceValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatefulOrderTimeSliceValue& operator=(StatefulOrderTimeSliceValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatefulOrderTimeSliceValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatefulOrderTimeSliceValue* internal_default_instance() {
    return reinterpret_cast<const StatefulOrderTimeSliceValue*>(
               &_StatefulOrderTimeSliceValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StatefulOrderTimeSliceValue& a, StatefulOrderTimeSliceValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StatefulOrderTimeSliceValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatefulOrderTimeSliceValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatefulOrderTimeSliceValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatefulOrderTimeSliceValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatefulOrderTimeSliceValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatefulOrderTimeSliceValue& from) {
    StatefulOrderTimeSliceValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatefulOrderTimeSliceValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.StatefulOrderTimeSliceValue";
  }
  protected:
  explicit StatefulOrderTimeSliceValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdsFieldNumber = 1,
  };
  // repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
  int order_ids_size() const;
  private:
  int _internal_order_ids_size() const;
  public:
  void clear_order_ids();
  ::dydxprotocol::clob::OrderId* mutable_order_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId >*
      mutable_order_ids();
  private:
  const ::dydxprotocol::clob::OrderId& _internal_order_ids(int index) const;
  ::dydxprotocol::clob::OrderId* _internal_add_order_ids();
  public:
  const ::dydxprotocol::clob::OrderId& order_ids(int index) const;
  ::dydxprotocol::clob::OrderId* add_order_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId >&
      order_ids() const;

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.StatefulOrderTimeSliceValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId > order_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2forder_2eproto;
};
// -------------------------------------------------------------------

class LongTermOrderPlacement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.LongTermOrderPlacement) */ {
 public:
  inline LongTermOrderPlacement() : LongTermOrderPlacement(nullptr) {}
  ~LongTermOrderPlacement() override;
  explicit PROTOBUF_CONSTEXPR LongTermOrderPlacement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LongTermOrderPlacement(const LongTermOrderPlacement& from);
  LongTermOrderPlacement(LongTermOrderPlacement&& from) noexcept
    : LongTermOrderPlacement() {
    *this = ::std::move(from);
  }

  inline LongTermOrderPlacement& operator=(const LongTermOrderPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongTermOrderPlacement& operator=(LongTermOrderPlacement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LongTermOrderPlacement& default_instance() {
    return *internal_default_instance();
  }
  static inline const LongTermOrderPlacement* internal_default_instance() {
    return reinterpret_cast<const LongTermOrderPlacement*>(
               &_LongTermOrderPlacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LongTermOrderPlacement& a, LongTermOrderPlacement& b) {
    a.Swap(&b);
  }
  inline void Swap(LongTermOrderPlacement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LongTermOrderPlacement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LongTermOrderPlacement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LongTermOrderPlacement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LongTermOrderPlacement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LongTermOrderPlacement& from) {
    LongTermOrderPlacement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongTermOrderPlacement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.LongTermOrderPlacement";
  }
  protected:
  explicit LongTermOrderPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
    kPlacementIndexFieldNumber = 2,
  };
  // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::dydxprotocol::clob::Order& order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::Order* release_order();
  ::dydxprotocol::clob::Order* mutable_order();
  void set_allocated_order(::dydxprotocol::clob::Order* order);
  private:
  const ::dydxprotocol::clob::Order& _internal_order() const;
  ::dydxprotocol::clob::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::dydxprotocol::clob::Order* order);
  ::dydxprotocol::clob::Order* unsafe_arena_release_order();

  // .dydxprotocol.clob.TransactionOrdering placement_index = 2 [(.gogoproto.nullable) = false];
  bool has_placement_index() const;
  private:
  bool _internal_has_placement_index() const;
  public:
  void clear_placement_index();
  const ::dydxprotocol::clob::TransactionOrdering& placement_index() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::TransactionOrdering* release_placement_index();
  ::dydxprotocol::clob::TransactionOrdering* mutable_placement_index();
  void set_allocated_placement_index(::dydxprotocol::clob::TransactionOrdering* placement_index);
  private:
  const ::dydxprotocol::clob::TransactionOrdering& _internal_placement_index() const;
  ::dydxprotocol::clob::TransactionOrdering* _internal_mutable_placement_index();
  public:
  void unsafe_arena_set_allocated_placement_index(
      ::dydxprotocol::clob::TransactionOrdering* placement_index);
  ::dydxprotocol::clob::TransactionOrdering* unsafe_arena_release_placement_index();

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.LongTermOrderPlacement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dydxprotocol::clob::Order* order_;
    ::dydxprotocol::clob::TransactionOrdering* placement_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2forder_2eproto;
};
// -------------------------------------------------------------------

class ConditionalOrderPlacement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.ConditionalOrderPlacement) */ {
 public:
  inline ConditionalOrderPlacement() : ConditionalOrderPlacement(nullptr) {}
  ~ConditionalOrderPlacement() override;
  explicit PROTOBUF_CONSTEXPR ConditionalOrderPlacement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConditionalOrderPlacement(const ConditionalOrderPlacement& from);
  ConditionalOrderPlacement(ConditionalOrderPlacement&& from) noexcept
    : ConditionalOrderPlacement() {
    *this = ::std::move(from);
  }

  inline ConditionalOrderPlacement& operator=(const ConditionalOrderPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionalOrderPlacement& operator=(ConditionalOrderPlacement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConditionalOrderPlacement& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConditionalOrderPlacement* internal_default_instance() {
    return reinterpret_cast<const ConditionalOrderPlacement*>(
               &_ConditionalOrderPlacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConditionalOrderPlacement& a, ConditionalOrderPlacement& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionalOrderPlacement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionalOrderPlacement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConditionalOrderPlacement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConditionalOrderPlacement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConditionalOrderPlacement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConditionalOrderPlacement& from) {
    ConditionalOrderPlacement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionalOrderPlacement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.ConditionalOrderPlacement";
  }
  protected:
  explicit ConditionalOrderPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
    kPlacementIndexFieldNumber = 2,
    kTriggerIndexFieldNumber = 3,
  };
  // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::dydxprotocol::clob::Order& order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::Order* release_order();
  ::dydxprotocol::clob::Order* mutable_order();
  void set_allocated_order(::dydxprotocol::clob::Order* order);
  private:
  const ::dydxprotocol::clob::Order& _internal_order() const;
  ::dydxprotocol::clob::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::dydxprotocol::clob::Order* order);
  ::dydxprotocol::clob::Order* unsafe_arena_release_order();

  // .dydxprotocol.clob.TransactionOrdering placement_index = 2 [(.gogoproto.nullable) = false];
  bool has_placement_index() const;
  private:
  bool _internal_has_placement_index() const;
  public:
  void clear_placement_index();
  const ::dydxprotocol::clob::TransactionOrdering& placement_index() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::TransactionOrdering* release_placement_index();
  ::dydxprotocol::clob::TransactionOrdering* mutable_placement_index();
  void set_allocated_placement_index(::dydxprotocol::clob::TransactionOrdering* placement_index);
  private:
  const ::dydxprotocol::clob::TransactionOrdering& _internal_placement_index() const;
  ::dydxprotocol::clob::TransactionOrdering* _internal_mutable_placement_index();
  public:
  void unsafe_arena_set_allocated_placement_index(
      ::dydxprotocol::clob::TransactionOrdering* placement_index);
  ::dydxprotocol::clob::TransactionOrdering* unsafe_arena_release_placement_index();

  // .dydxprotocol.clob.TransactionOrdering trigger_index = 3;
  bool has_trigger_index() const;
  private:
  bool _internal_has_trigger_index() const;
  public:
  void clear_trigger_index();
  const ::dydxprotocol::clob::TransactionOrdering& trigger_index() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::TransactionOrdering* release_trigger_index();
  ::dydxprotocol::clob::TransactionOrdering* mutable_trigger_index();
  void set_allocated_trigger_index(::dydxprotocol::clob::TransactionOrdering* trigger_index);
  private:
  const ::dydxprotocol::clob::TransactionOrdering& _internal_trigger_index() const;
  ::dydxprotocol::clob::TransactionOrdering* _internal_mutable_trigger_index();
  public:
  void unsafe_arena_set_allocated_trigger_index(
      ::dydxprotocol::clob::TransactionOrdering* trigger_index);
  ::dydxprotocol::clob::TransactionOrdering* unsafe_arena_release_trigger_index();

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.ConditionalOrderPlacement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dydxprotocol::clob::Order* order_;
    ::dydxprotocol::clob::TransactionOrdering* placement_index_;
    ::dydxprotocol::clob::TransactionOrdering* trigger_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2forder_2eproto;
};
// -------------------------------------------------------------------

class Order final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  ~Order() override;
  explicit PROTOBUF_CONSTEXPR Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Order& default_instance() {
    return *internal_default_instance();
  }
  enum GoodTilOneofCase {
    kGoodTilBlock = 5,
    kGoodTilBlockTime = 6,
    GOOD_TIL_ONEOF_NOT_SET = 0,
  };

  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Order& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Order& from) {
    Order::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Order_Side Side;
  static constexpr Side SIDE_UNSPECIFIED =
    Order_Side_SIDE_UNSPECIFIED;
  static constexpr Side SIDE_BUY =
    Order_Side_SIDE_BUY;
  static constexpr Side SIDE_SELL =
    Order_Side_SIDE_SELL;
  static inline bool Side_IsValid(int value) {
    return Order_Side_IsValid(value);
  }
  static constexpr Side Side_MIN =
    Order_Side_Side_MIN;
  static constexpr Side Side_MAX =
    Order_Side_Side_MAX;
  static constexpr int Side_ARRAYSIZE =
    Order_Side_Side_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Side_descriptor() {
    return Order_Side_descriptor();
  }
  template<typename T>
  static inline const std::string& Side_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Side>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Side_Name.");
    return Order_Side_Name(enum_t_value);
  }
  static inline bool Side_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Side* value) {
    return Order_Side_Parse(name, value);
  }

  typedef Order_TimeInForce TimeInForce;
  static constexpr TimeInForce TIME_IN_FORCE_UNSPECIFIED =
    Order_TimeInForce_TIME_IN_FORCE_UNSPECIFIED;
  static constexpr TimeInForce TIME_IN_FORCE_IOC =
    Order_TimeInForce_TIME_IN_FORCE_IOC;
  static constexpr TimeInForce TIME_IN_FORCE_POST_ONLY =
    Order_TimeInForce_TIME_IN_FORCE_POST_ONLY;
  static constexpr TimeInForce TIME_IN_FORCE_FILL_OR_KILL =
    Order_TimeInForce_TIME_IN_FORCE_FILL_OR_KILL;
  static inline bool TimeInForce_IsValid(int value) {
    return Order_TimeInForce_IsValid(value);
  }
  static constexpr TimeInForce TimeInForce_MIN =
    Order_TimeInForce_TimeInForce_MIN;
  static constexpr TimeInForce TimeInForce_MAX =
    Order_TimeInForce_TimeInForce_MAX;
  static constexpr int TimeInForce_ARRAYSIZE =
    Order_TimeInForce_TimeInForce_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TimeInForce_descriptor() {
    return Order_TimeInForce_descriptor();
  }
  template<typename T>
  static inline const std::string& TimeInForce_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TimeInForce>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TimeInForce_Name.");
    return Order_TimeInForce_Name(enum_t_value);
  }
  static inline bool TimeInForce_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TimeInForce* value) {
    return Order_TimeInForce_Parse(name, value);
  }

  typedef Order_ConditionType ConditionType;
  static constexpr ConditionType CONDITION_TYPE_UNSPECIFIED =
    Order_ConditionType_CONDITION_TYPE_UNSPECIFIED;
  static constexpr ConditionType CONDITION_TYPE_STOP_LOSS =
    Order_ConditionType_CONDITION_TYPE_STOP_LOSS;
  static constexpr ConditionType CONDITION_TYPE_TAKE_PROFIT =
    Order_ConditionType_CONDITION_TYPE_TAKE_PROFIT;
  static inline bool ConditionType_IsValid(int value) {
    return Order_ConditionType_IsValid(value);
  }
  static constexpr ConditionType ConditionType_MIN =
    Order_ConditionType_ConditionType_MIN;
  static constexpr ConditionType ConditionType_MAX =
    Order_ConditionType_ConditionType_MAX;
  static constexpr int ConditionType_ARRAYSIZE =
    Order_ConditionType_ConditionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConditionType_descriptor() {
    return Order_ConditionType_descriptor();
  }
  template<typename T>
  static inline const std::string& ConditionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConditionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConditionType_Name.");
    return Order_ConditionType_Name(enum_t_value);
  }
  static inline bool ConditionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ConditionType* value) {
    return Order_ConditionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kQuantumsFieldNumber = 3,
    kSubticksFieldNumber = 4,
    kSideFieldNumber = 2,
    kTimeInForceFieldNumber = 7,
    kReduceOnlyFieldNumber = 8,
    kClientMetadataFieldNumber = 9,
    kConditionalOrderTriggerSubticksFieldNumber = 11,
    kConditionTypeFieldNumber = 10,
    kGoodTilBlockFieldNumber = 5,
    kGoodTilBlockTimeFieldNumber = 6,
  };
  // .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
  bool has_order_id() const;
  private:
  bool _internal_has_order_id() const;
  public:
  void clear_order_id();
  const ::dydxprotocol::clob::OrderId& order_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::OrderId* release_order_id();
  ::dydxprotocol::clob::OrderId* mutable_order_id();
  void set_allocated_order_id(::dydxprotocol::clob::OrderId* order_id);
  private:
  const ::dydxprotocol::clob::OrderId& _internal_order_id() const;
  ::dydxprotocol::clob::OrderId* _internal_mutable_order_id();
  public:
  void unsafe_arena_set_allocated_order_id(
      ::dydxprotocol::clob::OrderId* order_id);
  ::dydxprotocol::clob::OrderId* unsafe_arena_release_order_id();

  // uint64 quantums = 3;
  void clear_quantums();
  uint64_t quantums() const;
  void set_quantums(uint64_t value);
  private:
  uint64_t _internal_quantums() const;
  void _internal_set_quantums(uint64_t value);
  public:

  // uint64 subticks = 4;
  void clear_subticks();
  uint64_t subticks() const;
  void set_subticks(uint64_t value);
  private:
  uint64_t _internal_subticks() const;
  void _internal_set_subticks(uint64_t value);
  public:

  // .dydxprotocol.clob.Order.Side side = 2;
  void clear_side();
  ::dydxprotocol::clob::Order_Side side() const;
  void set_side(::dydxprotocol::clob::Order_Side value);
  private:
  ::dydxprotocol::clob::Order_Side _internal_side() const;
  void _internal_set_side(::dydxprotocol::clob::Order_Side value);
  public:

  // .dydxprotocol.clob.Order.TimeInForce time_in_force = 7;
  void clear_time_in_force();
  ::dydxprotocol::clob::Order_TimeInForce time_in_force() const;
  void set_time_in_force(::dydxprotocol::clob::Order_TimeInForce value);
  private:
  ::dydxprotocol::clob::Order_TimeInForce _internal_time_in_force() const;
  void _internal_set_time_in_force(::dydxprotocol::clob::Order_TimeInForce value);
  public:

  // bool reduce_only = 8;
  void clear_reduce_only();
  bool reduce_only() const;
  void set_reduce_only(bool value);
  private:
  bool _internal_reduce_only() const;
  void _internal_set_reduce_only(bool value);
  public:

  // uint32 client_metadata = 9;
  void clear_client_metadata();
  uint32_t client_metadata() const;
  void set_client_metadata(uint32_t value);
  private:
  uint32_t _internal_client_metadata() const;
  void _internal_set_client_metadata(uint32_t value);
  public:

  // uint64 conditional_order_trigger_subticks = 11;
  void clear_conditional_order_trigger_subticks();
  uint64_t conditional_order_trigger_subticks() const;
  void set_conditional_order_trigger_subticks(uint64_t value);
  private:
  uint64_t _internal_conditional_order_trigger_subticks() const;
  void _internal_set_conditional_order_trigger_subticks(uint64_t value);
  public:

  // .dydxprotocol.clob.Order.ConditionType condition_type = 10;
  void clear_condition_type();
  ::dydxprotocol::clob::Order_ConditionType condition_type() const;
  void set_condition_type(::dydxprotocol::clob::Order_ConditionType value);
  private:
  ::dydxprotocol::clob::Order_ConditionType _internal_condition_type() const;
  void _internal_set_condition_type(::dydxprotocol::clob::Order_ConditionType value);
  public:

  // uint32 good_til_block = 5;
  bool has_good_til_block() const;
  private:
  bool _internal_has_good_til_block() const;
  public:
  void clear_good_til_block();
  uint32_t good_til_block() const;
  void set_good_til_block(uint32_t value);
  private:
  uint32_t _internal_good_til_block() const;
  void _internal_set_good_til_block(uint32_t value);
  public:

  // fixed32 good_til_block_time = 6;
  bool has_good_til_block_time() const;
  private:
  bool _internal_has_good_til_block_time() const;
  public:
  void clear_good_til_block_time();
  uint32_t good_til_block_time() const;
  void set_good_til_block_time(uint32_t value);
  private:
  uint32_t _internal_good_til_block_time() const;
  void _internal_set_good_til_block_time(uint32_t value);
  public:

  void clear_good_til_oneof();
  GoodTilOneofCase good_til_oneof_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.Order)
 private:
  class _Internal;
  void set_has_good_til_block();
  void set_has_good_til_block_time();

  inline bool has_good_til_oneof() const;
  inline void clear_has_good_til_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dydxprotocol::clob::OrderId* order_id_;
    uint64_t quantums_;
    uint64_t subticks_;
    int side_;
    int time_in_force_;
    bool reduce_only_;
    uint32_t client_metadata_;
    uint64_t conditional_order_trigger_subticks_;
    int condition_type_;
    union GoodTilOneofUnion {
      constexpr GoodTilOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t good_til_block_;
      uint32_t good_til_block_time_;
    } good_til_oneof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2forder_2eproto;
};
// -------------------------------------------------------------------

class TransactionOrdering final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.TransactionOrdering) */ {
 public:
  inline TransactionOrdering() : TransactionOrdering(nullptr) {}
  ~TransactionOrdering() override;
  explicit PROTOBUF_CONSTEXPR TransactionOrdering(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionOrdering(const TransactionOrdering& from);
  TransactionOrdering(TransactionOrdering&& from) noexcept
    : TransactionOrdering() {
    *this = ::std::move(from);
  }

  inline TransactionOrdering& operator=(const TransactionOrdering& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOrdering& operator=(TransactionOrdering&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOrdering& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionOrdering* internal_default_instance() {
    return reinterpret_cast<const TransactionOrdering*>(
               &_TransactionOrdering_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TransactionOrdering& a, TransactionOrdering& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOrdering* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOrdering* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOrdering* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOrdering>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionOrdering& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransactionOrdering& from) {
    TransactionOrdering::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOrdering* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.clob.TransactionOrdering";
  }
  protected:
  explicit TransactionOrdering(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockHeightFieldNumber = 1,
    kTransactionIndexFieldNumber = 2,
  };
  // uint32 block_height = 1;
  void clear_block_height();
  uint32_t block_height() const;
  void set_block_height(uint32_t value);
  private:
  uint32_t _internal_block_height() const;
  void _internal_set_block_height(uint32_t value);
  public:

  // uint32 transaction_index = 2;
  void clear_transaction_index();
  uint32_t transaction_index() const;
  void set_transaction_index(uint32_t value);
  private:
  uint32_t _internal_transaction_index() const;
  void _internal_set_transaction_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.TransactionOrdering)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t block_height_;
    uint32_t transaction_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2forder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrderId

// .dydxprotocol.subaccounts.SubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
inline bool OrderId::_internal_has_subaccount_id() const {
  return this != internal_default_instance() && _impl_.subaccount_id_ != nullptr;
}
inline bool OrderId::has_subaccount_id() const {
  return _internal_has_subaccount_id();
}
inline const ::dydxprotocol::subaccounts::SubaccountId& OrderId::_internal_subaccount_id() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.subaccount_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& OrderId::subaccount_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OrderId.subaccount_id)
  return _internal_subaccount_id();
}
inline void OrderId::unsafe_arena_set_allocated_subaccount_id(
    ::dydxprotocol::subaccounts::SubaccountId* subaccount_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_id_);
  }
  _impl_.subaccount_id_ = subaccount_id;
  if (subaccount_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.OrderId.subaccount_id)
}
inline ::dydxprotocol::subaccounts::SubaccountId* OrderId::release_subaccount_id() {
  
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.subaccount_id_;
  _impl_.subaccount_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* OrderId::unsafe_arena_release_subaccount_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.OrderId.subaccount_id)
  
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.subaccount_id_;
  _impl_.subaccount_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* OrderId::_internal_mutable_subaccount_id() {
  
  if (_impl_.subaccount_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.subaccount_id_ = p;
  }
  return _impl_.subaccount_id_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* OrderId::mutable_subaccount_id() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.OrderId.subaccount_id)
  return _msg;
}
inline void OrderId::set_allocated_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* subaccount_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_id_);
  }
  if (subaccount_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subaccount_id));
    if (message_arena != submessage_arena) {
      subaccount_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subaccount_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.subaccount_id_ = subaccount_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.OrderId.subaccount_id)
}

// fixed32 client_id = 2;
inline void OrderId::clear_client_id() {
  _impl_.client_id_ = 0u;
}
inline uint32_t OrderId::_internal_client_id() const {
  return _impl_.client_id_;
}
inline uint32_t OrderId::client_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OrderId.client_id)
  return _internal_client_id();
}
inline void OrderId::_internal_set_client_id(uint32_t value) {
  
  _impl_.client_id_ = value;
}
inline void OrderId::set_client_id(uint32_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.OrderId.client_id)
}

// uint32 order_flags = 3;
inline void OrderId::clear_order_flags() {
  _impl_.order_flags_ = 0u;
}
inline uint32_t OrderId::_internal_order_flags() const {
  return _impl_.order_flags_;
}
inline uint32_t OrderId::order_flags() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OrderId.order_flags)
  return _internal_order_flags();
}
inline void OrderId::_internal_set_order_flags(uint32_t value) {
  
  _impl_.order_flags_ = value;
}
inline void OrderId::set_order_flags(uint32_t value) {
  _internal_set_order_flags(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.OrderId.order_flags)
}

// uint32 clob_pair_id = 4;
inline void OrderId::clear_clob_pair_id() {
  _impl_.clob_pair_id_ = 0u;
}
inline uint32_t OrderId::_internal_clob_pair_id() const {
  return _impl_.clob_pair_id_;
}
inline uint32_t OrderId::clob_pair_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OrderId.clob_pair_id)
  return _internal_clob_pair_id();
}
inline void OrderId::_internal_set_clob_pair_id(uint32_t value) {
  
  _impl_.clob_pair_id_ = value;
}
inline void OrderId::set_clob_pair_id(uint32_t value) {
  _internal_set_clob_pair_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.OrderId.clob_pair_id)
}

// -------------------------------------------------------------------

// OrdersFilledDuringLatestBlock

// repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
inline int OrdersFilledDuringLatestBlock::_internal_order_ids_size() const {
  return _impl_.order_ids_.size();
}
inline int OrdersFilledDuringLatestBlock::order_ids_size() const {
  return _internal_order_ids_size();
}
inline void OrdersFilledDuringLatestBlock::clear_order_ids() {
  _impl_.order_ids_.Clear();
}
inline ::dydxprotocol::clob::OrderId* OrdersFilledDuringLatestBlock::mutable_order_ids(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.OrdersFilledDuringLatestBlock.order_ids)
  return _impl_.order_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId >*
OrdersFilledDuringLatestBlock::mutable_order_ids() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.OrdersFilledDuringLatestBlock.order_ids)
  return &_impl_.order_ids_;
}
inline const ::dydxprotocol::clob::OrderId& OrdersFilledDuringLatestBlock::_internal_order_ids(int index) const {
  return _impl_.order_ids_.Get(index);
}
inline const ::dydxprotocol::clob::OrderId& OrdersFilledDuringLatestBlock::order_ids(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OrdersFilledDuringLatestBlock.order_ids)
  return _internal_order_ids(index);
}
inline ::dydxprotocol::clob::OrderId* OrdersFilledDuringLatestBlock::_internal_add_order_ids() {
  return _impl_.order_ids_.Add();
}
inline ::dydxprotocol::clob::OrderId* OrdersFilledDuringLatestBlock::add_order_ids() {
  ::dydxprotocol::clob::OrderId* _add = _internal_add_order_ids();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.OrdersFilledDuringLatestBlock.order_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId >&
OrdersFilledDuringLatestBlock::order_ids() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.OrdersFilledDuringLatestBlock.order_ids)
  return _impl_.order_ids_;
}

// -------------------------------------------------------------------

// PotentiallyPrunableOrders

// repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
inline int PotentiallyPrunableOrders::_internal_order_ids_size() const {
  return _impl_.order_ids_.size();
}
inline int PotentiallyPrunableOrders::order_ids_size() const {
  return _internal_order_ids_size();
}
inline void PotentiallyPrunableOrders::clear_order_ids() {
  _impl_.order_ids_.Clear();
}
inline ::dydxprotocol::clob::OrderId* PotentiallyPrunableOrders::mutable_order_ids(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.PotentiallyPrunableOrders.order_ids)
  return _impl_.order_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId >*
PotentiallyPrunableOrders::mutable_order_ids() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.PotentiallyPrunableOrders.order_ids)
  return &_impl_.order_ids_;
}
inline const ::dydxprotocol::clob::OrderId& PotentiallyPrunableOrders::_internal_order_ids(int index) const {
  return _impl_.order_ids_.Get(index);
}
inline const ::dydxprotocol::clob::OrderId& PotentiallyPrunableOrders::order_ids(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.PotentiallyPrunableOrders.order_ids)
  return _internal_order_ids(index);
}
inline ::dydxprotocol::clob::OrderId* PotentiallyPrunableOrders::_internal_add_order_ids() {
  return _impl_.order_ids_.Add();
}
inline ::dydxprotocol::clob::OrderId* PotentiallyPrunableOrders::add_order_ids() {
  ::dydxprotocol::clob::OrderId* _add = _internal_add_order_ids();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.PotentiallyPrunableOrders.order_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId >&
PotentiallyPrunableOrders::order_ids() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.PotentiallyPrunableOrders.order_ids)
  return _impl_.order_ids_;
}

// -------------------------------------------------------------------

// OrderFillState

// uint64 fill_amount = 1;
inline void OrderFillState::clear_fill_amount() {
  _impl_.fill_amount_ = uint64_t{0u};
}
inline uint64_t OrderFillState::_internal_fill_amount() const {
  return _impl_.fill_amount_;
}
inline uint64_t OrderFillState::fill_amount() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OrderFillState.fill_amount)
  return _internal_fill_amount();
}
inline void OrderFillState::_internal_set_fill_amount(uint64_t value) {
  
  _impl_.fill_amount_ = value;
}
inline void OrderFillState::set_fill_amount(uint64_t value) {
  _internal_set_fill_amount(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.OrderFillState.fill_amount)
}

// uint32 prunable_block_height = 2;
inline void OrderFillState::clear_prunable_block_height() {
  _impl_.prunable_block_height_ = 0u;
}
inline uint32_t OrderFillState::_internal_prunable_block_height() const {
  return _impl_.prunable_block_height_;
}
inline uint32_t OrderFillState::prunable_block_height() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OrderFillState.prunable_block_height)
  return _internal_prunable_block_height();
}
inline void OrderFillState::_internal_set_prunable_block_height(uint32_t value) {
  
  _impl_.prunable_block_height_ = value;
}
inline void OrderFillState::set_prunable_block_height(uint32_t value) {
  _internal_set_prunable_block_height(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.OrderFillState.prunable_block_height)
}

// -------------------------------------------------------------------

// StatefulOrderTimeSliceValue

// repeated .dydxprotocol.clob.OrderId order_ids = 1 [(.gogoproto.nullable) = false];
inline int StatefulOrderTimeSliceValue::_internal_order_ids_size() const {
  return _impl_.order_ids_.size();
}
inline int StatefulOrderTimeSliceValue::order_ids_size() const {
  return _internal_order_ids_size();
}
inline void StatefulOrderTimeSliceValue::clear_order_ids() {
  _impl_.order_ids_.Clear();
}
inline ::dydxprotocol::clob::OrderId* StatefulOrderTimeSliceValue::mutable_order_ids(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.StatefulOrderTimeSliceValue.order_ids)
  return _impl_.order_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId >*
StatefulOrderTimeSliceValue::mutable_order_ids() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.StatefulOrderTimeSliceValue.order_ids)
  return &_impl_.order_ids_;
}
inline const ::dydxprotocol::clob::OrderId& StatefulOrderTimeSliceValue::_internal_order_ids(int index) const {
  return _impl_.order_ids_.Get(index);
}
inline const ::dydxprotocol::clob::OrderId& StatefulOrderTimeSliceValue::order_ids(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.StatefulOrderTimeSliceValue.order_ids)
  return _internal_order_ids(index);
}
inline ::dydxprotocol::clob::OrderId* StatefulOrderTimeSliceValue::_internal_add_order_ids() {
  return _impl_.order_ids_.Add();
}
inline ::dydxprotocol::clob::OrderId* StatefulOrderTimeSliceValue::add_order_ids() {
  ::dydxprotocol::clob::OrderId* _add = _internal_add_order_ids();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.StatefulOrderTimeSliceValue.order_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OrderId >&
StatefulOrderTimeSliceValue::order_ids() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.StatefulOrderTimeSliceValue.order_ids)
  return _impl_.order_ids_;
}

// -------------------------------------------------------------------

// LongTermOrderPlacement

// .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
inline bool LongTermOrderPlacement::_internal_has_order() const {
  return this != internal_default_instance() && _impl_.order_ != nullptr;
}
inline bool LongTermOrderPlacement::has_order() const {
  return _internal_has_order();
}
inline void LongTermOrderPlacement::clear_order() {
  if (GetArenaForAllocation() == nullptr && _impl_.order_ != nullptr) {
    delete _impl_.order_;
  }
  _impl_.order_ = nullptr;
}
inline const ::dydxprotocol::clob::Order& LongTermOrderPlacement::_internal_order() const {
  const ::dydxprotocol::clob::Order* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::Order&>(
      ::dydxprotocol::clob::_Order_default_instance_);
}
inline const ::dydxprotocol::clob::Order& LongTermOrderPlacement::order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.LongTermOrderPlacement.order)
  return _internal_order();
}
inline void LongTermOrderPlacement::unsafe_arena_set_allocated_order(
    ::dydxprotocol::clob::Order* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.LongTermOrderPlacement.order)
}
inline ::dydxprotocol::clob::Order* LongTermOrderPlacement::release_order() {
  
  ::dydxprotocol::clob::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::Order* LongTermOrderPlacement::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.LongTermOrderPlacement.order)
  
  ::dydxprotocol::clob::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::Order* LongTermOrderPlacement::_internal_mutable_order() {
  
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::Order>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::dydxprotocol::clob::Order* LongTermOrderPlacement::mutable_order() {
  ::dydxprotocol::clob::Order* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.LongTermOrderPlacement.order)
  return _msg;
}
inline void LongTermOrderPlacement::set_allocated_order(::dydxprotocol::clob::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.LongTermOrderPlacement.order)
}

// .dydxprotocol.clob.TransactionOrdering placement_index = 2 [(.gogoproto.nullable) = false];
inline bool LongTermOrderPlacement::_internal_has_placement_index() const {
  return this != internal_default_instance() && _impl_.placement_index_ != nullptr;
}
inline bool LongTermOrderPlacement::has_placement_index() const {
  return _internal_has_placement_index();
}
inline void LongTermOrderPlacement::clear_placement_index() {
  if (GetArenaForAllocation() == nullptr && _impl_.placement_index_ != nullptr) {
    delete _impl_.placement_index_;
  }
  _impl_.placement_index_ = nullptr;
}
inline const ::dydxprotocol::clob::TransactionOrdering& LongTermOrderPlacement::_internal_placement_index() const {
  const ::dydxprotocol::clob::TransactionOrdering* p = _impl_.placement_index_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::TransactionOrdering&>(
      ::dydxprotocol::clob::_TransactionOrdering_default_instance_);
}
inline const ::dydxprotocol::clob::TransactionOrdering& LongTermOrderPlacement::placement_index() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.LongTermOrderPlacement.placement_index)
  return _internal_placement_index();
}
inline void LongTermOrderPlacement::unsafe_arena_set_allocated_placement_index(
    ::dydxprotocol::clob::TransactionOrdering* placement_index) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.placement_index_);
  }
  _impl_.placement_index_ = placement_index;
  if (placement_index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.LongTermOrderPlacement.placement_index)
}
inline ::dydxprotocol::clob::TransactionOrdering* LongTermOrderPlacement::release_placement_index() {
  
  ::dydxprotocol::clob::TransactionOrdering* temp = _impl_.placement_index_;
  _impl_.placement_index_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::TransactionOrdering* LongTermOrderPlacement::unsafe_arena_release_placement_index() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.LongTermOrderPlacement.placement_index)
  
  ::dydxprotocol::clob::TransactionOrdering* temp = _impl_.placement_index_;
  _impl_.placement_index_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::TransactionOrdering* LongTermOrderPlacement::_internal_mutable_placement_index() {
  
  if (_impl_.placement_index_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::TransactionOrdering>(GetArenaForAllocation());
    _impl_.placement_index_ = p;
  }
  return _impl_.placement_index_;
}
inline ::dydxprotocol::clob::TransactionOrdering* LongTermOrderPlacement::mutable_placement_index() {
  ::dydxprotocol::clob::TransactionOrdering* _msg = _internal_mutable_placement_index();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.LongTermOrderPlacement.placement_index)
  return _msg;
}
inline void LongTermOrderPlacement::set_allocated_placement_index(::dydxprotocol::clob::TransactionOrdering* placement_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.placement_index_;
  }
  if (placement_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(placement_index);
    if (message_arena != submessage_arena) {
      placement_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placement_index, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.placement_index_ = placement_index;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.LongTermOrderPlacement.placement_index)
}

// -------------------------------------------------------------------

// ConditionalOrderPlacement

// .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
inline bool ConditionalOrderPlacement::_internal_has_order() const {
  return this != internal_default_instance() && _impl_.order_ != nullptr;
}
inline bool ConditionalOrderPlacement::has_order() const {
  return _internal_has_order();
}
inline void ConditionalOrderPlacement::clear_order() {
  if (GetArenaForAllocation() == nullptr && _impl_.order_ != nullptr) {
    delete _impl_.order_;
  }
  _impl_.order_ = nullptr;
}
inline const ::dydxprotocol::clob::Order& ConditionalOrderPlacement::_internal_order() const {
  const ::dydxprotocol::clob::Order* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::Order&>(
      ::dydxprotocol::clob::_Order_default_instance_);
}
inline const ::dydxprotocol::clob::Order& ConditionalOrderPlacement::order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ConditionalOrderPlacement.order)
  return _internal_order();
}
inline void ConditionalOrderPlacement::unsafe_arena_set_allocated_order(
    ::dydxprotocol::clob::Order* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.ConditionalOrderPlacement.order)
}
inline ::dydxprotocol::clob::Order* ConditionalOrderPlacement::release_order() {
  
  ::dydxprotocol::clob::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::Order* ConditionalOrderPlacement::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.ConditionalOrderPlacement.order)
  
  ::dydxprotocol::clob::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::Order* ConditionalOrderPlacement::_internal_mutable_order() {
  
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::Order>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::dydxprotocol::clob::Order* ConditionalOrderPlacement::mutable_order() {
  ::dydxprotocol::clob::Order* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.ConditionalOrderPlacement.order)
  return _msg;
}
inline void ConditionalOrderPlacement::set_allocated_order(::dydxprotocol::clob::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.ConditionalOrderPlacement.order)
}

// .dydxprotocol.clob.TransactionOrdering placement_index = 2 [(.gogoproto.nullable) = false];
inline bool ConditionalOrderPlacement::_internal_has_placement_index() const {
  return this != internal_default_instance() && _impl_.placement_index_ != nullptr;
}
inline bool ConditionalOrderPlacement::has_placement_index() const {
  return _internal_has_placement_index();
}
inline void ConditionalOrderPlacement::clear_placement_index() {
  if (GetArenaForAllocation() == nullptr && _impl_.placement_index_ != nullptr) {
    delete _impl_.placement_index_;
  }
  _impl_.placement_index_ = nullptr;
}
inline const ::dydxprotocol::clob::TransactionOrdering& ConditionalOrderPlacement::_internal_placement_index() const {
  const ::dydxprotocol::clob::TransactionOrdering* p = _impl_.placement_index_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::TransactionOrdering&>(
      ::dydxprotocol::clob::_TransactionOrdering_default_instance_);
}
inline const ::dydxprotocol::clob::TransactionOrdering& ConditionalOrderPlacement::placement_index() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ConditionalOrderPlacement.placement_index)
  return _internal_placement_index();
}
inline void ConditionalOrderPlacement::unsafe_arena_set_allocated_placement_index(
    ::dydxprotocol::clob::TransactionOrdering* placement_index) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.placement_index_);
  }
  _impl_.placement_index_ = placement_index;
  if (placement_index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.ConditionalOrderPlacement.placement_index)
}
inline ::dydxprotocol::clob::TransactionOrdering* ConditionalOrderPlacement::release_placement_index() {
  
  ::dydxprotocol::clob::TransactionOrdering* temp = _impl_.placement_index_;
  _impl_.placement_index_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::TransactionOrdering* ConditionalOrderPlacement::unsafe_arena_release_placement_index() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.ConditionalOrderPlacement.placement_index)
  
  ::dydxprotocol::clob::TransactionOrdering* temp = _impl_.placement_index_;
  _impl_.placement_index_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::TransactionOrdering* ConditionalOrderPlacement::_internal_mutable_placement_index() {
  
  if (_impl_.placement_index_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::TransactionOrdering>(GetArenaForAllocation());
    _impl_.placement_index_ = p;
  }
  return _impl_.placement_index_;
}
inline ::dydxprotocol::clob::TransactionOrdering* ConditionalOrderPlacement::mutable_placement_index() {
  ::dydxprotocol::clob::TransactionOrdering* _msg = _internal_mutable_placement_index();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.ConditionalOrderPlacement.placement_index)
  return _msg;
}
inline void ConditionalOrderPlacement::set_allocated_placement_index(::dydxprotocol::clob::TransactionOrdering* placement_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.placement_index_;
  }
  if (placement_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(placement_index);
    if (message_arena != submessage_arena) {
      placement_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placement_index, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.placement_index_ = placement_index;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.ConditionalOrderPlacement.placement_index)
}

// .dydxprotocol.clob.TransactionOrdering trigger_index = 3;
inline bool ConditionalOrderPlacement::_internal_has_trigger_index() const {
  return this != internal_default_instance() && _impl_.trigger_index_ != nullptr;
}
inline bool ConditionalOrderPlacement::has_trigger_index() const {
  return _internal_has_trigger_index();
}
inline void ConditionalOrderPlacement::clear_trigger_index() {
  if (GetArenaForAllocation() == nullptr && _impl_.trigger_index_ != nullptr) {
    delete _impl_.trigger_index_;
  }
  _impl_.trigger_index_ = nullptr;
}
inline const ::dydxprotocol::clob::TransactionOrdering& ConditionalOrderPlacement::_internal_trigger_index() const {
  const ::dydxprotocol::clob::TransactionOrdering* p = _impl_.trigger_index_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::TransactionOrdering&>(
      ::dydxprotocol::clob::_TransactionOrdering_default_instance_);
}
inline const ::dydxprotocol::clob::TransactionOrdering& ConditionalOrderPlacement::trigger_index() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ConditionalOrderPlacement.trigger_index)
  return _internal_trigger_index();
}
inline void ConditionalOrderPlacement::unsafe_arena_set_allocated_trigger_index(
    ::dydxprotocol::clob::TransactionOrdering* trigger_index) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trigger_index_);
  }
  _impl_.trigger_index_ = trigger_index;
  if (trigger_index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.ConditionalOrderPlacement.trigger_index)
}
inline ::dydxprotocol::clob::TransactionOrdering* ConditionalOrderPlacement::release_trigger_index() {
  
  ::dydxprotocol::clob::TransactionOrdering* temp = _impl_.trigger_index_;
  _impl_.trigger_index_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::TransactionOrdering* ConditionalOrderPlacement::unsafe_arena_release_trigger_index() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.ConditionalOrderPlacement.trigger_index)
  
  ::dydxprotocol::clob::TransactionOrdering* temp = _impl_.trigger_index_;
  _impl_.trigger_index_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::TransactionOrdering* ConditionalOrderPlacement::_internal_mutable_trigger_index() {
  
  if (_impl_.trigger_index_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::TransactionOrdering>(GetArenaForAllocation());
    _impl_.trigger_index_ = p;
  }
  return _impl_.trigger_index_;
}
inline ::dydxprotocol::clob::TransactionOrdering* ConditionalOrderPlacement::mutable_trigger_index() {
  ::dydxprotocol::clob::TransactionOrdering* _msg = _internal_mutable_trigger_index();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.ConditionalOrderPlacement.trigger_index)
  return _msg;
}
inline void ConditionalOrderPlacement::set_allocated_trigger_index(::dydxprotocol::clob::TransactionOrdering* trigger_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trigger_index_;
  }
  if (trigger_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trigger_index);
    if (message_arena != submessage_arena) {
      trigger_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_index, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trigger_index_ = trigger_index;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.ConditionalOrderPlacement.trigger_index)
}

// -------------------------------------------------------------------

// Order

// .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
inline bool Order::_internal_has_order_id() const {
  return this != internal_default_instance() && _impl_.order_id_ != nullptr;
}
inline bool Order::has_order_id() const {
  return _internal_has_order_id();
}
inline void Order::clear_order_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.order_id_ != nullptr) {
    delete _impl_.order_id_;
  }
  _impl_.order_id_ = nullptr;
}
inline const ::dydxprotocol::clob::OrderId& Order::_internal_order_id() const {
  const ::dydxprotocol::clob::OrderId* p = _impl_.order_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::OrderId&>(
      ::dydxprotocol::clob::_OrderId_default_instance_);
}
inline const ::dydxprotocol::clob::OrderId& Order::order_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Order.order_id)
  return _internal_order_id();
}
inline void Order::unsafe_arena_set_allocated_order_id(
    ::dydxprotocol::clob::OrderId* order_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_id_);
  }
  _impl_.order_id_ = order_id;
  if (order_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.Order.order_id)
}
inline ::dydxprotocol::clob::OrderId* Order::release_order_id() {
  
  ::dydxprotocol::clob::OrderId* temp = _impl_.order_id_;
  _impl_.order_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::OrderId* Order::unsafe_arena_release_order_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.Order.order_id)
  
  ::dydxprotocol::clob::OrderId* temp = _impl_.order_id_;
  _impl_.order_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::OrderId* Order::_internal_mutable_order_id() {
  
  if (_impl_.order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::OrderId>(GetArenaForAllocation());
    _impl_.order_id_ = p;
  }
  return _impl_.order_id_;
}
inline ::dydxprotocol::clob::OrderId* Order::mutable_order_id() {
  ::dydxprotocol::clob::OrderId* _msg = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.Order.order_id)
  return _msg;
}
inline void Order::set_allocated_order_id(::dydxprotocol::clob::OrderId* order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.order_id_;
  }
  if (order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order_id);
    if (message_arena != submessage_arena) {
      order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.order_id_ = order_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.Order.order_id)
}

// .dydxprotocol.clob.Order.Side side = 2;
inline void Order::clear_side() {
  _impl_.side_ = 0;
}
inline ::dydxprotocol::clob::Order_Side Order::_internal_side() const {
  return static_cast< ::dydxprotocol::clob::Order_Side >(_impl_.side_);
}
inline ::dydxprotocol::clob::Order_Side Order::side() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Order.side)
  return _internal_side();
}
inline void Order::_internal_set_side(::dydxprotocol::clob::Order_Side value) {
  
  _impl_.side_ = value;
}
inline void Order::set_side(::dydxprotocol::clob::Order_Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.Order.side)
}

// uint64 quantums = 3;
inline void Order::clear_quantums() {
  _impl_.quantums_ = uint64_t{0u};
}
inline uint64_t Order::_internal_quantums() const {
  return _impl_.quantums_;
}
inline uint64_t Order::quantums() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Order.quantums)
  return _internal_quantums();
}
inline void Order::_internal_set_quantums(uint64_t value) {
  
  _impl_.quantums_ = value;
}
inline void Order::set_quantums(uint64_t value) {
  _internal_set_quantums(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.Order.quantums)
}

// uint64 subticks = 4;
inline void Order::clear_subticks() {
  _impl_.subticks_ = uint64_t{0u};
}
inline uint64_t Order::_internal_subticks() const {
  return _impl_.subticks_;
}
inline uint64_t Order::subticks() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Order.subticks)
  return _internal_subticks();
}
inline void Order::_internal_set_subticks(uint64_t value) {
  
  _impl_.subticks_ = value;
}
inline void Order::set_subticks(uint64_t value) {
  _internal_set_subticks(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.Order.subticks)
}

// uint32 good_til_block = 5;
inline bool Order::_internal_has_good_til_block() const {
  return good_til_oneof_case() == kGoodTilBlock;
}
inline bool Order::has_good_til_block() const {
  return _internal_has_good_til_block();
}
inline void Order::set_has_good_til_block() {
  _impl_._oneof_case_[0] = kGoodTilBlock;
}
inline void Order::clear_good_til_block() {
  if (_internal_has_good_til_block()) {
    _impl_.good_til_oneof_.good_til_block_ = 0u;
    clear_has_good_til_oneof();
  }
}
inline uint32_t Order::_internal_good_til_block() const {
  if (_internal_has_good_til_block()) {
    return _impl_.good_til_oneof_.good_til_block_;
  }
  return 0u;
}
inline void Order::_internal_set_good_til_block(uint32_t value) {
  if (!_internal_has_good_til_block()) {
    clear_good_til_oneof();
    set_has_good_til_block();
  }
  _impl_.good_til_oneof_.good_til_block_ = value;
}
inline uint32_t Order::good_til_block() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Order.good_til_block)
  return _internal_good_til_block();
}
inline void Order::set_good_til_block(uint32_t value) {
  _internal_set_good_til_block(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.Order.good_til_block)
}

// fixed32 good_til_block_time = 6;
inline bool Order::_internal_has_good_til_block_time() const {
  return good_til_oneof_case() == kGoodTilBlockTime;
}
inline bool Order::has_good_til_block_time() const {
  return _internal_has_good_til_block_time();
}
inline void Order::set_has_good_til_block_time() {
  _impl_._oneof_case_[0] = kGoodTilBlockTime;
}
inline void Order::clear_good_til_block_time() {
  if (_internal_has_good_til_block_time()) {
    _impl_.good_til_oneof_.good_til_block_time_ = 0u;
    clear_has_good_til_oneof();
  }
}
inline uint32_t Order::_internal_good_til_block_time() const {
  if (_internal_has_good_til_block_time()) {
    return _impl_.good_til_oneof_.good_til_block_time_;
  }
  return 0u;
}
inline void Order::_internal_set_good_til_block_time(uint32_t value) {
  if (!_internal_has_good_til_block_time()) {
    clear_good_til_oneof();
    set_has_good_til_block_time();
  }
  _impl_.good_til_oneof_.good_til_block_time_ = value;
}
inline uint32_t Order::good_til_block_time() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Order.good_til_block_time)
  return _internal_good_til_block_time();
}
inline void Order::set_good_til_block_time(uint32_t value) {
  _internal_set_good_til_block_time(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.Order.good_til_block_time)
}

// .dydxprotocol.clob.Order.TimeInForce time_in_force = 7;
inline void Order::clear_time_in_force() {
  _impl_.time_in_force_ = 0;
}
inline ::dydxprotocol::clob::Order_TimeInForce Order::_internal_time_in_force() const {
  return static_cast< ::dydxprotocol::clob::Order_TimeInForce >(_impl_.time_in_force_);
}
inline ::dydxprotocol::clob::Order_TimeInForce Order::time_in_force() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Order.time_in_force)
  return _internal_time_in_force();
}
inline void Order::_internal_set_time_in_force(::dydxprotocol::clob::Order_TimeInForce value) {
  
  _impl_.time_in_force_ = value;
}
inline void Order::set_time_in_force(::dydxprotocol::clob::Order_TimeInForce value) {
  _internal_set_time_in_force(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.Order.time_in_force)
}

// bool reduce_only = 8;
inline void Order::clear_reduce_only() {
  _impl_.reduce_only_ = false;
}
inline bool Order::_internal_reduce_only() const {
  return _impl_.reduce_only_;
}
inline bool Order::reduce_only() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Order.reduce_only)
  return _internal_reduce_only();
}
inline void Order::_internal_set_reduce_only(bool value) {
  
  _impl_.reduce_only_ = value;
}
inline void Order::set_reduce_only(bool value) {
  _internal_set_reduce_only(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.Order.reduce_only)
}

// uint32 client_metadata = 9;
inline void Order::clear_client_metadata() {
  _impl_.client_metadata_ = 0u;
}
inline uint32_t Order::_internal_client_metadata() const {
  return _impl_.client_metadata_;
}
inline uint32_t Order::client_metadata() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Order.client_metadata)
  return _internal_client_metadata();
}
inline void Order::_internal_set_client_metadata(uint32_t value) {
  
  _impl_.client_metadata_ = value;
}
inline void Order::set_client_metadata(uint32_t value) {
  _internal_set_client_metadata(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.Order.client_metadata)
}

// .dydxprotocol.clob.Order.ConditionType condition_type = 10;
inline void Order::clear_condition_type() {
  _impl_.condition_type_ = 0;
}
inline ::dydxprotocol::clob::Order_ConditionType Order::_internal_condition_type() const {
  return static_cast< ::dydxprotocol::clob::Order_ConditionType >(_impl_.condition_type_);
}
inline ::dydxprotocol::clob::Order_ConditionType Order::condition_type() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Order.condition_type)
  return _internal_condition_type();
}
inline void Order::_internal_set_condition_type(::dydxprotocol::clob::Order_ConditionType value) {
  
  _impl_.condition_type_ = value;
}
inline void Order::set_condition_type(::dydxprotocol::clob::Order_ConditionType value) {
  _internal_set_condition_type(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.Order.condition_type)
}

// uint64 conditional_order_trigger_subticks = 11;
inline void Order::clear_conditional_order_trigger_subticks() {
  _impl_.conditional_order_trigger_subticks_ = uint64_t{0u};
}
inline uint64_t Order::_internal_conditional_order_trigger_subticks() const {
  return _impl_.conditional_order_trigger_subticks_;
}
inline uint64_t Order::conditional_order_trigger_subticks() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Order.conditional_order_trigger_subticks)
  return _internal_conditional_order_trigger_subticks();
}
inline void Order::_internal_set_conditional_order_trigger_subticks(uint64_t value) {
  
  _impl_.conditional_order_trigger_subticks_ = value;
}
inline void Order::set_conditional_order_trigger_subticks(uint64_t value) {
  _internal_set_conditional_order_trigger_subticks(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.Order.conditional_order_trigger_subticks)
}

inline bool Order::has_good_til_oneof() const {
  return good_til_oneof_case() != GOOD_TIL_ONEOF_NOT_SET;
}
inline void Order::clear_has_good_til_oneof() {
  _impl_._oneof_case_[0] = GOOD_TIL_ONEOF_NOT_SET;
}
inline Order::GoodTilOneofCase Order::good_til_oneof_case() const {
  return Order::GoodTilOneofCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransactionOrdering

// uint32 block_height = 1;
inline void TransactionOrdering::clear_block_height() {
  _impl_.block_height_ = 0u;
}
inline uint32_t TransactionOrdering::_internal_block_height() const {
  return _impl_.block_height_;
}
inline uint32_t TransactionOrdering::block_height() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.TransactionOrdering.block_height)
  return _internal_block_height();
}
inline void TransactionOrdering::_internal_set_block_height(uint32_t value) {
  
  _impl_.block_height_ = value;
}
inline void TransactionOrdering::set_block_height(uint32_t value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.TransactionOrdering.block_height)
}

// uint32 transaction_index = 2;
inline void TransactionOrdering::clear_transaction_index() {
  _impl_.transaction_index_ = 0u;
}
inline uint32_t TransactionOrdering::_internal_transaction_index() const {
  return _impl_.transaction_index_;
}
inline uint32_t TransactionOrdering::transaction_index() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.TransactionOrdering.transaction_index)
  return _internal_transaction_index();
}
inline void TransactionOrdering::_internal_set_transaction_index(uint32_t value) {
  
  _impl_.transaction_index_ = value;
}
inline void TransactionOrdering::set_transaction_index(uint32_t value) {
  _internal_set_transaction_index(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.TransactionOrdering.transaction_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace clob
}  // namespace dydxprotocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dydxprotocol::clob::Order_Side> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dydxprotocol::clob::Order_Side>() {
  return ::dydxprotocol::clob::Order_Side_descriptor();
}
template <> struct is_proto_enum< ::dydxprotocol::clob::Order_TimeInForce> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dydxprotocol::clob::Order_TimeInForce>() {
  return ::dydxprotocol::clob::Order_TimeInForce_descriptor();
}
template <> struct is_proto_enum< ::dydxprotocol::clob::Order_ConditionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dydxprotocol::clob::Order_ConditionType>() {
  return ::dydxprotocol::clob::Order_ConditionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2forder_2eproto
