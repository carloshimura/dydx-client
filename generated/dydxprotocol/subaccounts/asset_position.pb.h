// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/subaccounts/asset_position.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fsubaccounts_2fasset_5fposition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fsubaccounts_2fasset_5fposition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fsubaccounts_2fasset_5fposition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fsubaccounts_2fasset_5fposition_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dydxprotocol_2fsubaccounts_2fasset_5fposition_2eproto;
namespace dydxprotocol {
namespace subaccounts {
class AssetPosition;
struct AssetPositionDefaultTypeInternal;
extern AssetPositionDefaultTypeInternal _AssetPosition_default_instance_;
}  // namespace subaccounts
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::dydxprotocol::subaccounts::AssetPosition* Arena::CreateMaybeMessage<::dydxprotocol::subaccounts::AssetPosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dydxprotocol {
namespace subaccounts {

// ===================================================================

class AssetPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.subaccounts.AssetPosition) */ {
 public:
  inline AssetPosition() : AssetPosition(nullptr) {}
  ~AssetPosition() override;
  explicit PROTOBUF_CONSTEXPR AssetPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssetPosition(const AssetPosition& from);
  AssetPosition(AssetPosition&& from) noexcept
    : AssetPosition() {
    *this = ::std::move(from);
  }

  inline AssetPosition& operator=(const AssetPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetPosition& operator=(AssetPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetPosition* internal_default_instance() {
    return reinterpret_cast<const AssetPosition*>(
               &_AssetPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AssetPosition& a, AssetPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssetPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AssetPosition& from) {
    AssetPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.subaccounts.AssetPosition";
  }
  protected:
  explicit AssetPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantumsFieldNumber = 2,
    kIndexFieldNumber = 3,
    kAssetIdFieldNumber = 1,
  };
  // bytes quantums = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  void clear_quantums();
  const std::string& quantums() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quantums(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quantums();
  PROTOBUF_NODISCARD std::string* release_quantums();
  void set_allocated_quantums(std::string* quantums);
  private:
  const std::string& _internal_quantums() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quantums(const std::string& value);
  std::string* _internal_mutable_quantums();
  public:

  // uint64 index = 3;
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // uint32 asset_id = 1;
  void clear_asset_id();
  uint32_t asset_id() const;
  void set_asset_id(uint32_t value);
  private:
  uint32_t _internal_asset_id() const;
  void _internal_set_asset_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dydxprotocol.subaccounts.AssetPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quantums_;
    uint64_t index_;
    uint32_t asset_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fsubaccounts_2fasset_5fposition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AssetPosition

// uint32 asset_id = 1;
inline void AssetPosition::clear_asset_id() {
  _impl_.asset_id_ = 0u;
}
inline uint32_t AssetPosition::_internal_asset_id() const {
  return _impl_.asset_id_;
}
inline uint32_t AssetPosition::asset_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.AssetPosition.asset_id)
  return _internal_asset_id();
}
inline void AssetPosition::_internal_set_asset_id(uint32_t value) {
  
  _impl_.asset_id_ = value;
}
inline void AssetPosition::set_asset_id(uint32_t value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.subaccounts.AssetPosition.asset_id)
}

// bytes quantums = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
inline void AssetPosition::clear_quantums() {
  _impl_.quantums_.ClearToEmpty();
}
inline const std::string& AssetPosition::quantums() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.AssetPosition.quantums)
  return _internal_quantums();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssetPosition::set_quantums(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quantums_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.subaccounts.AssetPosition.quantums)
}
inline std::string* AssetPosition::mutable_quantums() {
  std::string* _s = _internal_mutable_quantums();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.subaccounts.AssetPosition.quantums)
  return _s;
}
inline const std::string& AssetPosition::_internal_quantums() const {
  return _impl_.quantums_.Get();
}
inline void AssetPosition::_internal_set_quantums(const std::string& value) {
  
  _impl_.quantums_.Set(value, GetArenaForAllocation());
}
inline std::string* AssetPosition::_internal_mutable_quantums() {
  
  return _impl_.quantums_.Mutable(GetArenaForAllocation());
}
inline std::string* AssetPosition::release_quantums() {
  // @@protoc_insertion_point(field_release:dydxprotocol.subaccounts.AssetPosition.quantums)
  return _impl_.quantums_.Release();
}
inline void AssetPosition::set_allocated_quantums(std::string* quantums) {
  if (quantums != nullptr) {
    
  } else {
    
  }
  _impl_.quantums_.SetAllocated(quantums, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quantums_.IsDefault()) {
    _impl_.quantums_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.subaccounts.AssetPosition.quantums)
}

// uint64 index = 3;
inline void AssetPosition::clear_index() {
  _impl_.index_ = uint64_t{0u};
}
inline uint64_t AssetPosition::_internal_index() const {
  return _impl_.index_;
}
inline uint64_t AssetPosition::index() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.AssetPosition.index)
  return _internal_index();
}
inline void AssetPosition::_internal_set_index(uint64_t value) {
  
  _impl_.index_ = value;
}
inline void AssetPosition::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.subaccounts.AssetPosition.index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace subaccounts
}  // namespace dydxprotocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fsubaccounts_2fasset_5fposition_2eproto
