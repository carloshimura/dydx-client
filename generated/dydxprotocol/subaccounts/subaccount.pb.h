// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/subaccounts/subaccount.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cosmos_proto/cosmos.pb.h"
#include "dydxprotocol/subaccounts/asset_position.pb.h"
#include "dydxprotocol/subaccounts/perpetual_position.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto;
namespace dydxprotocol {
namespace subaccounts {
class Subaccount;
struct SubaccountDefaultTypeInternal;
extern SubaccountDefaultTypeInternal _Subaccount_default_instance_;
class SubaccountId;
struct SubaccountIdDefaultTypeInternal;
extern SubaccountIdDefaultTypeInternal _SubaccountId_default_instance_;
}  // namespace subaccounts
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::dydxprotocol::subaccounts::Subaccount* Arena::CreateMaybeMessage<::dydxprotocol::subaccounts::Subaccount>(Arena*);
template<> ::dydxprotocol::subaccounts::SubaccountId* Arena::CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dydxprotocol {
namespace subaccounts {

// ===================================================================

class SubaccountId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.subaccounts.SubaccountId) */ {
 public:
  inline SubaccountId() : SubaccountId(nullptr) {}
  ~SubaccountId() override;
  explicit PROTOBUF_CONSTEXPR SubaccountId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubaccountId(const SubaccountId& from);
  SubaccountId(SubaccountId&& from) noexcept
    : SubaccountId() {
    *this = ::std::move(from);
  }

  inline SubaccountId& operator=(const SubaccountId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubaccountId& operator=(SubaccountId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubaccountId& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubaccountId* internal_default_instance() {
    return reinterpret_cast<const SubaccountId*>(
               &_SubaccountId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubaccountId& a, SubaccountId& b) {
    a.Swap(&b);
  }
  inline void Swap(SubaccountId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubaccountId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubaccountId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubaccountId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubaccountId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubaccountId& from) {
    SubaccountId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubaccountId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.subaccounts.SubaccountId";
  }
  protected:
  explicit SubaccountId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kNumberFieldNumber = 2,
  };
  // string owner = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // uint32 number = 2;
  void clear_number();
  uint32_t number() const;
  void set_number(uint32_t value);
  private:
  uint32_t _internal_number() const;
  void _internal_set_number(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dydxprotocol.subaccounts.SubaccountId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    uint32_t number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto;
};
// -------------------------------------------------------------------

class Subaccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.subaccounts.Subaccount) */ {
 public:
  inline Subaccount() : Subaccount(nullptr) {}
  ~Subaccount() override;
  explicit PROTOBUF_CONSTEXPR Subaccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subaccount(const Subaccount& from);
  Subaccount(Subaccount&& from) noexcept
    : Subaccount() {
    *this = ::std::move(from);
  }

  inline Subaccount& operator=(const Subaccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subaccount& operator=(Subaccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subaccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subaccount* internal_default_instance() {
    return reinterpret_cast<const Subaccount*>(
               &_Subaccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Subaccount& a, Subaccount& b) {
    a.Swap(&b);
  }
  inline void Swap(Subaccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subaccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Subaccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Subaccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Subaccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Subaccount& from) {
    Subaccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subaccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dydxprotocol.subaccounts.Subaccount";
  }
  protected:
  explicit Subaccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetPositionsFieldNumber = 2,
    kPerpetualPositionsFieldNumber = 3,
    kIdFieldNumber = 1,
    kMarginEnabledFieldNumber = 4,
  };
  // repeated .dydxprotocol.subaccounts.AssetPosition asset_positions = 2;
  int asset_positions_size() const;
  private:
  int _internal_asset_positions_size() const;
  public:
  void clear_asset_positions();
  ::dydxprotocol::subaccounts::AssetPosition* mutable_asset_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::AssetPosition >*
      mutable_asset_positions();
  private:
  const ::dydxprotocol::subaccounts::AssetPosition& _internal_asset_positions(int index) const;
  ::dydxprotocol::subaccounts::AssetPosition* _internal_add_asset_positions();
  public:
  const ::dydxprotocol::subaccounts::AssetPosition& asset_positions(int index) const;
  ::dydxprotocol::subaccounts::AssetPosition* add_asset_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::AssetPosition >&
      asset_positions() const;

  // repeated .dydxprotocol.subaccounts.PerpetualPosition perpetual_positions = 3;
  int perpetual_positions_size() const;
  private:
  int _internal_perpetual_positions_size() const;
  public:
  void clear_perpetual_positions();
  ::dydxprotocol::subaccounts::PerpetualPosition* mutable_perpetual_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::PerpetualPosition >*
      mutable_perpetual_positions();
  private:
  const ::dydxprotocol::subaccounts::PerpetualPosition& _internal_perpetual_positions(int index) const;
  ::dydxprotocol::subaccounts::PerpetualPosition* _internal_add_perpetual_positions();
  public:
  const ::dydxprotocol::subaccounts::PerpetualPosition& perpetual_positions(int index) const;
  ::dydxprotocol::subaccounts::PerpetualPosition* add_perpetual_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::PerpetualPosition >&
      perpetual_positions() const;

  // .dydxprotocol.subaccounts.SubaccountId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::dydxprotocol::subaccounts::SubaccountId& id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_id();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_id();
  void set_allocated_id(::dydxprotocol::subaccounts::SubaccountId* id);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_id() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::dydxprotocol::subaccounts::SubaccountId* id);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_id();

  // bool margin_enabled = 4;
  void clear_margin_enabled();
  bool margin_enabled() const;
  void set_margin_enabled(bool value);
  private:
  bool _internal_margin_enabled() const;
  void _internal_set_margin_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dydxprotocol.subaccounts.Subaccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::AssetPosition > asset_positions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::PerpetualPosition > perpetual_positions_;
    ::dydxprotocol::subaccounts::SubaccountId* id_;
    bool margin_enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubaccountId

// string owner = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void SubaccountId::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& SubaccountId::owner() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.SubaccountId.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubaccountId::set_owner(ArgT0&& arg0, ArgT... args) {
 
 _impl_.owner_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.subaccounts.SubaccountId.owner)
}
inline std::string* SubaccountId::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.subaccounts.SubaccountId.owner)
  return _s;
}
inline const std::string& SubaccountId::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void SubaccountId::_internal_set_owner(const std::string& value) {
  
  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* SubaccountId::_internal_mutable_owner() {
  
  return _impl_.owner_.Mutable(GetArenaForAllocation());
}
inline std::string* SubaccountId::release_owner() {
  // @@protoc_insertion_point(field_release:dydxprotocol.subaccounts.SubaccountId.owner)
  return _impl_.owner_.Release();
}
inline void SubaccountId::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  _impl_.owner_.SetAllocated(owner, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.subaccounts.SubaccountId.owner)
}

// uint32 number = 2;
inline void SubaccountId::clear_number() {
  _impl_.number_ = 0u;
}
inline uint32_t SubaccountId::_internal_number() const {
  return _impl_.number_;
}
inline uint32_t SubaccountId::number() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.SubaccountId.number)
  return _internal_number();
}
inline void SubaccountId::_internal_set_number(uint32_t value) {
  
  _impl_.number_ = value;
}
inline void SubaccountId::set_number(uint32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.subaccounts.SubaccountId.number)
}

// -------------------------------------------------------------------

// Subaccount

// .dydxprotocol.subaccounts.SubaccountId id = 1;
inline bool Subaccount::_internal_has_id() const {
  return this != internal_default_instance() && _impl_.id_ != nullptr;
}
inline bool Subaccount::has_id() const {
  return _internal_has_id();
}
inline void Subaccount::clear_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
}
inline const ::dydxprotocol::subaccounts::SubaccountId& Subaccount::_internal_id() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& Subaccount::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.Subaccount.id)
  return _internal_id();
}
inline void Subaccount::unsafe_arena_set_allocated_id(
    ::dydxprotocol::subaccounts::SubaccountId* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.subaccounts.Subaccount.id)
}
inline ::dydxprotocol::subaccounts::SubaccountId* Subaccount::release_id() {
  
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* Subaccount::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.subaccounts.Subaccount.id)
  
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* Subaccount::_internal_mutable_id() {
  
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* Subaccount::mutable_id() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.subaccounts.Subaccount.id)
  return _msg;
}
inline void Subaccount::set_allocated_id(::dydxprotocol::subaccounts::SubaccountId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.subaccounts.Subaccount.id)
}

// repeated .dydxprotocol.subaccounts.AssetPosition asset_positions = 2;
inline int Subaccount::_internal_asset_positions_size() const {
  return _impl_.asset_positions_.size();
}
inline int Subaccount::asset_positions_size() const {
  return _internal_asset_positions_size();
}
inline ::dydxprotocol::subaccounts::AssetPosition* Subaccount::mutable_asset_positions(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.subaccounts.Subaccount.asset_positions)
  return _impl_.asset_positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::AssetPosition >*
Subaccount::mutable_asset_positions() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.subaccounts.Subaccount.asset_positions)
  return &_impl_.asset_positions_;
}
inline const ::dydxprotocol::subaccounts::AssetPosition& Subaccount::_internal_asset_positions(int index) const {
  return _impl_.asset_positions_.Get(index);
}
inline const ::dydxprotocol::subaccounts::AssetPosition& Subaccount::asset_positions(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.Subaccount.asset_positions)
  return _internal_asset_positions(index);
}
inline ::dydxprotocol::subaccounts::AssetPosition* Subaccount::_internal_add_asset_positions() {
  return _impl_.asset_positions_.Add();
}
inline ::dydxprotocol::subaccounts::AssetPosition* Subaccount::add_asset_positions() {
  ::dydxprotocol::subaccounts::AssetPosition* _add = _internal_add_asset_positions();
  // @@protoc_insertion_point(field_add:dydxprotocol.subaccounts.Subaccount.asset_positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::AssetPosition >&
Subaccount::asset_positions() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.subaccounts.Subaccount.asset_positions)
  return _impl_.asset_positions_;
}

// repeated .dydxprotocol.subaccounts.PerpetualPosition perpetual_positions = 3;
inline int Subaccount::_internal_perpetual_positions_size() const {
  return _impl_.perpetual_positions_.size();
}
inline int Subaccount::perpetual_positions_size() const {
  return _internal_perpetual_positions_size();
}
inline ::dydxprotocol::subaccounts::PerpetualPosition* Subaccount::mutable_perpetual_positions(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.subaccounts.Subaccount.perpetual_positions)
  return _impl_.perpetual_positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::PerpetualPosition >*
Subaccount::mutable_perpetual_positions() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.subaccounts.Subaccount.perpetual_positions)
  return &_impl_.perpetual_positions_;
}
inline const ::dydxprotocol::subaccounts::PerpetualPosition& Subaccount::_internal_perpetual_positions(int index) const {
  return _impl_.perpetual_positions_.Get(index);
}
inline const ::dydxprotocol::subaccounts::PerpetualPosition& Subaccount::perpetual_positions(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.Subaccount.perpetual_positions)
  return _internal_perpetual_positions(index);
}
inline ::dydxprotocol::subaccounts::PerpetualPosition* Subaccount::_internal_add_perpetual_positions() {
  return _impl_.perpetual_positions_.Add();
}
inline ::dydxprotocol::subaccounts::PerpetualPosition* Subaccount::add_perpetual_positions() {
  ::dydxprotocol::subaccounts::PerpetualPosition* _add = _internal_add_perpetual_positions();
  // @@protoc_insertion_point(field_add:dydxprotocol.subaccounts.Subaccount.perpetual_positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::PerpetualPosition >&
Subaccount::perpetual_positions() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.subaccounts.Subaccount.perpetual_positions)
  return _impl_.perpetual_positions_;
}

// bool margin_enabled = 4;
inline void Subaccount::clear_margin_enabled() {
  _impl_.margin_enabled_ = false;
}
inline bool Subaccount::_internal_margin_enabled() const {
  return _impl_.margin_enabled_;
}
inline bool Subaccount::margin_enabled() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.Subaccount.margin_enabled)
  return _internal_margin_enabled();
}
inline void Subaccount::_internal_set_margin_enabled(bool value) {
  
  _impl_.margin_enabled_ = value;
}
inline void Subaccount::set_margin_enabled(bool value) {
  _internal_set_margin_enabled(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.subaccounts.Subaccount.margin_enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace subaccounts
}  // namespace dydxprotocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto
