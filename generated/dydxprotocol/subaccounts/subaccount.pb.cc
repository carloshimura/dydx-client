// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/subaccounts/subaccount.proto

#include "dydxprotocol/subaccounts/subaccount.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dydxprotocol {
namespace subaccounts {
PROTOBUF_CONSTEXPR SubaccountId::SubaccountId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.number_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubaccountIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubaccountIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubaccountIdDefaultTypeInternal() {}
  union {
    SubaccountId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubaccountIdDefaultTypeInternal _SubaccountId_default_instance_;
PROTOBUF_CONSTEXPR Subaccount::Subaccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asset_positions_)*/{}
  , /*decltype(_impl_.perpetual_positions_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.margin_enabled_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubaccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubaccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubaccountDefaultTypeInternal() {}
  union {
    Subaccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubaccountDefaultTypeInternal _Subaccount_default_instance_;
}  // namespace subaccounts
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto = nullptr;

const uint32_t TableStruct_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::subaccounts::SubaccountId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::subaccounts::SubaccountId, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::subaccounts::SubaccountId, _impl_.number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::subaccounts::Subaccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::subaccounts::Subaccount, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::subaccounts::Subaccount, _impl_.asset_positions_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::subaccounts::Subaccount, _impl_.perpetual_positions_),
  PROTOBUF_FIELD_OFFSET(::dydxprotocol::subaccounts::Subaccount, _impl_.margin_enabled_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dydxprotocol::subaccounts::SubaccountId)},
  { 8, -1, -1, sizeof(::dydxprotocol::subaccounts::Subaccount)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dydxprotocol::subaccounts::_SubaccountId_default_instance_._instance,
  &::dydxprotocol::subaccounts::_Subaccount_default_instance_._instance,
};

const char descriptor_table_protodef_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)dydxprotocol/subaccounts/subaccount.pr"
  "oto\022\030dydxprotocol.subaccounts\032\031cosmos_pr"
  "oto/cosmos.proto\032-dydxprotocol/subaccoun"
  "ts/asset_position.proto\0321dydxprotocol/su"
  "baccounts/perpetual_position.proto\"G\n\014Su"
  "baccountId\022\'\n\005owner\030\001 \001(\tB\030\322\264-\024cosmos.Ad"
  "dressString\022\016\n\006number\030\002 \001(\r\"\344\001\n\nSubaccou"
  "nt\0222\n\002id\030\001 \001(\0132&.dydxprotocol.subaccount"
  "s.SubaccountId\022@\n\017asset_positions\030\002 \003(\0132"
  "\'.dydxprotocol.subaccounts.AssetPosition"
  "\022H\n\023perpetual_positions\030\003 \003(\0132+.dydxprot"
  "ocol.subaccounts.PerpetualPosition\022\026\n\016ma"
  "rgin_enabled\030\004 \001(\010B\?Z=github.com/dydxpro"
  "tocol/v4-chain/protocol/x/subaccounts/ty"
  "pesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto_deps[3] = {
  &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
  &::descriptor_table_dydxprotocol_2fsubaccounts_2fasset_5fposition_2eproto,
  &::descriptor_table_dydxprotocol_2fsubaccounts_2fperpetual_5fposition_2eproto,
};
static ::_pbi::once_flag descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto = {
    false, false, 571, descriptor_table_protodef_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto,
    "dydxprotocol/subaccounts/subaccount.proto",
    &descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto_once, descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto_deps, 3, 2,
    schemas, file_default_instances, TableStruct_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto, file_level_enum_descriptors_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto,
    file_level_service_descriptors_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto(&descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto);
namespace dydxprotocol {
namespace subaccounts {

// ===================================================================

class SubaccountId::_Internal {
 public:
};

SubaccountId::SubaccountId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.subaccounts.SubaccountId)
}
SubaccountId::SubaccountId(const SubaccountId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubaccountId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_){}
    , decltype(_impl_.number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.number_ = from._impl_.number_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.subaccounts.SubaccountId)
}

inline void SubaccountId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_){}
    , decltype(_impl_.number_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubaccountId::~SubaccountId() {
  // @@protoc_insertion_point(destructor:dydxprotocol.subaccounts.SubaccountId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubaccountId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_.Destroy();
}

void SubaccountId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubaccountId::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.subaccounts.SubaccountId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_.ClearToEmpty();
  _impl_.number_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubaccountId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string owner = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.subaccounts.SubaccountId.owner"));
        } else
          goto handle_unusual;
        continue;
      // uint32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubaccountId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.subaccounts.SubaccountId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dydxprotocol.subaccounts.SubaccountId.owner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // uint32 number = 2;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.subaccounts.SubaccountId)
  return target;
}

size_t SubaccountId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.subaccounts.SubaccountId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // uint32 number = 2;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubaccountId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubaccountId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubaccountId::GetClassData() const { return &_class_data_; }


void SubaccountId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubaccountId*>(&to_msg);
  auto& from = static_cast<const SubaccountId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.subaccounts.SubaccountId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubaccountId::CopyFrom(const SubaccountId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.subaccounts.SubaccountId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubaccountId::IsInitialized() const {
  return true;
}

void SubaccountId::InternalSwap(SubaccountId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_, lhs_arena,
      &other->_impl_.owner_, rhs_arena
  );
  swap(_impl_.number_, other->_impl_.number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubaccountId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto_getter, &descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto_once,
      file_level_metadata_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto[0]);
}

// ===================================================================

class Subaccount::_Internal {
 public:
  static const ::dydxprotocol::subaccounts::SubaccountId& id(const Subaccount* msg);
};

const ::dydxprotocol::subaccounts::SubaccountId&
Subaccount::_Internal::id(const Subaccount* msg) {
  return *msg->_impl_.id_;
}
void Subaccount::clear_asset_positions() {
  _impl_.asset_positions_.Clear();
}
void Subaccount::clear_perpetual_positions() {
  _impl_.perpetual_positions_.Clear();
}
Subaccount::Subaccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.subaccounts.Subaccount)
}
Subaccount::Subaccount(const Subaccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Subaccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_positions_){from._impl_.asset_positions_}
    , decltype(_impl_.perpetual_positions_){from._impl_.perpetual_positions_}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.margin_enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.id_);
  }
  _this->_impl_.margin_enabled_ = from._impl_.margin_enabled_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.subaccounts.Subaccount)
}

inline void Subaccount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_positions_){arena}
    , decltype(_impl_.perpetual_positions_){arena}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.margin_enabled_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Subaccount::~Subaccount() {
  // @@protoc_insertion_point(destructor:dydxprotocol.subaccounts.Subaccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Subaccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asset_positions_.~RepeatedPtrField();
  _impl_.perpetual_positions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
}

void Subaccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Subaccount::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.subaccounts.Subaccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asset_positions_.Clear();
  _impl_.perpetual_positions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  _impl_.margin_enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subaccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.subaccounts.SubaccountId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dydxprotocol.subaccounts.AssetPosition asset_positions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asset_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dydxprotocol.subaccounts.PerpetualPosition perpetual_positions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perpetual_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool margin_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.margin_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Subaccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.subaccounts.Subaccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dydxprotocol.subaccounts.SubaccountId id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // repeated .dydxprotocol.subaccounts.AssetPosition asset_positions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_asset_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_asset_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dydxprotocol.subaccounts.PerpetualPosition perpetual_positions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_perpetual_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_perpetual_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool margin_enabled = 4;
  if (this->_internal_margin_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_margin_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.subaccounts.Subaccount)
  return target;
}

size_t Subaccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.subaccounts.Subaccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.subaccounts.AssetPosition asset_positions = 2;
  total_size += 1UL * this->_internal_asset_positions_size();
  for (const auto& msg : this->_impl_.asset_positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dydxprotocol.subaccounts.PerpetualPosition perpetual_positions = 3;
  total_size += 1UL * this->_internal_perpetual_positions_size();
  for (const auto& msg : this->_impl_.perpetual_positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dydxprotocol.subaccounts.SubaccountId id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  // bool margin_enabled = 4;
  if (this->_internal_margin_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subaccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Subaccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subaccount::GetClassData() const { return &_class_data_; }


void Subaccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Subaccount*>(&to_msg);
  auto& from = static_cast<const Subaccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.subaccounts.Subaccount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.asset_positions_.MergeFrom(from._impl_.asset_positions_);
  _this->_impl_.perpetual_positions_.MergeFrom(from._impl_.perpetual_positions_);
  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
        from._internal_id());
  }
  if (from._internal_margin_enabled() != 0) {
    _this->_internal_set_margin_enabled(from._internal_margin_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subaccount::CopyFrom(const Subaccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.subaccounts.Subaccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subaccount::IsInitialized() const {
  return true;
}

void Subaccount::InternalSwap(Subaccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.asset_positions_.InternalSwap(&other->_impl_.asset_positions_);
  _impl_.perpetual_positions_.InternalSwap(&other->_impl_.perpetual_positions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subaccount, _impl_.margin_enabled_)
      + sizeof(Subaccount::_impl_.margin_enabled_)
      - PROTOBUF_FIELD_OFFSET(Subaccount, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Subaccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto_getter, &descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto_once,
      file_level_metadata_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace subaccounts
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::subaccounts::SubaccountId*
Arena::CreateMaybeMessage< ::dydxprotocol::subaccounts::SubaccountId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::subaccounts::SubaccountId >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::subaccounts::Subaccount*
Arena::CreateMaybeMessage< ::dydxprotocol::subaccounts::Subaccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::subaccounts::Subaccount >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
